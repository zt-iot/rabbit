theory rabbit begin

// Function signature and definition of the equational theory E

builtins: natural-numbers
functions: dec/2, enc/2, fst/1, pair/2, pk/1, sign/2, snd/1, true/0,
           verify/3
equations:
    dec(enc(loc__1, loc__0), loc__0) = loc__1,
    fst(<loc__1, loc__0>) = loc__1,
    fst(<x.1, x.2>) = x.1,
    snd(<loc__1, loc__0>) = loc__0,
    snd(<x.1, x.2>) = x.2,
    verify(sign(loc__1, loc__0), loc__1, pk(loc__0)) = true







rule (modulo E) Const__nonce_a:
   [ Fr( nonce_a ) ]
  --[
  Init__( 'rab__Const__nonce_a' ),
  Init__( <'rab__Const__nonce_a', nonce_a> ),
  !Const__( 'rab__nonce_a', nonce_a )
  ]->
   [ !Const__( 'rab__nonce_a', nonce_a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Const__nonce_b:
   [ Fr( nonce_b ) ]
  --[
  Init__( 'rab__Const__nonce_b' ),
  Init__( <'rab__Const__nonce_b', nonce_b> ),
  !Const__( 'rab__nonce_b', nonce_b )
  ]->
   [ !Const__( 'rab__nonce_b', nonce_b ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Const__priv_key_alice:
   [ Fr( priv_key_alice ) ]
  --[
  Init__( 'rab__Const__priv_key_alice' ),
  Init__( <'rab__Const__priv_key_alice', priv_key_alice> ),
  !Const__( 'rab__priv_key_alice', priv_key_alice )
  ]->
   [ !Const__( 'rab__priv_key_alice', priv_key_alice ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Const__priv_key_bob:
   [ Fr( priv_key_bob ) ]
  --[
  Init__( 'rab__Const__priv_key_bob' ),
  Init__( <'rab__Const__priv_key_bob', priv_key_bob> ),
  !Const__( 'rab__priv_key_bob', priv_key_bob )
  ]->
   [ !Const__( 'rab__priv_key_bob', priv_key_bob ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system[role=system]:
   [ ]
  --[ Init__( 'rab__system' ) ]->
   [
   State__Alice( <'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__',
                 'rab__'
   ),
   State__Bob( <'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__',
               'rab__'
   ),
   !ACP__GEN__( 'rab__system__', 'rab__rab' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__0[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__0' ) ]->
   [ !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__1[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__1' ) ]->
   [ !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__send' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__2[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__2' ) ]->
   [ !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__3[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__3' ) ]->
   [ !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__send' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____0_____2__1_0__131[role=Alice]:
   [
   State__Alice( <'rab_____0', param, %v__>, return__var__0, 'rab__',
                 'rab__', 'rab__'
   ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__0 )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____0', %v__ ) ]->
   [
   State__Alice( <'rab_____2__1_0', param, %v__>, 'rab__', 'rab__',
                 <'rab____secret__pub_bob', 'rab__'>, 'rab__'
   ),
   File__Alice( param, 'rab____secret__pub_bob', pk(priv_key_bob__0) ),
   !ACP__( <'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fclose' ),
   !ACP__( <'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fread' ),
   !ACP__( <'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____1_____7__0_1__129[role=Alice]:
   [
   State__Alice( <'rab_____1', param, %v__>, return__var__1, 'rab__',
                 'rab__', 'rab__'
   ),
   File__Alice( param, loc__0, n__0__3 ),
   !ACP__( <'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen' ),
   !ACP__( <'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen' ),
   !ACP__( <'rab__Alice', param>, 'rab__udp', 'rab__send' ),
   !Const__( 'rab__nonce_a', nonce_a__24 ), !Eq__( n__0__3, n__0__20 ),
   Fr( n__0__4 )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____1', %v__ ) ]->
   [
   State__Alice( <'rab_____7__0_1', param, %v__>, 'rab__', 'rab__',
                 <enc(<nonce_a__24, 'rab__Alice'>, n__0__20), 'rab__udp', 
                  enc(<nonce_a__24, 'rab__Alice'>, n__0__20), n__0__20, n__0__4>,
                 'rab__'
   ),
   File__Alice( param, loc__0, n__0__3 ),
   Fd__Alice( param, n__0__4, n__0__20 ),
   Out( enc(<nonce_a__24, 'rab__Alice'>, n__0__20) ),
   Store( 'rab__udp', enc(<nonce_a__24, 'rab__Alice'>, n__0__20) )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____2__1_0_____7__0_1__120[role=Alice]:
   [
   State__Alice( <'rab_____2__1_0', param, %v__>, return__var__11, 'rab__',
                 <l__0__11, l__1__11>, 'rab__'
   ),
   File__Alice( param, loc__0, n__0__11 ), In( n__1__11 ),
   !ACP__( <'rab__Alice', param>, l__0__11, 'rab__fopen' ),
   !ACP__( <'rab__Alice', param>, l__0__11, 'rab__fopen' ),
   !ACP__( <'rab__Alice', param>, 'rab__udp', 'rab__send' ),
   !Const__( 'rab__nonce_a', nonce_a__24 ), !Eq__( n__1__11, n__0__20 ),
   Fr( n__0__12 )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____2__1_0', %v__ ) ]->
   [
   State__Alice( <'rab_____7__0_1', param, %v__>, 'rab__', 'rab__',
                 <enc(<nonce_a__24, 'rab__Alice'>, n__0__20), 'rab__udp', 
                  enc(<nonce_a__24, 'rab__Alice'>, n__0__20), n__0__20, n__0__12>,
                 'rab__'
   ),
   File__Alice( param, loc__0, n__1__11 ),
   Fd__Alice( param, n__0__12, n__0__20 ),
   Out( enc(<nonce_a__24, 'rab__Alice'>, n__0__20) ),
   Store( 'rab__udp', enc(<nonce_a__24, 'rab__Alice'>, n__0__20) )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____7__0_1_____10__0_0__102[role=Alice]:
   [
   State__Alice( <'rab_____7__0_1', param, %v__>, return__var__30, 'rab__',
                 <l__0__30, l__1__30, l__2__30, l__3__30, l__4__30>, 'rab__'
   ),
   !Const__( 'rab__nonce_a', nonce_a__31 )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____7__0_1', %v__ ),
  AliceSendNonceA( nonce_a__31 )
  ]->
   [
   State__Alice( <'rab_____10__0_0', param, %v__>, 'rab__', 'rab__',
                 <'rab__udp', 'rab__', l__2__30, l__3__30, l__4__30>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____7__0_1_____10__1_0__101[role=Alice]:
   [
   State__Alice( <'rab_____7__0_1', param, %v__>, return__var__30, 'rab__',
                 <l__0__30, l__1__30, l__2__30, l__3__30, l__4__30>, 'rab__'
   ),
   !Const__( 'rab__nonce_a', nonce_a__31 )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____7__0_1', %v__ ),
  AliceSendNonceA( nonce_a__31 )
  ]->
   [
   State__Alice( <'rab_____10__1_0', param, %v__>, 'rab__', 'rab__',
                 <'rab__udp', 'rab__', l__2__30, l__3__30, l__4__30>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____10__0_0_____14__96[role=Alice]:
   [
   State__Alice( <'rab_____10__0_0', param, %v__>, return__var__34, 'rab__',
                 <l__0__34, l__1__34, l__2__34, l__3__34, l__4__34>, 'rab__'
   ),
   Store( l__0__34, n__0__34 ),
   !ACP__( <'rab__Alice', param>, l__0__34, 'rab__recv' ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__43 )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____10__0_0', %v__ ) ]->
   [
   State__Alice( <'rab_____14', param, %v__>, 'rab__', 'rab__',
                 <snd(dec(n__0__34, priv_key_alice__43)), 
                  fst(dec(n__0__34, priv_key_alice__43)), 
                  dec(n__0__34, priv_key_alice__43), n__0__34, l__2__34, l__3__34, l__4__34
                 >,
                 'rab__'
   )
   ]

  /*
  rule (modulo AC) Alice__merged_____10__0_0_____14__96[role=Alice]:
     [
     State__Alice( <'rab_____10__0_0', param, %v__>, return__var__34, 'rab__',
                   <l__0__34, l__1__34, l__2__34, l__3__34, l__4__34>, 'rab__'
     ),
     Store( l__0__34, n__0__34 ),
     !ACP__( <'rab__Alice', param>, l__0__34, 'rab__recv' ),
     !Const__( 'rab__priv_key_alice', priv_key_alice__43 )
     ]
    --[ Transition__( <'rab__Alice', param>, 'rab_____10__0_0', %v__ ) ]->
     [
     State__Alice( <'rab_____14', param, %v__>, 'rab__', 'rab__',
                   <z, z.1, z.2, n__0__34, l__2__34, l__3__34, l__4__34>, 'rab__'
     )
     ]
    variants (modulo AC)
    1. n__0__34
             = n__0__34.23
       priv_key_alice__43
             = priv_key_alice__43.25
       z     = snd(dec(n__0__34.23, priv_key_alice__43.25))
       z.1   = fst(dec(n__0__34.23, priv_key_alice__43.25))
       z.2   = dec(n__0__34.23, priv_key_alice__43.25)
    
    2. n__0__34
             = enc(z.43, priv_key_alice__43.32)
       priv_key_alice__43
             = priv_key_alice__43.32
       z     = snd(z.43)
       z.1   = fst(z.43)
       z.2   = z.43
    
    3. n__0__34
             = enc(<z.41, z.40>, priv_key_alice__43.31)
       priv_key_alice__43
             = priv_key_alice__43.31
       z     = z.40
       z.1   = z.41
       z.2   = <z.41, z.40>
  */

rule (modulo E) Alice__merged_____10__1_0_____14__92[role=Alice]:
   [
   State__Alice( <'rab_____10__1_0', param, %v__>, return__var__39, 'rab__',
                 <l__0__39, l__1__39, l__2__39, l__3__39, l__4__39>, 'rab__'
   ),
   Store( l__0__39, n__0__39 ), In( n__1__39 ),
   !ACP__( <'rab__Alice', param>, l__0__39, 'rab__recv' ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__43 )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____10__1_0', %v__ ) ]->
   [
   State__Alice( <'rab_____14', param, %v__>, 'rab__', 'rab__',
                 <snd(dec(n__1__39, priv_key_alice__43)), 
                  fst(dec(n__1__39, priv_key_alice__43)), 
                  dec(n__1__39, priv_key_alice__43), n__1__39, l__2__39, l__3__39, l__4__39
                 >,
                 'rab__'
   )
   ]

  /*
  rule (modulo AC) Alice__merged_____10__1_0_____14__92[role=Alice]:
     [
     State__Alice( <'rab_____10__1_0', param, %v__>, return__var__39, 'rab__',
                   <l__0__39, l__1__39, l__2__39, l__3__39, l__4__39>, 'rab__'
     ),
     Store( l__0__39, n__0__39 ), In( n__1__39 ),
     !ACP__( <'rab__Alice', param>, l__0__39, 'rab__recv' ),
     !Const__( 'rab__priv_key_alice', priv_key_alice__43 )
     ]
    --[ Transition__( <'rab__Alice', param>, 'rab_____10__1_0', %v__ ) ]->
     [
     State__Alice( <'rab_____14', param, %v__>, 'rab__', 'rab__',
                   <z, z.1, z.2, n__1__39, l__2__39, l__3__39, l__4__39>, 'rab__'
     )
     ]
    variants (modulo AC)
    1. n__1__39
             = n__1__39.24
       priv_key_alice__43
             = priv_key_alice__43.26
       z     = snd(dec(n__1__39.24, priv_key_alice__43.26))
       z.1   = fst(dec(n__1__39.24, priv_key_alice__43.26))
       z.2   = dec(n__1__39.24, priv_key_alice__43.26)
    
    2. n__1__39
             = enc(z.44, priv_key_alice__43.33)
       priv_key_alice__43
             = priv_key_alice__43.33
       z     = snd(z.44)
       z.1   = fst(z.44)
       z.2   = z.44
    
    3. n__1__39
             = enc(<z.42, z.41>, priv_key_alice__43.32)
       priv_key_alice__43
             = priv_key_alice__43.32
       z     = z.41
       z.1   = z.42
       z.2   = <z.42, z.41>
  */

rule (modulo E) Alice__merged_____14_____14__0_1__86[role=Alice]:
   [
   State__Alice( <'rab_____14', param, %v__>, return__var__46, 'rab__',
                 <l__0__46, l__1__46, l__2__46, l__3__46, l__4__46, l__5__46, l__6__46>,
                 'rab__'
   ),
   AliceSendNonceA( nonce_a__46 ), !Const__( 'rab__nonce_a', nonce_a__46 ),
   !Const__( 'rab__nonce_a', nonce_a__47 )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____14', %v__ ),
  SecretNonceAlice( nonce_a__47 )
  ]->
   [
   State__Alice( <'rab_____14__0_1', param, %v__>, 'rab__', 'rab__',
                 <l__0__46, l__1__46, l__2__46, l__3__46, l__4__46, l__5__46, l__6__46>,
                 'rab__'
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____14__0_1_____14__0_3__0_1__85[role=Alice]:
   [
   State__Alice( <'rab_____14__0_1', param, %v__>, return__var__48, 'rab__',
                 <l__0__48, l__1__48, l__2__48, l__3__48, l__4__48, l__5__48, l__6__48>,
                 'rab__'
   ),
   !Const__( 'rab__nonce_b', nonce_b__48 ),
   !ACP__( <'rab__Alice', param>, 'rab__udp', 'rab__send' )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____14__0_1', %v__ ) ]->
   [
   State__Alice( <'rab_____14__0_3__0_1', param, %v__>, 'rab__', 'rab__',
                 <enc(nonce_b__48, l__5__48), 'rab__udp', enc(nonce_b__48, l__5__48), 
                  l__0__48, l__1__48, l__2__48, l__3__48, l__4__48, l__5__48, l__6__48>,
                 'rab__'
   ),
   Out( enc(nonce_b__48, l__5__48) ),
   Store( 'rab__udp', enc(nonce_b__48, l__5__48) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____14__0_3__0_1_____24__80[role=Alice]:
   [
   State__Alice( <'rab_____14__0_3__0_1', param, %v__>, return__var__54,
                 'rab__',
                 <l__0__54, l__1__54, l__2__54, l__3__54, l__4__54, l__5__54, l__6__54, 
                  l__7__54, l__8__54, l__9__54>,
                 'rab__'
   ),
   Fd__Alice( param, l__9__54, n__0__58 )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____14__0_3__0_1', %v__ ),
  AliceClose( )
  ]->
   [
   State__Alice( <'rab_____24', param, %v__>, 'rab__', 'rab__', 'rab__',
                 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__init_filesys_____0_____1__0[role=Alice]:
   [
   State__Alice( <'rab_____0', param, %v__>, return__var__0, 'rab__',
                 'rab__', 'rab__'
   ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__0 )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____0', %v__ ) ]->
   [
   State__Alice( <'rab_____1', param, %v__>, 'rab__', 'rab__', 'rab__',
                 'rab__'
   ),
   File__Alice( param, 'rab____secret__pub_bob', pk(priv_key_bob__0) ),
   !ACP__( <'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fclose' ),
   !ACP__( <'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fread' ),
   !ACP__( <'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____0_____3__0_0__84[role=Bob]:
   [
   State__Bob( <'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__',
               'rab__'
   ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__0 )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____0', %v__ ), BobOpen( )
  ]->
   [
   State__Bob( <'rab_____3__0_0', param, %v__>, 'rab__', 'rab__',
               <'rab__udp', 'rab__'>, pk(priv_key_alice__0)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____0_____3__1_0__83[role=Bob]:
   [
   State__Bob( <'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__',
               'rab__'
   ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__0 )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____0', %v__ ), BobOpen( )
  ]->
   [
   State__Bob( <'rab_____3__1_0', param, %v__>, 'rab__', 'rab__',
               <'rab__udp', 'rab__'>, pk(priv_key_alice__0)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____3__0_0_____6__78[role=Bob]:
   [
   State__Bob( <'rab_____3__0_0', param, %v__>, return__var__4, 'rab__',
               <l__0__4, l__1__4>, t__0__4
   ),
   Store( l__0__4, n__0__4 ),
   !ACP__( <'rab__Bob', param>, l__0__4, 'rab__recv' ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__13 ),
   !Const__( 'rab__nonce_a', nonce_a__14 )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____3__0_0', %v__ ),
  BobRecv( nonce_a__14 )
  ]->
   [
   State__Bob( <'rab_____6', param, %v__>, 'rab__', 'rab__',
               <fst(dec(n__0__4, priv_key_bob__13)), n__0__4>, t__0__4
   )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) Bob__merged_____3__0_0_____6__78[role=Bob]:
     [
     State__Bob( <'rab_____3__0_0', param, %v__>, return__var__4, 'rab__',
                 <l__0__4, l__1__4>, t__0__4
     ),
     Store( l__0__4, n__0__4 ),
     !ACP__( <'rab__Bob', param>, l__0__4, 'rab__recv' ),
     !Const__( 'rab__priv_key_bob', priv_key_bob__13 ),
     !Const__( 'rab__nonce_a', nonce_a__14 )
     ]
    --[
    Transition__( <'rab__Bob', param>, 'rab_____3__0_0', %v__ ),
    BobRecv( nonce_a__14 )
    ]->
     [
     State__Bob( <'rab_____6', param, %v__>, 'rab__', 'rab__', <z, n__0__4>,
                 t__0__4
     )
     ]
    variants (modulo AC)
    1. n__0__4
             = n__0__4.22
       priv_key_bob__13
             = priv_key_bob__13.25
       z     = fst(dec(n__0__4.22, priv_key_bob__13.25))
    
    2. n__0__4
             = enc(x.175, priv_key_bob__13.91)
       priv_key_bob__13
             = priv_key_bob__13.91
       z     = fst(x.175)
    
    3. n__0__4
             = enc(<z.103, x.177>, priv_key_bob__13.92)
       priv_key_bob__13
             = priv_key_bob__13.92
       z     = z.103
    // loop breaker: [1]
  */

rule (modulo E) Bob__merged_____3__1_0_____6__74[role=Bob]:
   [
   State__Bob( <'rab_____3__1_0', param, %v__>, return__var__9, 'rab__',
               <l__0__9, l__1__9>, t__0__9
   ),
   Store( l__0__9, n__0__9 ), In( n__1__9 ),
   !ACP__( <'rab__Bob', param>, l__0__9, 'rab__recv' ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__13 ),
   !Const__( 'rab__nonce_a', nonce_a__14 )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____3__1_0', %v__ ),
  BobRecv( nonce_a__14 )
  ]->
   [
   State__Bob( <'rab_____6', param, %v__>, 'rab__', 'rab__',
               <fst(dec(n__1__9, priv_key_bob__13)), n__1__9>, t__0__9
   )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) Bob__merged_____3__1_0_____6__74[role=Bob]:
     [
     State__Bob( <'rab_____3__1_0', param, %v__>, return__var__9, 'rab__',
                 <l__0__9, l__1__9>, t__0__9
     ),
     Store( l__0__9, n__0__9 ), In( n__1__9 ),
     !ACP__( <'rab__Bob', param>, l__0__9, 'rab__recv' ),
     !Const__( 'rab__priv_key_bob', priv_key_bob__13 ),
     !Const__( 'rab__nonce_a', nonce_a__14 )
     ]
    --[
    Transition__( <'rab__Bob', param>, 'rab_____3__1_0', %v__ ),
    BobRecv( nonce_a__14 )
    ]->
     [
     State__Bob( <'rab_____6', param, %v__>, 'rab__', 'rab__', <z, n__1__9>,
                 t__0__9
     )
     ]
    variants (modulo AC)
    1. n__1__9
             = n__1__9.23
       priv_key_bob__13
             = priv_key_bob__13.26
       z     = fst(dec(n__1__9.23, priv_key_bob__13.26))
    
    2. n__1__9
             = enc(x.176, priv_key_bob__13.92)
       priv_key_bob__13
             = priv_key_bob__13.92
       z     = fst(x.176)
    
    3. n__1__9
             = enc(<z.104, x.178>, priv_key_bob__13.93)
       priv_key_bob__13
             = priv_key_bob__13.93
       z     = z.104
    // loop breaker: [1]
  */

rule (modulo E) Bob__merged_____6_____8__0_1__69[role=Bob]:
   [
   State__Bob( <'rab_____6', param, %v__>, return__var__15, 'rab__',
               <l__0__15, l__1__15>, t__0__15
   ),
   !Const__( 'rab__nonce_a', nonce_a__15 ),
   !Const__( 'rab__nonce_b', nonce_b__15 ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__15 ),
   !ACP__( <'rab__Bob', param>, 'rab__udp', 'rab__send' )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____6', %v__ ) ]->
   [
   State__Bob( <'rab_____8__0_1', param, %v__>, 'rab__', 'rab__',
               <enc(<nonce_a__15, nonce_b__15>, pk(priv_key_alice__15)), 'rab__udp', 
                enc(<nonce_a__15, nonce_b__15>, pk(priv_key_alice__15)), l__0__15, 
                l__1__15>,
               t__0__15
   ),
   Out( enc(<nonce_a__15, nonce_b__15>, pk(priv_key_alice__15)) ),
   Store( 'rab__udp',
          enc(<nonce_a__15, nonce_b__15>, pk(priv_key_alice__15))
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____8__0_1_____11__0_0__64[role=Bob]:
   [
   State__Bob( <'rab_____8__0_1', param, %v__>, return__var__21, 'rab__',
               <l__0__21, l__1__21, l__2__21, l__3__21, l__4__21>, t__0__21
   ),
   !Const__( 'rab__nonce_b', nonce_b__22 )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____8__0_1', %v__ ),
  BobSendNonceB( nonce_b__22 )
  ]->
   [
   State__Bob( <'rab_____11__0_0', param, %v__>, 'rab__', 'rab__',
               <'rab__udp', 'rab__', l__2__21, l__3__21, l__4__21>, t__0__21
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____8__0_1_____11__1_0__63[role=Bob]:
   [
   State__Bob( <'rab_____8__0_1', param, %v__>, return__var__21, 'rab__',
               <l__0__21, l__1__21, l__2__21, l__3__21, l__4__21>, t__0__21
   ),
   !Const__( 'rab__nonce_b', nonce_b__22 )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____8__0_1', %v__ ),
  BobSendNonceB( nonce_b__22 )
  ]->
   [
   State__Bob( <'rab_____11__1_0', param, %v__>, 'rab__', 'rab__',
               <'rab__udp', 'rab__', l__2__21, l__3__21, l__4__21>, t__0__21
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____11__0_0_____13__58[role=Bob]:
   [
   State__Bob( <'rab_____11__0_0', param, %v__>, return__var__25, 'rab__',
               <l__0__25, l__1__25, l__2__25, l__3__25, l__4__25>, t__0__25
   ),
   Store( l__0__25, n__0__25 ),
   !ACP__( <'rab__Bob', param>, l__0__25, 'rab__recv' ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__34 )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____11__0_0', %v__ ) ]->
   [
   State__Bob( <'rab_____13', param, %v__>, 'rab__', 'rab__',
               <dec(n__0__25, priv_key_bob__34), n__0__25, l__2__25, l__3__25, l__4__25
               >,
               t__0__25
   )
   ]

  /*
  rule (modulo AC) Bob__merged_____11__0_0_____13__58[role=Bob]:
     [
     State__Bob( <'rab_____11__0_0', param, %v__>, return__var__25, 'rab__',
                 <l__0__25, l__1__25, l__2__25, l__3__25, l__4__25>, t__0__25
     ),
     Store( l__0__25, n__0__25 ),
     !ACP__( <'rab__Bob', param>, l__0__25, 'rab__recv' ),
     !Const__( 'rab__priv_key_bob', priv_key_bob__34 )
     ]
    --[ Transition__( <'rab__Bob', param>, 'rab_____11__0_0', %v__ ) ]->
     [
     State__Bob( <'rab_____13', param, %v__>, 'rab__', 'rab__',
                 <z, n__0__25, l__2__25, l__3__25, l__4__25>, t__0__25
     )
     ]
    variants (modulo AC)
    1. n__0__25
             = n__0__25.22
       priv_key_bob__34
             = priv_key_bob__34.24
       z     = dec(n__0__25.22, priv_key_bob__34.24)
    
    2. n__0__25
             = enc(z.40, priv_key_bob__34.30)
       priv_key_bob__34
             = priv_key_bob__34.30
       z     = z.40
  */

rule (modulo E) Bob__merged_____11__1_0_____13__54[role=Bob]:
   [
   State__Bob( <'rab_____11__1_0', param, %v__>, return__var__30, 'rab__',
               <l__0__30, l__1__30, l__2__30, l__3__30, l__4__30>, t__0__30
   ),
   Store( l__0__30, n__0__30 ), In( n__1__30 ),
   !ACP__( <'rab__Bob', param>, l__0__30, 'rab__recv' ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__34 )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____11__1_0', %v__ ) ]->
   [
   State__Bob( <'rab_____13', param, %v__>, 'rab__', 'rab__',
               <dec(n__1__30, priv_key_bob__34), n__1__30, l__2__30, l__3__30, l__4__30
               >,
               t__0__30
   )
   ]

  /*
  rule (modulo AC) Bob__merged_____11__1_0_____13__54[role=Bob]:
     [
     State__Bob( <'rab_____11__1_0', param, %v__>, return__var__30, 'rab__',
                 <l__0__30, l__1__30, l__2__30, l__3__30, l__4__30>, t__0__30
     ),
     Store( l__0__30, n__0__30 ), In( n__1__30 ),
     !ACP__( <'rab__Bob', param>, l__0__30, 'rab__recv' ),
     !Const__( 'rab__priv_key_bob', priv_key_bob__34 )
     ]
    --[ Transition__( <'rab__Bob', param>, 'rab_____11__1_0', %v__ ) ]->
     [
     State__Bob( <'rab_____13', param, %v__>, 'rab__', 'rab__',
                 <z, n__1__30, l__2__30, l__3__30, l__4__30>, t__0__30
     )
     ]
    variants (modulo AC)
    1. n__1__30
             = n__1__30.23
       priv_key_bob__34
             = priv_key_bob__34.25
       z     = dec(n__1__30.23, priv_key_bob__34.25)
    
    2. n__1__30
             = enc(z.41, priv_key_bob__34.31)
       priv_key_bob__34
             = priv_key_bob__34.31
       z     = z.41
  */

rule (modulo E) Bob__merged_____13_____13__0_1__50[role=Bob]:
   [
   State__Bob( <'rab_____13', param, %v__>, return__var__35, 'rab__',
               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35>, t__0__35
   ),
   BobSendNonceB( l__0__35 )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____13', %v__ ),
  SecretNonceBob( l__0__35 )
  ]->
   [
   State__Bob( <'rab_____13__0_1', param, %v__>, 'rab__', 'rab__',
               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35>, t__0__35
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____13__0_1_____20__49[role=Bob]:
   [
   State__Bob( <'rab_____13__0_1', param, %v__>, return__var__37, 'rab__',
               <l__0__37, l__1__37, l__2__37, l__3__37, l__4__37>, t__0__37
   )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____13__0_1', %v__ ), BobClose( )
  ]->
   [
   State__Bob( <'rab_____20', param, %v__>, 'rab__', 'rab__', 'rab__',
               t__0__37
   )
   ]

  /* has exactly the trivial AC variant */

restriction Init__:
  "∀ x #i #j. ((Init__( x ) @ #i) ∧ (Init__( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) Equality_gen:
   [ ] --> [ !Eq__( x, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) NEquality_gen:
   [ ] --[ NEq___( x, y ) ]-> [ !NEq__( x, y ) ]

  /* has exactly the trivial AC variant */

restriction NEquality_rule:
  "∀ x #i. (NEq___( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

lemma AlwaysStarts__ [reuse, use_induction]:
  all-traces
  "∀ x p #i.
    (Loop__Back( x, p ) @ #i) ⇒
    (∃ #j. (Loop__Start( x, p ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x p #i.
  (Loop__Back( x, p ) @ #i)
 ∧
  ∀ #j. (Loop__Start( x, p ) @ #j) ⇒ ¬(#j < #i)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (Loop__Start( x, p ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    by solve( Loop__Back( x, p ) @ #i )
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma AlwaysStartsWhenEnds__ [reuse, use_induction]:
  all-traces
  "∀ x p #i.
    (Loop__Finish( x, p ) @ #i) ⇒
    (∃ #j. (Loop__Start( x, p ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x p #i.
  (Loop__Finish( x, p ) @ #i)
 ∧
  ∀ #j. (Loop__Start( x, p ) @ #j) ⇒ ¬(#j < #i)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (Loop__Start( x, p ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    by solve( Loop__Finish( x, p ) @ #i )
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma TransitionOnce__ [reuse, use_induction]:
  all-traces
  "∀ x p %i #j #k.
    ((Transition__( x, p, %i ) @ #j) ∧ (Transition__( x, p, %i ) @ #k)) ⇒
    (#j = #k)"
/*
guarded formula characterizing all counter-examples:
"∃ x p %i #j #k.
  (Transition__( x, p, %i ) @ #j) ∧ (Transition__( x, p, %i ) @ #k)
 ∧
  ¬(#j = #k)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (#j < #k)  ∥ (#k < #j) )
    case case_1
    solve( Transition__( x, p, %i ) @ #j )
      case Alice__init_filesys_____0_____1__0
      solve( State__Alice( <'rab_____0', param, %i>, return__var__0, 'rab__',
                           'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_bob', priv_key_bob__0 ) ▶₁ #j )
          case Const__priv_key_bob
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
            case Alice__init_filesys_____0_____1__0
            solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                 'rab__', 'rab__', 'rab__'
                   ) ▶₀ #k )
              case Init__system
              by contradiction /* cyclic */
            qed
          next
            case Alice__merged_____0_____2__1_0__131
            by solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                    'rab__', 'rab__', 'rab__'
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Alice__merged_____0_____2__1_0__131
      solve( State__Alice( <'rab_____0', param, %i>, return__var__0, 'rab__',
                           'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_bob', priv_key_bob__0 ) ▶₁ #j )
          case Const__priv_key_bob
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
            case Alice__init_filesys_____0_____1__0
            by solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                    'rab__', 'rab__', 'rab__'
                      ) ▶₀ #k )
          next
            case Alice__merged_____0_____2__1_0__131
            solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                 'rab__', 'rab__', 'rab__'
                   ) ▶₀ #k )
              case Init__system
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____10__0_0_____14__96
      solve( State__Alice( <'rab_____10__0_0', param, %i>, return__var__34,
                           'rab__', <l__0__34, l__1__34, l__2__34, l__3__34, l__4__34>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____7__0_1_____10__0_0__102_case_1
        solve( Store( 'rab__udp', n__0__34 ) ▶₁ #j )
          case Alice__merged_____1_____7__0_1__129
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__0_0', %1
                     ) @ #k )
                case Alice__merged_____10__0_0_____14__96
                solve( State__Alice( <'rab_____10__0_0', 'rab__rab', %1>,
                                     return__var__34, 'rab__',
                                     <l__0__34, l__1__34, l__2__34, l__3__34.1, l__4__34>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__0_0__102
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_1
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__0_0', %1
                     ) @ #k )
                case Alice__merged_____10__0_0_____14__96
                solve( State__Alice( <'rab_____10__0_0', 'rab__rab', %1>,
                                     return__var__34, 'rab__',
                                     <l__0__34, l__1__34, l__2__34, l__3__34.1, l__4__34>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__0_0__102
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_2
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__0_0', %1
                     ) @ #k )
                case Alice__merged_____10__0_0_____14__96
                solve( State__Alice( <'rab_____10__0_0', 'rab__rab', %1>,
                                     return__var__34, 'rab__',
                                     <l__0__34, l__1__34, l__2__34, l__3__34.1, l__4__34>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__0_0__102
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      next
        case Alice__merged_____7__0_1_____10__0_0__102_case_2
        solve( Store( 'rab__udp', n__0__34 ) ▶₁ #j )
          case Alice__merged_____2__1_0_____7__0_1__120
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__0_0', %1
                     ) @ #k )
                case Alice__merged_____10__0_0_____14__96
                solve( State__Alice( <'rab_____10__0_0', 'rab__rab', %1>,
                                     return__var__34, 'rab__',
                                     <l__0__34, l__1__34, l__2__34, l__3__34.1, l__4__34>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__0_0__102
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_1
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__0_0', %1
                     ) @ #k )
                case Alice__merged_____10__0_0_____14__96
                solve( State__Alice( <'rab_____10__0_0', 'rab__rab', %1>,
                                     return__var__34, 'rab__',
                                     <l__0__34, l__1__34, l__2__34, l__3__34.1, l__4__34>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__0_0__102
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_2
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__0_0', %1
                     ) @ #k )
                case Alice__merged_____10__0_0_____14__96
                solve( State__Alice( <'rab_____10__0_0', 'rab__rab', %1>,
                                     return__var__34, 'rab__',
                                     <l__0__34, l__1__34, l__2__34, l__3__34.1, l__4__34>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__0_0__102
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____10__1_0_____14__92
      solve( State__Alice( <'rab_____10__1_0', param, %i>, return__var__39,
                           'rab__', <l__0__39, l__1__39, l__2__39, l__3__39, l__4__39>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____7__0_1_____10__1_0__101_case_1
        solve( Store( 'rab__udp', n__0__39 ) ▶₁ #j )
          case Alice__merged_____1_____7__0_1__129
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__1_0', %1
                     ) @ #k )
                case Alice__merged_____10__1_0_____14__92
                solve( State__Alice( <'rab_____10__1_0', 'rab__rab', %1>,
                                     return__var__39, 'rab__',
                                     <l__0__39, l__1__39, l__2__39, l__3__39.1, l__4__39>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__1_0__101
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_1
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__1_0', %1
                     ) @ #k )
                case Alice__merged_____10__1_0_____14__92
                solve( State__Alice( <'rab_____10__1_0', 'rab__rab', %1>,
                                     return__var__39, 'rab__',
                                     <l__0__39, l__1__39, l__2__39, l__3__39.1, l__4__39>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__1_0__101
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_2
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__1_0', %1
                     ) @ #k )
                case Alice__merged_____10__1_0_____14__92
                solve( State__Alice( <'rab_____10__1_0', 'rab__rab', %1>,
                                     return__var__39, 'rab__',
                                     <l__0__39, l__1__39, l__2__39, l__3__39.1, l__4__39>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__1_0__101
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      next
        case Alice__merged_____7__0_1_____10__1_0__101_case_2
        solve( Store( 'rab__udp', n__0__39 ) ▶₁ #j )
          case Alice__merged_____2__1_0_____7__0_1__120
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__1_0', %1
                     ) @ #k )
                case Alice__merged_____10__1_0_____14__92
                solve( State__Alice( <'rab_____10__1_0', 'rab__rab', %1>,
                                     return__var__39, 'rab__',
                                     <l__0__39, l__1__39, l__2__39, l__3__39.1, l__4__39>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__1_0__101
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_1
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__1_0', %1
                     ) @ #k )
                case Alice__merged_____10__1_0_____14__92
                solve( State__Alice( <'rab_____10__1_0', 'rab__rab', %1>,
                                     return__var__39, 'rab__',
                                     <l__0__39, l__1__39, l__2__39, l__3__39.1, l__4__39>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__1_0__101
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_2
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__1_0', %1
                     ) @ #k )
                case Alice__merged_____10__1_0_____14__92
                solve( State__Alice( <'rab_____10__1_0', 'rab__rab', %1>,
                                     return__var__39, 'rab__',
                                     <l__0__39, l__1__39, l__2__39, l__3__39.1, l__4__39>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__1_0__101
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____14__0_1_____14__0_3__0_1__85
      by solve( State__Alice( <'rab_____14__0_1', param, %i>, return__var__48,
                              'rab__',
                              <l__0__48, l__1__48, l__2__48, l__3__48, l__4__48, l__5__48, l__6__48>,
                              'rab__'
                ) ▶₀ #j )
    next
      case Alice__merged_____14__0_3__0_1_____24__80
      by solve( State__Alice( <'rab_____14__0_3__0_1', param, %i>,
                              return__var__54, 'rab__',
                              <l__0__54, l__1__54, l__2__54, l__3__54, l__4__54, l__5__54, l__6__54, 
                               l__7__54, l__8__54, l__9__54>,
                              'rab__'
                ) ▶₀ #j )
    next
      case Alice__merged_____14_____14__0_1__86
      by solve( AliceSendNonceA( nonce_a__46 ) ▶₁ #j )
    next
      case Alice__merged_____1_____7__0_1__129
      solve( State__Alice( <'rab_____1', param, %i>, return__var__1, 'rab__',
                           'rab__', 'rab__'
             ) ▶₀ #j )
        case Alice__init_filesys_____0_____1__0
        solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab____secret__pub_bob',
                       'rab__fopen'
               ) ▶₂ #j )
          case Alice__init_filesys_____0_____1__0
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab____secret__pub_bob',
                         'rab__fopen'
                 ) ▶₃ #j )
            case Alice__init_filesys_____0_____1__0
            solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__send'
                   ) ▶₄ #j )
              case Init__system__ACP__3
              solve( !Const__( 'rab__nonce_a', nonce_a__24 ) ▶₅ #j )
                case Const__nonce_a
                solve( !Eq__( n__0__3, n__0__20 ) ▶₆ #j )
                  case Equality_gen
                  solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____1', %1 ) @ #k )
                    case Alice__merged_____1_____7__0_1__129
                    solve( State__Alice( <'rab_____1', 'rab__rab', %1>, return__var__1,
                                         'rab__', 'rab__', 'rab__'
                           ) ▶₀ #k )
                      case Alice__init_filesys_____0_____1__0
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____2__1_0_____7__0_1__120
      solve( State__Alice( <'rab_____2__1_0', param, %i>, return__var__11,
                           'rab__', <l__0__11, l__1__11>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____0_____2__1_0__131
        solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab____secret__pub_bob',
                       'rab__fopen'
               ) ▶₃ #j )
          case Alice__merged_____0_____2__1_0__131
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab____secret__pub_bob',
                         'rab__fopen'
                 ) ▶₄ #j )
            case Alice__merged_____0_____2__1_0__131
            solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__send'
                   ) ▶₅ #j )
              case Init__system__ACP__3
              solve( !Const__( 'rab__nonce_a', nonce_a__24 ) ▶₆ #j )
                case Const__nonce_a
                solve( !Eq__( n__1__11, n__0__20 ) ▶₇ #j )
                  case Equality_gen
                  solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____2__1_0', %1
                         ) @ #k )
                    case Alice__merged_____2__1_0_____7__0_1__120
                    solve( State__Alice( <'rab_____2__1_0', 'rab__rab', %1>, return__var__11,
                                         'rab__', <l__0__11, l__1__11>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____0_____2__1_0__131
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____7__0_1_____10__0_0__102
      solve( State__Alice( <'rab_____7__0_1', param, %i>, return__var__30,
                           'rab__', <l__0__30, l__1__30, l__2__30, l__3__30, l__4__30>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____1_____7__0_1__129
        solve( !Const__( 'rab__nonce_a', nonce_a__31 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_1', %1
                 ) @ #k )
            case Alice__merged_____7__0_1_____10__0_0__102
            solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>, return__var__30,
                                 'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____1_____7__0_1__129
              by contradiction /* cyclic */
            qed
          next
            case Alice__merged_____7__0_1_____10__1_0__101
            by solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>,
                                    return__var__30, 'rab__',
                                    <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                      ) ▶₀ #k )
          qed
        qed
      next
        case Alice__merged_____2__1_0_____7__0_1__120
        solve( !Const__( 'rab__nonce_a', nonce_a__31 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_1', %1
                 ) @ #k )
            case Alice__merged_____7__0_1_____10__0_0__102
            solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>, return__var__30,
                                 'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____2__1_0_____7__0_1__120
              by contradiction /* cyclic */
            qed
          next
            case Alice__merged_____7__0_1_____10__1_0__101
            by solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>,
                                    return__var__30, 'rab__',
                                    <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Alice__merged_____7__0_1_____10__1_0__101
      solve( State__Alice( <'rab_____7__0_1', param, %i>, return__var__30,
                           'rab__', <l__0__30, l__1__30, l__2__30, l__3__30, l__4__30>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____1_____7__0_1__129
        solve( !Const__( 'rab__nonce_a', nonce_a__31 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_1', %1
                 ) @ #k )
            case Alice__merged_____7__0_1_____10__0_0__102
            by solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>,
                                    return__var__30, 'rab__',
                                    <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                      ) ▶₀ #k )
          next
            case Alice__merged_____7__0_1_____10__1_0__101
            solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>, return__var__30,
                                 'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____1_____7__0_1__129
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case Alice__merged_____2__1_0_____7__0_1__120
        solve( !Const__( 'rab__nonce_a', nonce_a__31 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_1', %1
                 ) @ #k )
            case Alice__merged_____7__0_1_____10__0_0__102
            by solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>,
                                    return__var__30, 'rab__',
                                    <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                      ) ▶₀ #k )
          next
            case Alice__merged_____7__0_1_____10__1_0__101
            solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>, return__var__30,
                                 'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____2__1_0_____7__0_1__120
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____0_____3__0_0__84
      solve( State__Bob( <'rab_____0', param, %i>, return__var__0, 'rab__',
                         'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_alice', priv_key_alice__0 ) ▶₁ #j )
          case Const__priv_key_alice
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
            case Bob__merged_____0_____3__0_0__84
            solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                               'rab__', 'rab__', 'rab__'
                   ) ▶₀ #k )
              case Init__system
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____0_____3__1_0__83
            by solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                  'rab__', 'rab__', 'rab__'
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Bob__merged_____0_____3__1_0__83
      solve( State__Bob( <'rab_____0', param, %i>, return__var__0, 'rab__',
                         'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_alice', priv_key_alice__0 ) ▶₁ #j )
          case Const__priv_key_alice
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
            case Bob__merged_____0_____3__0_0__84
            by solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                  'rab__', 'rab__', 'rab__'
                      ) ▶₀ #k )
          next
            case Bob__merged_____0_____3__1_0__83
            solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                               'rab__', 'rab__', 'rab__'
                   ) ▶₀ #k )
              case Init__system
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____11__0_0_____13__58
      solve( State__Bob( <'rab_____11__0_0', param, %i>, return__var__25,
                         'rab__', <l__0__25, l__1__25, l__2__25, l__3__25, l__4__25>, t__0__25
             ) ▶₀ #j )
        case Bob__merged_____8__0_1_____11__0_0__64_case_1
        solve( Store( 'rab__udp', n__0__25 ) ▶₁ #j )
          case Alice__merged_____1_____7__0_1__129
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_0', %1
                     ) @ #k )
                case Bob__merged_____11__0_0_____13__58
                solve( State__Bob( <'rab_____11__0_0', 'rab__rab', %1>, return__var__25,
                                   'rab__', <l__0__25, l__1__25, l__2__25, l__3__25.1, l__4__25.1>, t__0__25
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__0_0__64
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____2__1_0_____7__0_1__120
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_0', %1
                     ) @ #k )
                case Bob__merged_____11__0_0_____13__58
                solve( State__Bob( <'rab_____11__0_0', 'rab__rab', %1>, return__var__25,
                                   'rab__', <l__0__25, l__1__25, l__2__25, l__3__25.1, l__4__25.1>, t__0__25
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__0_0__64
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_0', %1
                     ) @ #k )
                case Bob__merged_____11__0_0_____13__58
                solve( State__Bob( <'rab_____11__0_0', 'rab__rab', %1>, return__var__25,
                                   'rab__', <l__0__25, l__1__25, l__2__25, l__3__25.1, l__4__25.1>, t__0__25
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__0_0__64
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      next
        case Bob__merged_____8__0_1_____11__0_0__64_case_2
        solve( Store( 'rab__udp', n__0__25 ) ▶₁ #j )
          case Alice__merged_____1_____7__0_1__129
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_0', %1
                     ) @ #k )
                case Bob__merged_____11__0_0_____13__58
                solve( State__Bob( <'rab_____11__0_0', 'rab__rab', %1>, return__var__25,
                                   'rab__', <l__0__25, l__1__25, l__2__25, l__3__25.1, l__4__25.1>, t__0__25
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__0_0__64
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____2__1_0_____7__0_1__120
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_0', %1
                     ) @ #k )
                case Bob__merged_____11__0_0_____13__58
                solve( State__Bob( <'rab_____11__0_0', 'rab__rab', %1>, return__var__25,
                                   'rab__', <l__0__25, l__1__25, l__2__25, l__3__25.1, l__4__25.1>, t__0__25
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__0_0__64
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_0', %1
                     ) @ #k )
                case Bob__merged_____11__0_0_____13__58
                solve( State__Bob( <'rab_____11__0_0', 'rab__rab', %1>, return__var__25,
                                   'rab__', <l__0__25, l__1__25, l__2__25, l__3__25.1, l__4__25.1>, t__0__25
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__0_0__64
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____11__1_0_____13__54
      solve( State__Bob( <'rab_____11__1_0', param, %i>, return__var__30,
                         'rab__', <l__0__30, l__1__30, l__2__30, l__3__30, l__4__30>, t__0__30
             ) ▶₀ #j )
        case Bob__merged_____8__0_1_____11__1_0__63_case_1
        solve( Store( 'rab__udp', n__0__30 ) ▶₁ #j )
          case Alice__merged_____1_____7__0_1__129
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__1_0', %1
                     ) @ #k )
                case Bob__merged_____11__1_0_____13__54
                solve( State__Bob( <'rab_____11__1_0', 'rab__rab', %1>, return__var__30,
                                   'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30.1>, t__0__30
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__1_0__63
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____2__1_0_____7__0_1__120
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__1_0', %1
                     ) @ #k )
                case Bob__merged_____11__1_0_____13__54
                solve( State__Bob( <'rab_____11__1_0', 'rab__rab', %1>, return__var__30,
                                   'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30.1>, t__0__30
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__1_0__63
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__1_0', %1
                     ) @ #k )
                case Bob__merged_____11__1_0_____13__54
                solve( State__Bob( <'rab_____11__1_0', 'rab__rab', %1>, return__var__30,
                                   'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30.1>, t__0__30
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__1_0__63
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      next
        case Bob__merged_____8__0_1_____11__1_0__63_case_2
        solve( Store( 'rab__udp', n__0__30 ) ▶₁ #j )
          case Alice__merged_____1_____7__0_1__129
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__1_0', %1
                     ) @ #k )
                case Bob__merged_____11__1_0_____13__54
                solve( State__Bob( <'rab_____11__1_0', 'rab__rab', %1>, return__var__30,
                                   'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30.1>, t__0__30
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__1_0__63
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____2__1_0_____7__0_1__120
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__1_0', %1
                     ) @ #k )
                case Bob__merged_____11__1_0_____13__54
                solve( State__Bob( <'rab_____11__1_0', 'rab__rab', %1>, return__var__30,
                                   'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30.1>, t__0__30
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__1_0__63
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__1_0', %1
                     ) @ #k )
                case Bob__merged_____11__1_0_____13__54
                solve( State__Bob( <'rab_____11__1_0', 'rab__rab', %1>, return__var__30,
                                   'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30.1>, t__0__30
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__1_0__63
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____13__0_1_____20__49
      by solve( State__Bob( <'rab_____13__0_1', param, %i>, return__var__37,
                            'rab__', <l__0__37, l__1__37, l__2__37, l__3__37, l__4__37>, t__0__37
                ) ▶₀ #j )
    next
      case Bob__merged_____13_____13__0_1__50
      solve( State__Bob( <'rab_____13', param, %i>, return__var__35, 'rab__',
                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35>, t__0__35
             ) ▶₀ #j )
        case Bob__merged_____11__0_0_____13__58_case_1
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__0_0_____13__58_case_2
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__0_0_____13__58_case_3
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__0_0_____13__58_case_4
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__0_0_____13__58_case_5
        by solve( BobSendNonceB( dec(enc(<~n, ~n.1>, pk(~n.2)), ~n.3) ) ▶₁ #j )
      next
        case Bob__merged_____11__0_0_____13__58_case_6
        by solve( BobSendNonceB( dec(enc(<~n, ~n.1>, pk(~n.2)), ~n.3) ) ▶₁ #j )
      next
        case Bob__merged_____11__1_0_____13__54_case_1
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__1_0_____13__54_case_2
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__1_0_____13__54_case_3
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__1_0_____13__54_case_4
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__1_0_____13__54_case_5
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__1_0_____13__54_case_6
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      qed
    next
      case Bob__merged_____3__0_0_____6__78
      solve( State__Bob( <'rab_____3__0_0', param, %i>, return__var__4,
                         'rab__', <l__0__4, l__1__4>, t__0__4
             ) ▶₀ #j )
        case Bob__merged_____0_____3__0_0__84
        solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
               ) ▶₂ #j )
          case Init__system__ACP__0
          solve( !Const__( 'rab__priv_key_bob', priv_key_bob__13 ) ▶₃ #j )
            case Const__priv_key_bob
            solve( !Const__( 'rab__nonce_a', nonce_a__14 ) ▶₄ #j )
              case Const__nonce_a
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____3__0_0', %1
                     ) @ #k )
                case Bob__merged_____3__0_0_____6__78
                solve( State__Bob( <'rab_____3__0_0', 'rab__rab', %1>, return__var__4,
                                   'rab__', <l__0__4, l__1__4>, t__0__4
                       ) ▶₀ #k )
                  case Bob__merged_____0_____3__0_0__84
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____3__1_0_____6__74
      solve( State__Bob( <'rab_____3__1_0', param, %i>, return__var__9,
                         'rab__', <l__0__9, l__1__9>, t__0__9
             ) ▶₀ #j )
        case Bob__merged_____0_____3__1_0__83
        solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
               ) ▶₃ #j )
          case Init__system__ACP__0
          solve( !Const__( 'rab__priv_key_bob', priv_key_bob__13 ) ▶₄ #j )
            case Const__priv_key_bob
            solve( !Const__( 'rab__nonce_a', nonce_a__14 ) ▶₅ #j )
              case Const__nonce_a
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____3__1_0', %1
                     ) @ #k )
                case Bob__merged_____3__1_0_____6__74
                solve( State__Bob( <'rab_____3__1_0', 'rab__rab', %1>, return__var__9,
                                   'rab__', <l__0__9, l__1__9>, t__0__9
                       ) ▶₀ #k )
                  case Bob__merged_____0_____3__1_0__83
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____6_____8__0_1__69
      solve( State__Bob( <'rab_____6', param, %i>, return__var__15, 'rab__',
                         <l__0__15, l__1__15>, t__0__15
             ) ▶₀ #j )
        case Bob__merged_____3__0_0_____6__78
        solve( !Const__( 'rab__nonce_a', nonce_a__15 ) ▶₁ #j )
          case Const__nonce_a
          solve( !Const__( 'rab__nonce_b', nonce_b__15 ) ▶₂ #j )
            case Const__nonce_b
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__15 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__send'
                     ) ▶₄ #j )
                case Init__system__ACP__1
                solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____6', %1 ) @ #k )
                  case Bob__merged_____6_____8__0_1__69
                  solve( State__Bob( <'rab_____6', 'rab__rab', %1>, return__var__15,
                                     'rab__', <l__0__15.1, l__1__15.1>, t__0__15
                         ) ▶₀ #k )
                    case Bob__merged_____3__0_0_____6__78
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Bob__merged_____3__1_0_____6__74
        solve( !Const__( 'rab__nonce_a', nonce_a__15 ) ▶₁ #j )
          case Const__nonce_a
          solve( !Const__( 'rab__nonce_b', nonce_b__15 ) ▶₂ #j )
            case Const__nonce_b
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__15 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__send'
                     ) ▶₄ #j )
                case Init__system__ACP__1
                solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____6', %1 ) @ #k )
                  case Bob__merged_____6_____8__0_1__69
                  solve( State__Bob( <'rab_____6', 'rab__rab', %1>, return__var__15,
                                     'rab__', <l__0__15.1, l__1__15.1>, t__0__15
                         ) ▶₀ #k )
                    case Bob__merged_____3__1_0_____6__74
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____8__0_1_____11__0_0__64
      solve( State__Bob( <'rab_____8__0_1', param, %i>, return__var__21,
                         'rab__', <l__0__21, l__1__21, l__2__21, l__3__21, l__4__21>, t__0__21
             ) ▶₀ #j )
        case Bob__merged_____6_____8__0_1__69_case_1
        solve( !Const__( 'rab__nonce_b', nonce_b__22 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____8__0_1', %1
                 ) @ #k )
            case Bob__merged_____8__0_1_____11__0_0__64
            solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>, return__var__21,
                               'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                   ) ▶₀ #k )
              case Bob__merged_____6_____8__0_1__69
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____8__0_1_____11__1_0__63
            by solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>,
                                  return__var__21, 'rab__',
                                  <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                      ) ▶₀ #k )
          qed
        qed
      next
        case Bob__merged_____6_____8__0_1__69_case_2
        solve( !Const__( 'rab__nonce_b', nonce_b__22 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____8__0_1', %1
                 ) @ #k )
            case Bob__merged_____8__0_1_____11__0_0__64
            solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>, return__var__21,
                               'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                   ) ▶₀ #k )
              case Bob__merged_____6_____8__0_1__69
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____8__0_1_____11__1_0__63
            by solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>,
                                  return__var__21, 'rab__',
                                  <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Bob__merged_____8__0_1_____11__1_0__63
      solve( State__Bob( <'rab_____8__0_1', param, %i>, return__var__21,
                         'rab__', <l__0__21, l__1__21, l__2__21, l__3__21, l__4__21>, t__0__21
             ) ▶₀ #j )
        case Bob__merged_____6_____8__0_1__69_case_1
        solve( !Const__( 'rab__nonce_b', nonce_b__22 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____8__0_1', %1
                 ) @ #k )
            case Bob__merged_____8__0_1_____11__0_0__64
            by solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>,
                                  return__var__21, 'rab__',
                                  <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                      ) ▶₀ #k )
          next
            case Bob__merged_____8__0_1_____11__1_0__63
            solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>, return__var__21,
                               'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                   ) ▶₀ #k )
              case Bob__merged_____6_____8__0_1__69
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case Bob__merged_____6_____8__0_1__69_case_2
        solve( !Const__( 'rab__nonce_b', nonce_b__22 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____8__0_1', %1
                 ) @ #k )
            case Bob__merged_____8__0_1_____11__0_0__64
            by solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>,
                                  return__var__21, 'rab__',
                                  <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                      ) ▶₀ #k )
          next
            case Bob__merged_____8__0_1_____11__1_0__63
            solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>, return__var__21,
                               'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                   ) ▶₀ #k )
              case Bob__merged_____6_____8__0_1__69
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Transition__( x, p, %i ) @ #j )
      case Alice__init_filesys_____0_____1__0
      solve( State__Alice( <'rab_____0', param, %i>, return__var__0, 'rab__',
                           'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_bob', priv_key_bob__0 ) ▶₁ #j )
          case Const__priv_key_bob
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
            case Alice__init_filesys_____0_____1__0
            solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                 'rab__', 'rab__', 'rab__'
                   ) ▶₀ #k )
              case Init__system
              by contradiction /* cyclic */
            qed
          next
            case Alice__merged_____0_____2__1_0__131
            by solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                    'rab__', 'rab__', 'rab__'
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Alice__merged_____0_____2__1_0__131
      solve( State__Alice( <'rab_____0', param, %i>, return__var__0, 'rab__',
                           'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_bob', priv_key_bob__0 ) ▶₁ #j )
          case Const__priv_key_bob
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
            case Alice__init_filesys_____0_____1__0
            by solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                    'rab__', 'rab__', 'rab__'
                      ) ▶₀ #k )
          next
            case Alice__merged_____0_____2__1_0__131
            solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                 'rab__', 'rab__', 'rab__'
                   ) ▶₀ #k )
              case Init__system
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____10__0_0_____14__96
      solve( State__Alice( <'rab_____10__0_0', param, %i>, return__var__34,
                           'rab__', <l__0__34, l__1__34, l__2__34, l__3__34, l__4__34>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____7__0_1_____10__0_0__102_case_1
        solve( Store( 'rab__udp', n__0__34 ) ▶₁ #j )
          case Alice__merged_____1_____7__0_1__129
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__0_0', %1
                     ) @ #k )
                case Alice__merged_____10__0_0_____14__96
                solve( State__Alice( <'rab_____10__0_0', 'rab__rab', %1>,
                                     return__var__34, 'rab__',
                                     <l__0__34, l__1__34, l__2__34, l__3__34.1, l__4__34>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__0_0__102
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_1
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__0_0', %1
                     ) @ #k )
                case Alice__merged_____10__0_0_____14__96
                solve( State__Alice( <'rab_____10__0_0', 'rab__rab', %1>,
                                     return__var__34, 'rab__',
                                     <l__0__34, l__1__34, l__2__34, l__3__34.1, l__4__34>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__0_0__102
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_2
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__0_0', %1
                     ) @ #k )
                case Alice__merged_____10__0_0_____14__96
                solve( State__Alice( <'rab_____10__0_0', 'rab__rab', %1>,
                                     return__var__34, 'rab__',
                                     <l__0__34, l__1__34, l__2__34, l__3__34.1, l__4__34>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__0_0__102
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      next
        case Alice__merged_____7__0_1_____10__0_0__102_case_2
        solve( Store( 'rab__udp', n__0__34 ) ▶₁ #j )
          case Alice__merged_____2__1_0_____7__0_1__120
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__0_0', %1
                     ) @ #k )
                case Alice__merged_____10__0_0_____14__96
                solve( State__Alice( <'rab_____10__0_0', 'rab__rab', %1>,
                                     return__var__34, 'rab__',
                                     <l__0__34, l__1__34, l__2__34, l__3__34.1, l__4__34>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__0_0__102
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_1
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__0_0', %1
                     ) @ #k )
                case Alice__merged_____10__0_0_____14__96
                solve( State__Alice( <'rab_____10__0_0', 'rab__rab', %1>,
                                     return__var__34, 'rab__',
                                     <l__0__34, l__1__34, l__2__34, l__3__34.1, l__4__34>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__0_0__102
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_2
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__0_0', %1
                     ) @ #k )
                case Alice__merged_____10__0_0_____14__96
                solve( State__Alice( <'rab_____10__0_0', 'rab__rab', %1>,
                                     return__var__34, 'rab__',
                                     <l__0__34, l__1__34, l__2__34, l__3__34.1, l__4__34>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__0_0__102
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____10__1_0_____14__92
      solve( State__Alice( <'rab_____10__1_0', param, %i>, return__var__39,
                           'rab__', <l__0__39, l__1__39, l__2__39, l__3__39, l__4__39>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____7__0_1_____10__1_0__101_case_1
        solve( Store( 'rab__udp', n__0__39 ) ▶₁ #j )
          case Alice__merged_____1_____7__0_1__129
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__1_0', %1
                     ) @ #k )
                case Alice__merged_____10__1_0_____14__92
                solve( State__Alice( <'rab_____10__1_0', 'rab__rab', %1>,
                                     return__var__39, 'rab__',
                                     <l__0__39, l__1__39, l__2__39, l__3__39.1, l__4__39>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__1_0__101
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_1
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__1_0', %1
                     ) @ #k )
                case Alice__merged_____10__1_0_____14__92
                solve( State__Alice( <'rab_____10__1_0', 'rab__rab', %1>,
                                     return__var__39, 'rab__',
                                     <l__0__39, l__1__39, l__2__39, l__3__39.1, l__4__39>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__1_0__101
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_2
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__1_0', %1
                     ) @ #k )
                case Alice__merged_____10__1_0_____14__92
                solve( State__Alice( <'rab_____10__1_0', 'rab__rab', %1>,
                                     return__var__39, 'rab__',
                                     <l__0__39, l__1__39, l__2__39, l__3__39.1, l__4__39>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__1_0__101
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      next
        case Alice__merged_____7__0_1_____10__1_0__101_case_2
        solve( Store( 'rab__udp', n__0__39 ) ▶₁ #j )
          case Alice__merged_____2__1_0_____7__0_1__120
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__1_0', %1
                     ) @ #k )
                case Alice__merged_____10__1_0_____14__92
                solve( State__Alice( <'rab_____10__1_0', 'rab__rab', %1>,
                                     return__var__39, 'rab__',
                                     <l__0__39, l__1__39, l__2__39, l__3__39.1, l__4__39>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__1_0__101
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_1
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__1_0', %1
                     ) @ #k )
                case Alice__merged_____10__1_0_____14__92
                solve( State__Alice( <'rab_____10__1_0', 'rab__rab', %1>,
                                     return__var__39, 'rab__',
                                     <l__0__39, l__1__39, l__2__39, l__3__39.1, l__4__39>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__1_0__101
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69_case_2
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__43 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____10__1_0', %1
                     ) @ #k )
                case Alice__merged_____10__1_0_____14__92
                solve( State__Alice( <'rab_____10__1_0', 'rab__rab', %1>,
                                     return__var__39, 'rab__',
                                     <l__0__39, l__1__39, l__2__39, l__3__39.1, l__4__39>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_1_____10__1_0__101
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____14__0_1_____14__0_3__0_1__85
      by solve( State__Alice( <'rab_____14__0_1', param, %i>, return__var__48,
                              'rab__',
                              <l__0__48, l__1__48, l__2__48, l__3__48, l__4__48, l__5__48, l__6__48>,
                              'rab__'
                ) ▶₀ #j )
    next
      case Alice__merged_____14__0_3__0_1_____24__80
      by solve( State__Alice( <'rab_____14__0_3__0_1', param, %i>,
                              return__var__54, 'rab__',
                              <l__0__54, l__1__54, l__2__54, l__3__54, l__4__54, l__5__54, l__6__54, 
                               l__7__54, l__8__54, l__9__54>,
                              'rab__'
                ) ▶₀ #j )
    next
      case Alice__merged_____14_____14__0_1__86
      by solve( AliceSendNonceA( nonce_a__46 ) ▶₁ #j )
    next
      case Alice__merged_____1_____7__0_1__129
      solve( State__Alice( <'rab_____1', param, %i>, return__var__1, 'rab__',
                           'rab__', 'rab__'
             ) ▶₀ #j )
        case Alice__init_filesys_____0_____1__0
        solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab____secret__pub_bob',
                       'rab__fopen'
               ) ▶₂ #j )
          case Alice__init_filesys_____0_____1__0
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab____secret__pub_bob',
                         'rab__fopen'
                 ) ▶₃ #j )
            case Alice__init_filesys_____0_____1__0
            solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__send'
                   ) ▶₄ #j )
              case Init__system__ACP__3
              solve( !Const__( 'rab__nonce_a', nonce_a__24 ) ▶₅ #j )
                case Const__nonce_a
                solve( !Eq__( n__0__3, n__0__20 ) ▶₆ #j )
                  case Equality_gen
                  solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____1', %1 ) @ #k )
                    case Alice__merged_____1_____7__0_1__129
                    solve( State__Alice( <'rab_____1', 'rab__rab', %1>, return__var__1,
                                         'rab__', 'rab__', 'rab__'
                           ) ▶₀ #k )
                      case Alice__init_filesys_____0_____1__0
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____2__1_0_____7__0_1__120
      solve( State__Alice( <'rab_____2__1_0', param, %i>, return__var__11,
                           'rab__', <l__0__11, l__1__11>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____0_____2__1_0__131
        solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab____secret__pub_bob',
                       'rab__fopen'
               ) ▶₃ #j )
          case Alice__merged_____0_____2__1_0__131
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab____secret__pub_bob',
                         'rab__fopen'
                 ) ▶₄ #j )
            case Alice__merged_____0_____2__1_0__131
            solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__send'
                   ) ▶₅ #j )
              case Init__system__ACP__3
              solve( !Const__( 'rab__nonce_a', nonce_a__24 ) ▶₆ #j )
                case Const__nonce_a
                solve( !Eq__( n__1__11, n__0__20 ) ▶₇ #j )
                  case Equality_gen
                  solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____2__1_0', %1
                         ) @ #k )
                    case Alice__merged_____2__1_0_____7__0_1__120
                    solve( State__Alice( <'rab_____2__1_0', 'rab__rab', %1>, return__var__11,
                                         'rab__', <l__0__11, l__1__11>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____0_____2__1_0__131
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____7__0_1_____10__0_0__102
      solve( State__Alice( <'rab_____7__0_1', param, %i>, return__var__30,
                           'rab__', <l__0__30, l__1__30, l__2__30, l__3__30, l__4__30>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____1_____7__0_1__129
        solve( !Const__( 'rab__nonce_a', nonce_a__31 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_1', %1
                 ) @ #k )
            case Alice__merged_____7__0_1_____10__0_0__102
            solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>, return__var__30,
                                 'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____1_____7__0_1__129
              by contradiction /* cyclic */
            qed
          next
            case Alice__merged_____7__0_1_____10__1_0__101
            by solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>,
                                    return__var__30, 'rab__',
                                    <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                      ) ▶₀ #k )
          qed
        qed
      next
        case Alice__merged_____2__1_0_____7__0_1__120
        solve( !Const__( 'rab__nonce_a', nonce_a__31 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_1', %1
                 ) @ #k )
            case Alice__merged_____7__0_1_____10__0_0__102
            solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>, return__var__30,
                                 'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____2__1_0_____7__0_1__120
              by contradiction /* cyclic */
            qed
          next
            case Alice__merged_____7__0_1_____10__1_0__101
            by solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>,
                                    return__var__30, 'rab__',
                                    <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Alice__merged_____7__0_1_____10__1_0__101
      solve( State__Alice( <'rab_____7__0_1', param, %i>, return__var__30,
                           'rab__', <l__0__30, l__1__30, l__2__30, l__3__30, l__4__30>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____1_____7__0_1__129
        solve( !Const__( 'rab__nonce_a', nonce_a__31 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_1', %1
                 ) @ #k )
            case Alice__merged_____7__0_1_____10__0_0__102
            by solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>,
                                    return__var__30, 'rab__',
                                    <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                      ) ▶₀ #k )
          next
            case Alice__merged_____7__0_1_____10__1_0__101
            solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>, return__var__30,
                                 'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____1_____7__0_1__129
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case Alice__merged_____2__1_0_____7__0_1__120
        solve( !Const__( 'rab__nonce_a', nonce_a__31 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_1', %1
                 ) @ #k )
            case Alice__merged_____7__0_1_____10__0_0__102
            by solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>,
                                    return__var__30, 'rab__',
                                    <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                      ) ▶₀ #k )
          next
            case Alice__merged_____7__0_1_____10__1_0__101
            solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>, return__var__30,
                                 'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____2__1_0_____7__0_1__120
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____0_____3__0_0__84
      solve( State__Bob( <'rab_____0', param, %i>, return__var__0, 'rab__',
                         'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_alice', priv_key_alice__0 ) ▶₁ #j )
          case Const__priv_key_alice
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
            case Bob__merged_____0_____3__0_0__84
            solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                               'rab__', 'rab__', 'rab__'
                   ) ▶₀ #k )
              case Init__system
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____0_____3__1_0__83
            by solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                  'rab__', 'rab__', 'rab__'
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Bob__merged_____0_____3__1_0__83
      solve( State__Bob( <'rab_____0', param, %i>, return__var__0, 'rab__',
                         'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_alice', priv_key_alice__0 ) ▶₁ #j )
          case Const__priv_key_alice
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
            case Bob__merged_____0_____3__0_0__84
            by solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                  'rab__', 'rab__', 'rab__'
                      ) ▶₀ #k )
          next
            case Bob__merged_____0_____3__1_0__83
            solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                               'rab__', 'rab__', 'rab__'
                   ) ▶₀ #k )
              case Init__system
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____11__0_0_____13__58
      solve( State__Bob( <'rab_____11__0_0', param, %i>, return__var__25,
                         'rab__', <l__0__25, l__1__25, l__2__25, l__3__25, l__4__25>, t__0__25
             ) ▶₀ #j )
        case Bob__merged_____8__0_1_____11__0_0__64_case_1
        solve( Store( 'rab__udp', n__0__25 ) ▶₁ #j )
          case Alice__merged_____1_____7__0_1__129
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_0', %1
                     ) @ #k )
                case Bob__merged_____11__0_0_____13__58
                solve( State__Bob( <'rab_____11__0_0', 'rab__rab', %1>, return__var__25,
                                   'rab__', <l__0__25, l__1__25, l__2__25, l__3__25.1, l__4__25.1>, t__0__25
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__0_0__64
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____2__1_0_____7__0_1__120
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_0', %1
                     ) @ #k )
                case Bob__merged_____11__0_0_____13__58
                solve( State__Bob( <'rab_____11__0_0', 'rab__rab', %1>, return__var__25,
                                   'rab__', <l__0__25, l__1__25, l__2__25, l__3__25.1, l__4__25.1>, t__0__25
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__0_0__64
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_0', %1
                     ) @ #k )
                case Bob__merged_____11__0_0_____13__58
                solve( State__Bob( <'rab_____11__0_0', 'rab__rab', %1>, return__var__25,
                                   'rab__', <l__0__25, l__1__25, l__2__25, l__3__25.1, l__4__25.1>, t__0__25
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__0_0__64
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      next
        case Bob__merged_____8__0_1_____11__0_0__64_case_2
        solve( Store( 'rab__udp', n__0__25 ) ▶₁ #j )
          case Alice__merged_____1_____7__0_1__129
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_0', %1
                     ) @ #k )
                case Bob__merged_____11__0_0_____13__58
                solve( State__Bob( <'rab_____11__0_0', 'rab__rab', %1>, return__var__25,
                                   'rab__', <l__0__25, l__1__25, l__2__25, l__3__25.1, l__4__25.1>, t__0__25
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__0_0__64
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____2__1_0_____7__0_1__120
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_0', %1
                     ) @ #k )
                case Bob__merged_____11__0_0_____13__58
                solve( State__Bob( <'rab_____11__0_0', 'rab__rab', %1>, return__var__25,
                                   'rab__', <l__0__25, l__1__25, l__2__25, l__3__25.1, l__4__25.1>, t__0__25
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__0_0__64
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_0', %1
                     ) @ #k )
                case Bob__merged_____11__0_0_____13__58
                solve( State__Bob( <'rab_____11__0_0', 'rab__rab', %1>, return__var__25,
                                   'rab__', <l__0__25, l__1__25, l__2__25, l__3__25.1, l__4__25.1>, t__0__25
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__0_0__64
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____11__1_0_____13__54
      solve( State__Bob( <'rab_____11__1_0', param, %i>, return__var__30,
                         'rab__', <l__0__30, l__1__30, l__2__30, l__3__30, l__4__30>, t__0__30
             ) ▶₀ #j )
        case Bob__merged_____8__0_1_____11__1_0__63_case_1
        solve( Store( 'rab__udp', n__0__30 ) ▶₁ #j )
          case Alice__merged_____1_____7__0_1__129
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__1_0', %1
                     ) @ #k )
                case Bob__merged_____11__1_0_____13__54
                solve( State__Bob( <'rab_____11__1_0', 'rab__rab', %1>, return__var__30,
                                   'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30.1>, t__0__30
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__1_0__63
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____2__1_0_____7__0_1__120
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__1_0', %1
                     ) @ #k )
                case Bob__merged_____11__1_0_____13__54
                solve( State__Bob( <'rab_____11__1_0', 'rab__rab', %1>, return__var__30,
                                   'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30.1>, t__0__30
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__1_0__63
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__1_0', %1
                     ) @ #k )
                case Bob__merged_____11__1_0_____13__54
                solve( State__Bob( <'rab_____11__1_0', 'rab__rab', %1>, return__var__30,
                                   'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30.1>, t__0__30
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__1_0__63
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      next
        case Bob__merged_____8__0_1_____11__1_0__63_case_2
        solve( Store( 'rab__udp', n__0__30 ) ▶₁ #j )
          case Alice__merged_____1_____7__0_1__129
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__1_0', %1
                     ) @ #k )
                case Bob__merged_____11__1_0_____13__54
                solve( State__Bob( <'rab_____11__1_0', 'rab__rab', %1>, return__var__30,
                                   'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30.1>, t__0__30
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__1_0__63
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____2__1_0_____7__0_1__120
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__1_0', %1
                     ) @ #k )
                case Bob__merged_____11__1_0_____13__54
                solve( State__Bob( <'rab_____11__1_0', 'rab__rab', %1>, return__var__30,
                                   'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30.1>, t__0__30
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__1_0__63
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____6_____8__0_1__69
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__0
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__34 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__1_0', %1
                     ) @ #k )
                case Bob__merged_____11__1_0_____13__54
                solve( State__Bob( <'rab_____11__1_0', 'rab__rab', %1>, return__var__30,
                                   'rab__', <l__0__30, l__1__30, l__2__30, l__3__30.1, l__4__30.1>, t__0__30
                       ) ▶₀ #k )
                  case Bob__merged_____8__0_1_____11__1_0__63
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____13__0_1_____20__49
      by solve( State__Bob( <'rab_____13__0_1', param, %i>, return__var__37,
                            'rab__', <l__0__37, l__1__37, l__2__37, l__3__37, l__4__37>, t__0__37
                ) ▶₀ #j )
    next
      case Bob__merged_____13_____13__0_1__50
      solve( State__Bob( <'rab_____13', param, %i>, return__var__35, 'rab__',
                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35>, t__0__35
             ) ▶₀ #j )
        case Bob__merged_____11__0_0_____13__58_case_1
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__0_0_____13__58_case_2
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__0_0_____13__58_case_3
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__0_0_____13__58_case_4
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__0_0_____13__58_case_5
        by solve( BobSendNonceB( dec(enc(<~n, ~n.1>, pk(~n.2)), ~n.3) ) ▶₁ #j )
      next
        case Bob__merged_____11__0_0_____13__58_case_6
        by solve( BobSendNonceB( dec(enc(<~n, ~n.1>, pk(~n.2)), ~n.3) ) ▶₁ #j )
      next
        case Bob__merged_____11__1_0_____13__54_case_1
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__1_0_____13__54_case_2
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__1_0_____13__54_case_3
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__1_0_____13__54_case_4
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__1_0_____13__54_case_5
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      next
        case Bob__merged_____11__1_0_____13__54_case_6
        by solve( BobSendNonceB( l__0__35 ) ▶₁ #j )
      qed
    next
      case Bob__merged_____3__0_0_____6__78
      solve( State__Bob( <'rab_____3__0_0', param, %i>, return__var__4,
                         'rab__', <l__0__4, l__1__4>, t__0__4
             ) ▶₀ #j )
        case Bob__merged_____0_____3__0_0__84
        solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
               ) ▶₂ #j )
          case Init__system__ACP__0
          solve( !Const__( 'rab__priv_key_bob', priv_key_bob__13 ) ▶₃ #j )
            case Const__priv_key_bob
            solve( !Const__( 'rab__nonce_a', nonce_a__14 ) ▶₄ #j )
              case Const__nonce_a
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____3__0_0', %1
                     ) @ #k )
                case Bob__merged_____3__0_0_____6__78
                solve( State__Bob( <'rab_____3__0_0', 'rab__rab', %1>, return__var__4,
                                   'rab__', <l__0__4, l__1__4>, t__0__4
                       ) ▶₀ #k )
                  case Bob__merged_____0_____3__0_0__84
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____3__1_0_____6__74
      solve( State__Bob( <'rab_____3__1_0', param, %i>, return__var__9,
                         'rab__', <l__0__9, l__1__9>, t__0__9
             ) ▶₀ #j )
        case Bob__merged_____0_____3__1_0__83
        solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
               ) ▶₃ #j )
          case Init__system__ACP__0
          solve( !Const__( 'rab__priv_key_bob', priv_key_bob__13 ) ▶₄ #j )
            case Const__priv_key_bob
            solve( !Const__( 'rab__nonce_a', nonce_a__14 ) ▶₅ #j )
              case Const__nonce_a
              solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____3__1_0', %1
                     ) @ #k )
                case Bob__merged_____3__1_0_____6__74
                solve( State__Bob( <'rab_____3__1_0', 'rab__rab', %1>, return__var__9,
                                   'rab__', <l__0__9, l__1__9>, t__0__9
                       ) ▶₀ #k )
                  case Bob__merged_____0_____3__1_0__83
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____6_____8__0_1__69
      solve( State__Bob( <'rab_____6', param, %i>, return__var__15, 'rab__',
                         <l__0__15, l__1__15>, t__0__15
             ) ▶₀ #j )
        case Bob__merged_____3__0_0_____6__78
        solve( !Const__( 'rab__nonce_a', nonce_a__15 ) ▶₁ #j )
          case Const__nonce_a
          solve( !Const__( 'rab__nonce_b', nonce_b__15 ) ▶₂ #j )
            case Const__nonce_b
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__15 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__send'
                     ) ▶₄ #j )
                case Init__system__ACP__1
                solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____6', %1 ) @ #k )
                  case Bob__merged_____6_____8__0_1__69
                  solve( State__Bob( <'rab_____6', 'rab__rab', %1>, return__var__15,
                                     'rab__', <l__0__15.1, l__1__15.1>, t__0__15
                         ) ▶₀ #k )
                    case Bob__merged_____3__0_0_____6__78
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Bob__merged_____3__1_0_____6__74
        solve( !Const__( 'rab__nonce_a', nonce_a__15 ) ▶₁ #j )
          case Const__nonce_a
          solve( !Const__( 'rab__nonce_b', nonce_b__15 ) ▶₂ #j )
            case Const__nonce_b
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__15 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__send'
                     ) ▶₄ #j )
                case Init__system__ACP__1
                solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____6', %1 ) @ #k )
                  case Bob__merged_____6_____8__0_1__69
                  solve( State__Bob( <'rab_____6', 'rab__rab', %1>, return__var__15,
                                     'rab__', <l__0__15.1, l__1__15.1>, t__0__15
                         ) ▶₀ #k )
                    case Bob__merged_____3__1_0_____6__74
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____8__0_1_____11__0_0__64
      solve( State__Bob( <'rab_____8__0_1', param, %i>, return__var__21,
                         'rab__', <l__0__21, l__1__21, l__2__21, l__3__21, l__4__21>, t__0__21
             ) ▶₀ #j )
        case Bob__merged_____6_____8__0_1__69_case_1
        solve( !Const__( 'rab__nonce_b', nonce_b__22 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____8__0_1', %1
                 ) @ #k )
            case Bob__merged_____8__0_1_____11__0_0__64
            solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>, return__var__21,
                               'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                   ) ▶₀ #k )
              case Bob__merged_____6_____8__0_1__69
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____8__0_1_____11__1_0__63
            by solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>,
                                  return__var__21, 'rab__',
                                  <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                      ) ▶₀ #k )
          qed
        qed
      next
        case Bob__merged_____6_____8__0_1__69_case_2
        solve( !Const__( 'rab__nonce_b', nonce_b__22 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____8__0_1', %1
                 ) @ #k )
            case Bob__merged_____8__0_1_____11__0_0__64
            solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>, return__var__21,
                               'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                   ) ▶₀ #k )
              case Bob__merged_____6_____8__0_1__69
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____8__0_1_____11__1_0__63
            by solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>,
                                  return__var__21, 'rab__',
                                  <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Bob__merged_____8__0_1_____11__1_0__63
      solve( State__Bob( <'rab_____8__0_1', param, %i>, return__var__21,
                         'rab__', <l__0__21, l__1__21, l__2__21, l__3__21, l__4__21>, t__0__21
             ) ▶₀ #j )
        case Bob__merged_____6_____8__0_1__69_case_1
        solve( !Const__( 'rab__nonce_b', nonce_b__22 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____8__0_1', %1
                 ) @ #k )
            case Bob__merged_____8__0_1_____11__0_0__64
            by solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>,
                                  return__var__21, 'rab__',
                                  <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                      ) ▶₀ #k )
          next
            case Bob__merged_____8__0_1_____11__1_0__63
            solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>, return__var__21,
                               'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                   ) ▶₀ #k )
              case Bob__merged_____6_____8__0_1__69
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case Bob__merged_____6_____8__0_1__69_case_2
        solve( !Const__( 'rab__nonce_b', nonce_b__22 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____8__0_1', %1
                 ) @ #k )
            case Bob__merged_____8__0_1_____11__0_0__64
            by solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>,
                                  return__var__21, 'rab__',
                                  <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                      ) ▶₀ #k )
          next
            case Bob__merged_____8__0_1_____11__1_0__63
            solve( State__Bob( <'rab_____8__0_1', 'rab__rab', %1>, return__var__21,
                               'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1, l__4__21.1>, t__0__21
                   ) ▶₀ #k )
              case Bob__merged_____6_____8__0_1__69
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma NonceSecrecyB_Alt:
  all-traces "¬(∃ nb #i #j. (SecretNonceBob( nb ) @ #i) ∧ (K( nb ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ nb #i #j. (SecretNonceBob( nb ) @ #i) ∧ (K( nb ) @ #j)"
*/
simplify
solve( State__Bob( <'rab_____13', param, %v__>, return__var__35, 'rab__',
                   <nb, l__1__35, l__2__35, l__3__35, l__4__35>, t__0__35
       ) ▶₀ #i )
  case Bob__merged_____11__0_0_____13__58_case_1
  by solve( BobSendNonceB( nb ) ▶₁ #i )
next
  case Bob__merged_____11__0_0_____13__58_case_2
  by solve( BobSendNonceB( nb ) ▶₁ #i )
next
  case Bob__merged_____11__0_0_____13__58_case_3
  by solve( BobSendNonceB( nb ) ▶₁ #i )
next
  case Bob__merged_____11__0_0_____13__58_case_4
  by solve( BobSendNonceB( nb ) ▶₁ #i )
next
  case Bob__merged_____11__0_0_____13__58_case_5
  by solve( BobSendNonceB( dec(enc(<~n, ~n.1>, pk(~n.2)), ~n.3) ) ▶₁ #i )
next
  case Bob__merged_____11__0_0_____13__58_case_6
  by solve( BobSendNonceB( dec(enc(<~n, ~n.1>, pk(~n.2)), ~n.3) ) ▶₁ #i )
next
  case Bob__merged_____11__1_0_____13__54_case_1
  by solve( BobSendNonceB( nb ) ▶₁ #i )
next
  case Bob__merged_____11__1_0_____13__54_case_2
  by solve( BobSendNonceB( nb ) ▶₁ #i )
next
  case Bob__merged_____11__1_0_____13__54_case_3
  by solve( BobSendNonceB( nb ) ▶₁ #i )
next
  case Bob__merged_____11__1_0_____13__54_case_4
  by solve( BobSendNonceB( nb ) ▶₁ #i )
next
  case Bob__merged_____11__1_0_____13__54_case_5
  by solve( BobSendNonceB( nb ) ▶₁ #i )
next
  case Bob__merged_____11__1_0_____13__54_case_6
  by solve( BobSendNonceB( nb ) ▶₁ #i )
qed

lemma NonceSecrecyA_Alt:
  all-traces
  "¬(∃ na #i #j. (SecretNonceAlice( na ) @ #i) ∧ (K( na ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ na #i #j. (SecretNonceAlice( na ) @ #i) ∧ (K( na ) @ #j)"
*/
simplify
by solve( AliceSendNonceA( nonce_a__46 ) ▶₁ #i )

lemma NonceSecrecyB:
  all-traces
  "∀ nb #j. (SecretNonceBob( nb ) @ #j) ⇒ (¬(∃ #m. K( nb ) @ #m))"
/*
guarded formula characterizing all counter-examples:
"∃ nb #j. (SecretNonceBob( nb ) @ #j) ∧ ∃ #m. (K( nb ) @ #m)"
*/
simplify
solve( State__Bob( <'rab_____13', param, %v__>, return__var__35, 'rab__',
                   <nb, l__1__35, l__2__35, l__3__35, l__4__35>, t__0__35
       ) ▶₀ #j )
  case Bob__merged_____11__0_0_____13__58_case_1
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__0_0_____13__58_case_2
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__0_0_____13__58_case_3
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__0_0_____13__58_case_4
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__0_0_____13__58_case_5
  by solve( BobSendNonceB( dec(enc(<~n, ~n.1>, pk(~n.2)), ~n.3) ) ▶₁ #j )
next
  case Bob__merged_____11__0_0_____13__58_case_6
  by solve( BobSendNonceB( dec(enc(<~n, ~n.1>, pk(~n.2)), ~n.3) ) ▶₁ #j )
next
  case Bob__merged_____11__1_0_____13__54_case_1
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__1_0_____13__54_case_2
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__1_0_____13__54_case_3
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__1_0_____13__54_case_4
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__1_0_____13__54_case_5
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__1_0_____13__54_case_6
  by solve( BobSendNonceB( nb ) ▶₁ #j )
qed

lemma NonceSecrecyA:
  all-traces
  "∀ na #i. (SecretNonceAlice( na ) @ #i) ⇒ (¬(∃ #l. K( na ) @ #l))"
/*
guarded formula characterizing all counter-examples:
"∃ na #i. (SecretNonceAlice( na ) @ #i) ∧ ∃ #l. (K( na ) @ #l)"
*/
simplify
by solve( AliceSendNonceA( nonce_a__46 ) ▶₁ #i )

lemma SecrecyCanBeEstablishedB_tmrn:
  exists-trace "∃ nb #j. SecretNonceBob( nb ) @ #j"
/*
guarded formula characterizing all satisfying traces:
"∃ nb #j. (SecretNonceBob( nb ) @ #j)"
*/
simplify
solve( State__Bob( <'rab_____13', param, %v__>, return__var__35, 'rab__',
                   <nb, l__1__35, l__2__35, l__3__35, l__4__35>, t__0__35
       ) ▶₀ #j )
  case Bob__merged_____11__0_0_____13__58_case_1
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__0_0_____13__58_case_2
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__0_0_____13__58_case_3
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__0_0_____13__58_case_4
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__0_0_____13__58_case_5
  by solve( BobSendNonceB( dec(enc(<~n, ~n.1>, pk(~n.2)), ~n.3) ) ▶₁ #j )
next
  case Bob__merged_____11__0_0_____13__58_case_6
  by solve( BobSendNonceB( dec(enc(<~n, ~n.1>, pk(~n.2)), ~n.3) ) ▶₁ #j )
next
  case Bob__merged_____11__1_0_____13__54_case_1
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__1_0_____13__54_case_2
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__1_0_____13__54_case_3
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__1_0_____13__54_case_4
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__1_0_____13__54_case_5
  by solve( BobSendNonceB( nb ) ▶₁ #j )
next
  case Bob__merged_____11__1_0_____13__54_case_6
  by solve( BobSendNonceB( nb ) ▶₁ #j )
qed

lemma SecrecyCanBeEstablishedB:
  exists-trace
  "∃ nonce_b #time__0 #label_time__0.
    (!Const__( 'rab__nonce_b', nonce_b ) @ #label_time__0) ∧
    (SecretNonceBob( nonce_b ) @ #time__0)"
/*
guarded formula characterizing all satisfying traces:
"∃ nonce_b #time__0 #label_time__0.
  (!Const__( 'rab__nonce_b', nonce_b ) @ #label_time__0) ∧
  (SecretNonceBob( nonce_b ) @ #time__0)"
*/
simplify
solve( State__Bob( <'rab_____13', param, %v__>, return__var__35, 'rab__',
                   <nonce_b, l__1__35, l__2__35, l__3__35, l__4__35>, t__0__35
       ) ▶₀ #time__0 )
  case Bob__merged_____11__0_0_____13__58_case_1
  by solve( BobSendNonceB( nonce_b ) ▶₁ #time__0 )
next
  case Bob__merged_____11__0_0_____13__58_case_2
  by solve( BobSendNonceB( nonce_b ) ▶₁ #time__0 )
next
  case Bob__merged_____11__0_0_____13__58_case_3
  by solve( BobSendNonceB( nonce_b ) ▶₁ #time__0 )
next
  case Bob__merged_____11__0_0_____13__58_case_4
  by solve( BobSendNonceB( nonce_b ) ▶₁ #time__0 )
next
  case Bob__merged_____11__0_0_____13__58_case_5
  by solve( BobSendNonceB( dec(enc(<~n, ~n.1>, pk(~n.2)), ~n.3)
            ) ▶₁ #time__0 )
next
  case Bob__merged_____11__0_0_____13__58_case_6
  by solve( BobSendNonceB( dec(enc(<~n, ~n.1>, pk(~n.2)), ~n.3)
            ) ▶₁ #time__0 )
next
  case Bob__merged_____11__1_0_____13__54_case_1
  by solve( BobSendNonceB( nonce_b ) ▶₁ #time__0 )
next
  case Bob__merged_____11__1_0_____13__54_case_2
  by solve( BobSendNonceB( nonce_b ) ▶₁ #time__0 )
next
  case Bob__merged_____11__1_0_____13__54_case_3
  by solve( BobSendNonceB( nonce_b ) ▶₁ #time__0 )
next
  case Bob__merged_____11__1_0_____13__54_case_4
  by solve( BobSendNonceB( nonce_b ) ▶₁ #time__0 )
next
  case Bob__merged_____11__1_0_____13__54_case_5
  by solve( BobSendNonceB( nonce_b ) ▶₁ #time__0 )
next
  case Bob__merged_____11__1_0_____13__54_case_6
  by solve( BobSendNonceB( nonce_b ) ▶₁ #time__0 )
qed

lemma SecrecyCanBeEstablishedA_tmrn:
  exists-trace "∃ na #i. SecretNonceAlice( na ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ na #i. (SecretNonceAlice( na ) @ #i)"
*/
simplify
by solve( AliceSendNonceA( nonce_a__46 ) ▶₁ #i )

lemma SecrecyCanBeEstablishedA:
  exists-trace
  "∃ nonce_a #time__0 #label_time__0.
    (!Const__( 'rab__nonce_a', nonce_a ) @ #label_time__0) ∧
    (SecretNonceAlice( nonce_a ) @ #time__0)"
/*
guarded formula characterizing all satisfying traces:
"∃ nonce_a #time__0 #label_time__0.
  (!Const__( 'rab__nonce_a', nonce_a ) @ #label_time__0) ∧
  (SecretNonceAlice( nonce_a ) @ #time__0)"
*/
simplify
by solve( AliceSendNonceA( nonce_a__46 ) ▶₁ #time__0 )

lemma NonceBIsSent_Alt:
  exists-trace "∃ nb #j. BobSendNonceB( nb ) @ #j"
/*
guarded formula characterizing all satisfying traces:
"∃ nb #j. (BobSendNonceB( nb ) @ #j)"
*/
simplify
solve( BobSendNonceB( nb ) @ #j )
  case Bob__merged_____8__0_1_____11__0_0__64
  solve( State__Bob( <'rab_____8__0_1', param, %v__>, return__var__21,
                     'rab__', <l__0__21, l__1__21, l__2__21, l__3__21, l__4__21>, t__0__21
         ) ▶₀ #j )
    case Bob__merged_____6_____8__0_1__69_case_1
    solve( !Const__( 'rab__nonce_b', nb ) ▶₁ #j )
      case Const__nonce_b
      solve( splitEqs(1) )
        case split_case_3
        solve( Store( 'rab__udp', l__4__21 ) ▶₁ #vr.1 )
          case Alice__merged_____1_____7__0_1__129
          solve( File__Alice( 'rab__rab', loc__0, n__0__20 ) ▶₁ #vr.10 )
            case Alice__init_filesys_____0_____1__0
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma NonceBIsSent:
  exists-trace
  "∃ nonce_b #time__0 #label_time__0.
    (!Const__( 'rab__nonce_b', nonce_b ) @ #label_time__0) ∧
    (BobSendNonceB( nonce_b ) @ #time__0)"
/*
guarded formula characterizing all satisfying traces:
"∃ nonce_b #time__0 #label_time__0.
  (!Const__( 'rab__nonce_b', nonce_b ) @ #label_time__0) ∧
  (BobSendNonceB( nonce_b ) @ #time__0)"
*/
simplify
solve( !Const__( 'rab__nonce_b', nonce_b ) @ #label_time__0 )
  case Const__nonce_b
  solve( BobSendNonceB( ~n ) @ #time__0 )
    case Bob__merged_____8__0_1_____11__0_0__64
    solve( State__Bob( <'rab_____8__0_1', param, %v__>, return__var__21,
                       'rab__', <l__0__21, l__1__21, l__2__21, l__3__21, l__4__21>, t__0__21
           ) ▶₀ #time__0 )
      case Bob__merged_____6_____8__0_1__69_case_1
      solve( !Const__( 'rab__nonce_b', ~n ) ▶₁ #time__0 )
        case Const__nonce_b
        solve( splitEqs(2) )
          case split_case_3
          solve( Store( 'rab__udp', l__4__21 ) ▶₁ #vr.1 )
            case Alice__merged_____1_____7__0_1__129
            solve( File__Alice( 'rab__rab', loc__0, n__0__20 ) ▶₁ #vr.9 )
              case Alice__init_filesys_____0_____1__0
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma NonceAIsSent_Alt:
  exists-trace "∃ na #i. AliceSendNonceA( na ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ na #i. (AliceSendNonceA( na ) @ #i)"
*/
simplify
solve( AliceSendNonceA( na ) @ #i )
  case Alice__merged_____7__0_1_____10__0_0__102
  solve( State__Alice( <'rab_____7__0_1', param, %v__>, return__var__30,
                       'rab__', <l__0__30, l__1__30, l__2__30, l__3__30, l__4__30>, 'rab__'
         ) ▶₀ #i )
    case Alice__merged_____1_____7__0_1__129
    solve( !Const__( 'rab__nonce_a', na ) ▶₁ #i )
      case Const__nonce_a
      solve( File__Alice( 'rab__rab', loc__0, l__3__30 ) ▶₁ #vr )
        case Alice__init_filesys_____0_____1__0
        SOLVED // trace found
      qed
    qed
  qed
qed

lemma NonceAIsSent:
  exists-trace
  "∃ nonce_a #time__0 #label_time__0.
    (!Const__( 'rab__nonce_a', nonce_a ) @ #label_time__0) ∧
    (AliceSendNonceA( nonce_a ) @ #time__0)"
/*
guarded formula characterizing all satisfying traces:
"∃ nonce_a #time__0 #label_time__0.
  (!Const__( 'rab__nonce_a', nonce_a ) @ #label_time__0) ∧
  (AliceSendNonceA( nonce_a ) @ #time__0)"
*/
simplify
solve( !Const__( 'rab__nonce_a', nonce_a ) @ #label_time__0 )
  case Const__nonce_a
  solve( AliceSendNonceA( ~n ) @ #time__0 )
    case Alice__merged_____7__0_1_____10__0_0__102
    solve( State__Alice( <'rab_____7__0_1', param, %v__>, return__var__30,
                         'rab__', <l__0__30, l__1__30, l__2__30, l__3__30, l__4__30>, 'rab__'
           ) ▶₀ #time__0 )
      case Alice__merged_____1_____7__0_1__129
      solve( !Const__( 'rab__nonce_a', ~n ) ▶₁ #time__0 )
        case Const__nonce_a
        solve( File__Alice( 'rab__rab', loc__0, l__3__30 ) ▶₁ #vr )
          case Alice__init_filesys_____0_____1__0
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma BobOpenTimestampExists:
  exists-trace "∃ #i. BobOpen( ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ #i. (BobOpen( ) @ #i)"
*/
simplify
solve( BobOpen( ) @ #i )
  case Bob__merged_____0_____3__0_0__84
  solve( State__Bob( <'rab_____0', param, %v__>, return__var__0, 'rab__',
                     'rab__', 'rab__'
         ) ▶₀ #i )
    case Init__system
    solve( !Const__( 'rab__priv_key_alice', priv_key_alice__0 ) ▶₁ #i )
      case Const__priv_key_alice
      SOLVED // trace found
    qed
  qed
qed

lemma ReachableBobOpen:
  exists-trace "∃ #time__0. BobOpen( ) @ #time__0"
/*
guarded formula characterizing all satisfying traces:
"∃ #time__0. (BobOpen( ) @ #time__0)"
*/
simplify
solve( BobOpen( ) @ #time__0 )
  case Bob__merged_____0_____3__0_0__84
  solve( State__Bob( <'rab_____0', param, %v__>, return__var__0, 'rab__',
                     'rab__', 'rab__'
         ) ▶₀ #time__0 )
    case Init__system
    solve( !Const__( 'rab__priv_key_alice', priv_key_alice__0 ) ▶₁ #time__0 )
      case Const__priv_key_alice
      SOLVED // trace found
    qed
  qed
qed

lemma tautology:
  all-traces "∀ #j. (BobClose( ) @ #j) ⇒ (BobClose( ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ #j. (BobClose( ) @ #j) ∧ ¬(BobClose( ) @ #j)"
*/
simplify
by contradiction /* from formulas */



















/*
WARNING: the following wellformedness checks failed!

Unbound variables
=================

  rule `Equality_gen' has unbound variables: 
    x
  
  rule `NEquality_gen' has unbound variables: 
    x, y

Facts occur in the left-hand-side but not in any right-hand-side 
=================================================================

  1. in rule "Alice__merged_____14_____14__0_1__86":  factName `AliceSendNonceA' arity: 1 multiplicity: Linear
  
  2. in rule "Bob__merged_____13_____13__0_1__50":  factName `BobSendNonceB' arity: 1 multiplicity: Linear

Inexistant lemma actions
========================

  lemma `AlwaysStarts__' references action 
    fact "Loop__Back" (arity 2, Linear) 
  but no rule has such an action.
  
  lemma `AlwaysStarts__' references action 
    fact "Loop__Start" (arity 2, Linear) 
  but no rule has such an action.
  
  lemma `AlwaysStartsWhenEnds__' references action 
    fact "Loop__Finish" (arity 2, Linear) 
  but no rule has such an action.
  
  lemma `AlwaysStartsWhenEnds__' references action 
    fact "Loop__Start" (arity 2, Linear) 
  but no rule has such an action.

Derivation Checks
=================

  Derivation checks timed out.
  Use --derivcheck-timeout=INT to configure timeout.
  Set to 0 to deactivate for no timeout.
*/

/*
Generated from:
Tamarin version 1.10.0
Maude version 3.3
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2025-05-19 07:15:16.841249052 UTC
*/

end

==============================================================================
summary of summaries:

analyzed: tamarin_models/needham_schroeder_new_syntax.spthy

  processing time: 36.70s
  
  WARNING: 8 wellformedness check failed!
           The analysis results might be wrong!
  
  AlwaysStarts__ (all-traces): verified (6 steps)
  AlwaysStartsWhenEnds__ (all-traces): verified (6 steps)
  TransitionOnce__ (all-traces): verified (534 steps)
  NonceSecrecyB_Alt (all-traces): verified (14 steps)
  NonceSecrecyA_Alt (all-traces): verified (2 steps)
  NonceSecrecyB (all-traces): verified (14 steps)
  NonceSecrecyA (all-traces): verified (2 steps)
  SecrecyCanBeEstablishedB_tmrn (exists-trace): falsified - no trace found (14 steps)
  SecrecyCanBeEstablishedB (exists-trace): falsified - no trace found (14 steps)
  SecrecyCanBeEstablishedA_tmrn (exists-trace): falsified - no trace found (2 steps)
  SecrecyCanBeEstablishedA (exists-trace): falsified - no trace found (2 steps)
  NonceBIsSent_Alt (exists-trace): verified (8 steps)
  NonceBIsSent (exists-trace): verified (9 steps)
  NonceAIsSent_Alt (exists-trace): verified (6 steps)
  NonceAIsSent (exists-trace): verified (7 steps)
  BobOpenTimestampExists (exists-trace): verified (5 steps)
  ReachableBobOpen (exists-trace): verified (5 steps)
  tautology (all-traces): verified (2 steps)

==============================================================================
