theory rabbit begin

// Function signature and definition of the equational theory E

builtins: natural-numbers
functions: dec/2, enc/2, fst/1, h/1, pair/2, pk/1, sign/2, snd/1, true/0,
           verify/3
equations:
    dec(enc(loc__1, loc__0), loc__0) = loc__1,
    fst(<loc__1, loc__0>) = loc__1,
    fst(<x.1, x.2>) = x.1,
    snd(<loc__1, loc__0>) = loc__0,
    snd(<x.1, x.2>) = x.2,
    verify(sign(loc__1, loc__0), loc__1, pk(loc__0)) = true





/* looping facts with injective instances: Chid__Client/2 */



rule (modulo E) Const__priv_k:
   [ Fr( priv_k ) ]
  --[
  Init__( 'rab__Const__priv_k' ), Init__( <'rab__Const__priv_k', priv_k> )
  ]->
   [ !Const__( 'rab__priv_k', priv_k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Const__sym_k:
   [ Fr( sym_k ) ]
  --[ Init__( 'rab__Const__sym_k' ), Init__( <'rab__Const__sym_k', sym_k> )
  ]->
   [ !Const__( 'rab__sym_k', sym_k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Const__init_data:
   [ Fr( init_data ) ]
  --[
  Init__( 'rab__Const__init_data' ),
  Init__( <'rab__Const__init_data', init_data> )
  ]->
   [ !Const__( 'rab__init_data', init_data ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_ta__rpc__accept_rpc:
   [ ] --> [ !ACP__( 'rab__Client_ta', 'rab__rpc', 'rab__accept_rpc' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_ta__rpc__:
   [ ] --> [ !ACP__( 'rab__Client_ta', 'rab__rpc', 'rab__' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_ta__client_ta_fs____secret__priv__fclose:
   [ ]
  -->
   [ !ACP__( 'rab__Client_ta', 'rab____secret__priv', 'rab__fclose' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_ta__client_ta_fs____secret__priv__fread:
   [ ]
  -->
   [ !ACP__( 'rab__Client_ta', 'rab____secret__priv', 'rab__fread' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_ta__client_ta_fs____secret__priv__fopen:
   [ ]
  -->
   [ !ACP__( 'rab__Client_ta', 'rab____secret__priv', 'rab__fopen' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Server__udp__recv:
   [ ] --> [ !ACP__( 'rab__Server', 'rab__udp', 'rab__recv' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Server____tampar_channel:
   [ ] --> [ !Attack__( 'rab__Server', 'rab__tampar_channel' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Server__server_fs____secret__pub__fclose:
   [ ] --> [ !ACP__( 'rab__Server', 'rab____secret__pub', 'rab__fclose' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Server__server_fs____secret__pub__fread:
   [ ] --> [ !ACP__( 'rab__Server', 'rab____secret__pub', 'rab__fread' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Server__server_fs____secret__pub__fopen:
   [ ] --> [ !ACP__( 'rab__Server', 'rab____secret__pub', 'rab__fopen' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client__rpc__close_rpc:
   [ ] --> [ !ACP__( 'rab__Client', 'rab__rpc', 'rab__close_rpc' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client__rpc__invoke_rpc:
   [ ] --> [ !ACP__( 'rab__Client', 'rab__rpc', 'rab__invoke_rpc' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client__rpc__connect_rpc:
   [ ] --> [ !ACP__( 'rab__Client', 'rab__rpc', 'rab__connect_rpc' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client__udp__send:
   [ ] --> [ !ACP__( 'rab__Client', 'rab__udp', 'rab__send' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client__rpc__:
   [ ] --> [ !ACP__( 'rab__Client', 'rab__rpc', 'rab__' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client__secret__pub:
   [ !Const__( 'rab__priv_k', priv_k ) ]
  --[ Init__( <'rab__Client', 'rab____secret__pub'> ) ]->
   [ File__Client( 'rab____secret__pub', pk(priv_k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) InitClient:
   [ ]
  --[ Init__( 'rab__Client' ) ]->
   [ State__Client( <'rab_____0', %1>, 'rab__', 'rab__', 'rab__', 'rab__' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client__merged_____0_____4__0_1__96:
   [
   State__Client( <'rab_____0', %v__>, return__var__0, 'rab__', 'rab__',
                  'rab__'
   ),
   !ACP__( 'rab__Client', 'rab__rpc', 'rab__connect_rpc' )
   ]
  --[ Transition__Client( 'rab__96', %v__ ) ]->
   [
   State__Client( <'rab_____4__0_1', %v__>, 'rab__', 'rab__',
                  <'rab__rpc', 'rab__'>,
                  <'rab__sign_image', 'rab____secret__priv', 'rab____dev__camera'>
   ),
   Req( 'rab__rpc' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client__merged_____4__0_1_____4__0_1__0_2__91:
   [
   State__Client( <'rab_____4__0_1', %v__>, return__var__6, 'rab__',
                  <l__0__6, l__1__6>, <t__0__6, t__1__6, t__2__6>
   ),
   Ack( l__0__6 ), !ACP__( 'rab__Client', l__0__6, 'rab__connect_rpc' ),
   !ACP__( 'rab__Client', l__0__6, 'rab__connect_rpc' ), Fr( n__0__7 )
   ]
  --[ Transition__Client( 'rab__91', %v__ ) ]->
   [
   State__Client( <'rab_____4__0_1__0_2', %v__>, 'rab__', n__0__7,
                  <l__0__6, l__1__6>, <t__0__6, t__1__6, t__2__6>
   ),
   Chid__Client( n__0__7, l__0__6 ), Conn( l__0__6 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client__merged_____4__0_1__0_2_____6__89:
   [
   State__Client( <'rab_____4__0_1__0_2', %v__>, return__var__9, m__0__9,
                  <l__0__9, l__1__9>, <t__0__9, t__1__9, t__2__9>
   )
   ]
  --[
  Transition__Client( 'rab__89', %v__ ), Loop__Start( 'rab__Client__13' )
  ]->
   [
   State__Client( <'rab_____6', %v__>, 'rab__', 'rab__', m__0__9,
                  <t__0__9, t__1__9, t__2__9>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client__merged_____6_____6__0_4__0_2__85:
   [
   State__Client( <'rab_____6', %v__>, return__var__14, 'rab__', l__0__14,
                  <t__0__14, t__1__14, t__2__14>
   ),
   Chid__Client( l__0__14, n__0__26 ),
   !ACP__( 'rab__Client', n__0__26, 'rab__invoke_rpc' ), Fr( n__0__17 )
   ]
  --[ Transition__Client( 'rab__85', %v__ ) ]->
   [
   State__Client( <'rab_____6__0_4__0_2', %v__>, 'rab__', n__0__26,
                  <t__1__14, n__0__17, t__0__14, l__0__14, 'rab__', n__0__17, l__0__14>,
                  <t__0__14, t__1__14, t__2__14>
   ),
   Out( n__0__17 ), Chid__Client( l__0__14, n__0__26 ),
   Invoke( n__0__26, t__0__14, n__0__17, t__1__14 )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) Client__merged_____6_____7__84:
   [
   State__Client( <'rab_____6', %v__>, return__var__43, 'rab__', l__0__43,
                  <t__0__43, t__1__43, t__2__43>
   )
   ]
  --[
  Transition__Client( 'rab__84', %v__ ), Loop__Finish( 'rab__Client__13' )
  ]->
   [
   State__Client( <'rab_____7', %v__>, 'rab__', 'rab__', l__0__43,
                  <t__0__43, t__1__43, t__2__43>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client__merged_____6__0_4__0_2_____6__0_5__0_1__71:
   [
   State__Client( <'rab_____6__0_4__0_2', %v__>, return__var__28, m__0__28,
                  <l__0__28, l__1__28, l__2__28, l__3__28, l__4__28, l__5__28, l__6__28>,
                  <t__0__28, t__1__28, t__2__28>
   ),
   Returned( m__0__28, n__0__28 ),
   !ACP__( 'rab__Client', m__0__28, 'rab__invoke_rpc' )
   ]
  --[ Transition__Client( 'rab__71', %v__ ) ]->
   [
   State__Client( <'rab_____6__0_5__0_1', %v__>, 'rab__', 'rab__',
                  <n__0__28, n__0__28, l__5__28, l__6__28>, <t__0__28, t__1__28, t__2__28>
   ),
   Out( n__0__28 )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Client__merged_____6__0_5__0_1_____6__0_7__65:
   [
   State__Client( <'rab_____6__0_5__0_1', %v__>, return__var__35, 'rab__',
                  <l__0__35, l__1__35, l__2__35, l__3__35>, <t__0__35, t__1__35, t__2__35>
   )
   ]
  --[ Transition__Client( 'rab__65', %v__ ), ImgSend( l__2__35 ) ]->
   [
   State__Client( <'rab_____6__0_7', %v__>, 'rab__', 'rab__',
                  <l__1__35, l__2__35, l__3__35>, <t__0__35, t__1__35, t__2__35>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client__merged_____6__0_7_____6__0_10__64:
   [
   State__Client( <'rab_____6__0_7', %v__>, return__var__37, 'rab__',
                  <l__0__37, l__1__37, l__2__37>, <t__0__37, t__1__37, t__2__37>
   ),
   !ACP__( 'rab__Client', 'rab__udp', 'rab__send' )
   ]
  --[ Transition__Client( 'rab__64', %v__ ) ]->
   [
   State__Client( <'rab_____6__0_10', %v__>, 'rab__', 'rab__', l__2__37,
                  <t__0__37, t__1__37, t__2__37>
   ),
   Store( 'rab__udp', <l__0__37, l__1__37> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client__merged_____7_____7__0_3__59:
   [
   State__Client( <'rab_____7', %v__>, return__var__46, 'rab__', l__0__46,
                  <t__0__46, t__1__46, t__2__46>
   ),
   !Eq__( n__0__47, n__0__48 ),
   !ACP__( 'rab__Client', n__0__47, 'rab__close_rpc' ),
   Chid__Client( l__0__46, n__0__47 )
   ]
  --[ Transition__Client( 'rab__59', %v__ ) ]->
   [
   State__Client( <'rab_____7__0_3', %v__>, 'rab__', n__0__47,
                  <l__0__46, l__0__46>, <t__0__46, t__1__46, t__2__46>
   ),
   Exit( n__0__47 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client__merged_____7__0_3_____10__56:
   [
   State__Client( <'rab_____7__0_3', %v__>, return__var__50, m__0__50,
                  <l__0__50, l__1__50>, <t__0__50, t__1__50, t__2__50>
   )
   ]
  --[ Transition__Client( 'rab__56', %v__ ), ClientClose( ) ]->
   [
   State__Client( <'rab_____10', %v__>, 'rab__', 'rab__', 'rab__',
                  <t__0__50, t__1__50, t__2__50>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client__repeat_____6__0_10_____6__42:
   [
   State__Client( <'rab_____6__0_10', %v__>, return__var__42, 'rab__',
                  l__0__42, <t__0__42, t__1__42, t__2__42>
   )
   ]
  --[
  Transition__Client( 'rab__42', %v__ ), Loop__Back( 'rab__Client__13' )
  ]->
   [
   State__Client( <'rab_____6', (%v__%+%1)>, return__var__42, 'rab__',
                  l__0__42, <t__0__42, t__1__42, t__2__42>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Server__secret__pub:
   [ !Const__( 'rab__priv_k', priv_k ) ]
  --[ Init__( <'rab__Server', 'rab____secret__pub'> ) ]->
   [ File__Server( 'rab____secret__pub', pk(priv_k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) InitServer:
   [ ]
  --[ Init__( 'rab__Server' ) ]->
   [ State__Server( <'rab_____0', %1>, 'rab__', 'rab__', 'rab__', 'rab__' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Server__merged_____0_____6__0_1__0_0__116:
   [
   State__Server( <'rab_____0', %v__>, return__var__0, 'rab__', 'rab__',
                  'rab__'
   ),
   Fr( n__0__4 ), !Eq__( n__0__3, n__0__12 ),
   !ACP__( 'rab__Server', 'rab____secret__pub', 'rab__fopen' ),
   !ACP__( 'rab__Server', 'rab____secret__pub', 'rab__fopen' ),
   File__Server( 'rab____secret__pub', n__0__3 )
   ]
  --[
  Transition__Server( 'rab__116', %v__ ), Loop__Start( 'rab__Server__16' )
  ]->
   [
   State__Server( <'rab_____6__0_1__0_0', %v__>, 'rab__', 'rab__',
                  <'rab__udp', 'rab__', n__0__12, n__0__4>, 'rab____secret__pub'
   ),
   File__Server( 'rab____secret__pub', n__0__3 ),
   Fd__Server( n__0__4, n__0__12 )
   ]

  // loop breaker: [5]
  /* has exactly the trivial AC variant */

rule (modulo E) Server__merged_____0_____6__0_1__1_0__115:
   [
   State__Server( <'rab_____0', %v__>, return__var__0, 'rab__', 'rab__',
                  'rab__'
   ),
   Fr( n__0__4 ), !Eq__( n__0__3, n__0__12 ),
   !Attack__( 'rab__Server', 'rab__tampar_channel' ),
   !ACP__( 'rab__Server', 'rab____secret__pub', 'rab__fopen' ),
   !ACP__( 'rab__Server', 'rab____secret__pub', 'rab__fopen' ),
   File__Server( 'rab____secret__pub', n__0__3 )
   ]
  --[
  Transition__Server( 'rab__115', %v__ ), Loop__Start( 'rab__Server__16' )
  ]->
   [
   State__Server( <'rab_____6__0_1__1_0', %v__>, 'rab__', 'rab__',
                  <'rab__udp', 'rab__', n__0__12, n__0__4>, 'rab____secret__pub'
   ),
   File__Server( 'rab____secret__pub', n__0__3 ),
   Fd__Server( n__0__4, n__0__12 )
   ]

  // loop breaker: [6]
  /* has exactly the trivial AC variant */

rule (modulo E) Server__merged_____0_____6__114:
   [
   State__Server( <'rab_____0', %v__>, return__var__0, 'rab__', 'rab__',
                  'rab__'
   ),
   Fr( n__0__4 ), !Eq__( n__0__3, n__0__12 ),
   !ACP__( 'rab__Server', 'rab____secret__pub', 'rab__fopen' ),
   !ACP__( 'rab__Server', 'rab____secret__pub', 'rab__fopen' ),
   File__Server( 'rab____secret__pub', n__0__3 )
   ]
  --[
  Transition__Server( 'rab__114', %v__ ), Loop__Start( 'rab__Server__16' )
  ]->
   [
   State__Server( <'rab_____6', %v__>, 'rab__', 'rab__',
                  <n__0__12, n__0__4>, 'rab____secret__pub'
   ),
   File__Server( 'rab____secret__pub', n__0__3 ),
   Fd__Server( n__0__4, n__0__12 )
   ]

  // loop breaker: [5]
  /* has exactly the trivial AC variant */

rule (modulo E) Server__merged_____6_____9__64:
   [
   State__Server( <'rab_____6', %v__>, return__var__39, 'rab__',
                  <l__0__39, l__1__39>, t__0__39
   ),
   False( )
   ]
  --[
  Transition__Server( 'rab__64', %v__ ), Loop__Finish( 'rab__Server__16' )
  ]->
   [
   State__Server( <'rab_____9', %v__>, 'rab__', 'rab__', 'rab__', t__0__39 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Server__merged_____6__0_1__0_0_____6__0_2__61:
   [
   State__Server( <'rab_____6__0_1__0_0', %v__>, return__var__20, 'rab__',
                  <l__0__20, l__1__20, l__2__20, l__3__20>, t__0__20
   ),
   Store( l__0__20, n__0__20 ),
   !ACP__( 'rab__Server', l__0__20, 'rab__recv' )
   ]
  --[ Transition__Server( 'rab__61', %v__ ) ]->
   [
   State__Server( <'rab_____6__0_2', %v__>, 'rab__', 'rab__',
                  <n__0__20, l__2__20, l__3__20>, t__0__20
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Server__merged_____6__0_1__1_0_____6__0_2__58:
   [
   State__Server( <'rab_____6__0_1__1_0', %v__>, return__var__25, 'rab__',
                  <l__0__25, l__1__25, l__2__25, l__3__25>, t__0__25
   ),
   Store( l__0__25, n__0__25 ), In( n__1__25 ),
   !ACP__( 'rab__Server', l__0__25, 'rab__recv' )
   ]
  --[ Transition__Server( 'rab__58', %v__ ) ]->
   [
   State__Server( <'rab_____6__0_2', %v__>, 'rab__', 'rab__',
                  <n__1__25, l__2__25, l__3__25>, t__0__25
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Server__merged_____6__0_2_____6__0_6__55:
   [
   State__Server( <'rab_____6__0_2', %v__>, return__var__29, 'rab__',
                  <l__0__29, l__1__29, l__2__29>, t__0__29
   ),
   !NEq__( verify(fst(l__0__29), snd(l__0__29), l__1__29), true )
   ]
  --[
  Transition__Server( 'rab__55', %v__ ), ImgRecvInvalid( snd(l__0__29) )
  ]->
   [
   State__Server( <'rab_____6__0_6', %v__>, 'rab__', 'rab__',
                  <l__1__29, l__2__29>, t__0__29
   )
   ]

  /*
  rule (modulo AC) Server__merged_____6__0_2_____6__0_6__55:
     [
     State__Server( <'rab_____6__0_2', %v__>, return__var__29, 'rab__',
                    <l__0__29, l__1__29, l__2__29>, t__0__29
     ),
     !NEq__( z, true )
     ]
    --[ Transition__Server( 'rab__55', %v__ ), ImgRecvInvalid( z.1 ) ]->
     [
     State__Server( <'rab_____6__0_6', %v__>, 'rab__', 'rab__',
                    <l__1__29, l__2__29>, t__0__29
     )
     ]
    variants (modulo AC)
    1. l__0__29
             = l__0__29.15
       l__1__29
             = l__1__29.16
       z     = verify(fst(l__0__29.15), snd(l__0__29.15), l__1__29.16)
       z.1   = snd(l__0__29.15)
    
    2. l__0__29
             = <x.91, z.57>
       l__1__29
             = l__1__29.47
       z     = verify(x.91, z.57, l__1__29.47)
       z.1   = z.57
    
    3. l__0__29
             = <sign(z.18, x.23), z.18>
       l__1__29
             = pk(x.23)
       z     = true
       z.1   = z.18
  */

rule (modulo E) Server__merged_____6__0_2_____6__0_6__54:
   [
   State__Server( <'rab_____6__0_2', %v__>, return__var__29, 'rab__',
                  <l__0__29, l__1__29, l__2__29>, t__0__29
   ),
   !Eq__( verify(fst(l__0__29), snd(l__0__29), l__1__29), true )
   ]
  --[ Transition__Server( 'rab__54', %v__ ), ImgRecvValid( snd(l__0__29) )
  ]->
   [
   State__Server( <'rab_____6__0_6', %v__>, 'rab__', 'rab__',
                  <l__1__29, l__2__29>, t__0__29
   )
   ]

  /*
  rule (modulo AC) Server__merged_____6__0_2_____6__0_6__54:
     [
     State__Server( <'rab_____6__0_2', %v__>, return__var__29, 'rab__',
                    <l__0__29, l__1__29, l__2__29>, t__0__29
     ),
     !Eq__( z, true )
     ]
    --[ Transition__Server( 'rab__54', %v__ ), ImgRecvValid( z.1 ) ]->
     [
     State__Server( <'rab_____6__0_6', %v__>, 'rab__', 'rab__',
                    <l__1__29, l__2__29>, t__0__29
     )
     ]
    variants (modulo AC)
    1. l__0__29
             = l__0__29.15
       l__1__29
             = l__1__29.16
       z     = verify(fst(l__0__29.15), snd(l__0__29.15), l__1__29.16)
       z.1   = snd(l__0__29.15)
    
    2. l__0__29
             = <x.91, z.57>
       l__1__29
             = l__1__29.47
       z     = verify(x.91, z.57, l__1__29.47)
       z.1   = z.57
    
    3. l__0__29
             = <sign(z.18, x.23), z.18>
       l__1__29
             = pk(x.23)
       z     = true
       z.1   = z.18
  */

rule (modulo E) Server__repeat_____6__0_6_____6__38:
   [
   State__Server( <'rab_____6__0_6', %v__>, return__var__38, 'rab__',
                  <l__0__38, l__1__38>, t__0__38
   )
   ]
  --[
  Transition__Server( 'rab__38', %v__ ), Loop__Back( 'rab__Server__16' )
  ]->
   [
   State__Server( <'rab_____6', (%v__%+%1)>, return__var__38, 'rab__',
                  <l__0__38, l__1__38>, t__0__38
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_ta__secret__priv:
   [ !Const__( 'rab__priv_k', priv_k ), !Const__( 'rab__sym_k', sym_k ) ]
  --[ Init__( <'rab__Client_ta', 'rab____secret__priv'> ) ]->
   [ File__Client_ta( 'rab____secret__priv', enc(priv_k, sym_k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) InitClient_ta:
   [ ]
  --[ Init__( 'rab__Client_ta' ) ]->
   [
   State__Client_ta( <'rab_____0', %1>, 'rab__', 'rab__', 'rab__', 'rab__' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_ta__merged_____3_____3__0_1__88:
   [
   State__Client_ta( <'rab_____3', %v__>, return__var__7, 'rab__', 'rab__',
                     t__0__7
   ),
   Invoke( 'rab__rpc', n__2__7, n__1__7, n__0__7 ),
   !ACP__( 'rab__Client_ta', 'rab__rpc', 'rab__' ),
   File__Client_ta( n__0__7, n__0__13 ),
   !ACP__( 'rab__Client_ta', n__0__7, 'rab__fopen' ),
   !ACP__( 'rab__Client_ta', n__0__7, 'rab__fopen' ),
   !Eq__( n__0__13, n__0__22 ), Fr( n__0__14 ),
   !Eq__( n__2__7, 'rab__sign_image' ),
   !ACP__( 'rab__Client_ta', 'rab__rpc', 'rab__' ),
   !Eq__( n__0__22, n__0__29 )
   ]
  --[ Transition__Client_ta( 'rab__88', %v__ ) ]->
   [
   State__Client_ta( <'rab_____3__0_1', %v__>, 'rab__',
                     <n__0__7, n__1__7, n__2__7>, 'rab__', t__0__7
   ),
   File__Client_ta( n__0__7, n__0__13 ),
   Returned( 'rab__rpc', sign(n__1__7, dec(n__0__22, t__0__7)) )
   ]

  // loop breakers: [1,3]
  /*
  rule (modulo AC) Client_ta__merged_____3_____3__0_1__88:
     [
     State__Client_ta( <'rab_____3', %v__>, return__var__7, 'rab__', 'rab__',
                       t__0__7
     ),
     Invoke( 'rab__rpc', n__2__7, n__1__7, n__0__7 ),
     !ACP__( 'rab__Client_ta', 'rab__rpc', 'rab__' ),
     File__Client_ta( n__0__7, n__0__13 ),
     !ACP__( 'rab__Client_ta', n__0__7, 'rab__fopen' ),
     !ACP__( 'rab__Client_ta', n__0__7, 'rab__fopen' ),
     !Eq__( n__0__13, n__0__22 ), Fr( n__0__14 ),
     !Eq__( n__2__7, 'rab__sign_image' ),
     !ACP__( 'rab__Client_ta', 'rab__rpc', 'rab__' ),
     !Eq__( n__0__22, n__0__29 )
     ]
    --[ Transition__Client_ta( 'rab__88', %v__ ) ]->
     [
     State__Client_ta( <'rab_____3__0_1', %v__>, 'rab__',
                       <n__0__7, n__1__7, n__2__7>, 'rab__', t__0__7
     ),
     File__Client_ta( n__0__7, n__0__13 ),
     Returned( 'rab__rpc', sign(n__1__7, z) )
     ]
    variants (modulo AC)
    1. n__0__22
             = n__0__22.26
       t__0__7
             = t__0__7.32
       z     = dec(n__0__22.26, t__0__7.32)
    
    2. n__0__22
             = enc(z.38, t__0__7.29)
       t__0__7
             = t__0__7.29
       z     = z.38
    // loop breakers: [1,3]
  */

rule (modulo E) Client_ta__merged_____0_____1__0_0__87:
   [
   State__Client_ta( <'rab_____0', %v__>, return__var__0, 'rab__', 'rab__',
                     'rab__'
   ),
   !Const__( 'rab__sym_k', sym_k__0 )
   ]
  --[ Transition__Client_ta( 'rab__87', %v__ ) ]->
   [
   State__Client_ta( <'rab_____1__0_0', %v__>, 'rab__', 'rab__', 'rab__rpc',
                     sym_k__0
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_ta__merged_____1__0_0_____1__0_0__0_1__86:
   [
   State__Client_ta( <'rab_____1__0_0', %v__>, return__var__2, 'rab__',
                     l__0__2, t__0__2
   ),
   Req( l__0__2 ), !ACP__( 'rab__Client_ta', l__0__2, 'rab__accept_rpc' ),
   !ACP__( 'rab__Client_ta', l__0__2, 'rab__accept_rpc' )
   ]
  --[ Transition__Client_ta( 'rab__86', %v__ ) ]->
   [
   State__Client_ta( <'rab_____1__0_0__0_1', %v__>, 'rab__', 'rab__',
                     l__0__2, t__0__2
   ),
   Ack( l__0__2 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_ta__merged_____1__0_0__0_1_____3__85:
   [
   State__Client_ta( <'rab_____1__0_0__0_1', %v__>, return__var__4, 'rab__',
                     l__0__4, t__0__4
   )
   ]
  --[
  Transition__Client_ta( 'rab__85', %v__ ),
  Loop__Start( 'rab__Client_ta__6' )
  ]->
   [
   State__Client_ta( <'rab_____3', %v__>, 'rab__', 'rab__', 'rab__', t__0__4
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_ta__merged_____3_____3__0_1__83:
   [
   State__Client_ta( <'rab_____3', %v__>, return__var__7, 'rab__', 'rab__',
                     t__0__7
   ),
   Invoke( 'rab__rpc', n__2__7, n__1__7, n__0__7 ),
   !ACP__( 'rab__Client_ta', 'rab__rpc', 'rab__' ),
   !NEq__( n__2__7, 'rab__sign_image' )
   ]
  --[
  Transition__Client_ta( 'rab__83', %v__ ),
  InValidName__Client_ta( n__2__7 )
  ]->
   [
   State__Client_ta( <'rab_____3__0_1', %v__>, 'rab__',
                     <n__0__7, n__1__7, n__2__7>, 'rab__', t__0__7
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_ta__merged_____3_____4__81:
   [
   State__Client_ta( <'rab_____3', %v__>, return__var__44, 'rab__', 'rab__',
                     t__0__44
   ),
   Exit( 'rab__rpc' ), !ACP__( 'rab__Client_ta', 'rab__rpc', 'rab__' )
   ]
  --[
  Transition__Client_ta( 'rab__81', %v__ ),
  Loop__Finish( 'rab__Client_ta__6' )
  ]->
   [
   State__Client_ta( <'rab_____4', %v__>, 'rab__', 'rab__', 'rab__',
                     t__0__44
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_ta__event_____4_____5__47:
   [
   State__Client_ta( <'rab_____4', %v__>, return__var__47, 'rab__', 'rab__',
                     t__0__47
   )
   ]
  --[ Transition__Client_ta( 'rab__47', %v__ ), ClientTAClose( ) ]->
   [
   State__Client_ta( <'rab_____5', %v__>, 'rab__', 'rab__', 'rab__',
                     t__0__47
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Client_ta__repeat_____3__0_1_____3__43:
   [
   State__Client_ta( <'rab_____3__0_1', %v__>, return__var__43,
                     <m__0__43, m__1__43, m__2__43>, 'rab__', t__0__43
   )
   ]
  --[
  Transition__Client_ta( 'rab__43', %v__ ),
  Loop__Back( 'rab__Client_ta__6' )
  ]->
   [
   State__Client_ta( <'rab_____3', (%v__%+%1)>, return__var__43, 'rab__',
                     'rab__', t__0__43
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

restriction Init__:
  "∀ x #i #j. ((Init__( x ) @ #i) ∧ (Init__( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) Equality_gen:
   [ ] --> [ !Eq__( x, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) NEquality_gen:
   [ ] --[ NEq___( x, y ) ]-> [ !NEq__( x, y ) ]

  /* has exactly the trivial AC variant */

restriction NEquality_rule:
  "∀ x #i. (NEq___( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

lemma AlwaysStarts__ [reuse, use_induction]:
  all-traces
  "∀ x #i.
    (Loop__Back( x ) @ #i) ⇒ (∃ #j. (Loop__Start( x ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Loop__Back( x ) @ #i) ∧ ∀ #j. (Loop__Start( x ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma AlwaysStartsWhenEnds__ [reuse, use_induction]:
  all-traces
  "∀ x #i.
    (Loop__Finish( x ) @ #i) ⇒ (∃ #j. (Loop__Start( x ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Loop__Finish( x ) @ #i) ∧ ∀ #j. (Loop__Start( x ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma transition__Client [reuse, use_induction]:
  all-traces
  "∀ x %i #j #k.
    ((Transition__Client( x, %i ) @ #j) ∧
     (Transition__Client( x, %i ) @ #k)) ⇒
    (#j = #k)"
/*
guarded formula characterizing all counter-examples:
"∃ x %i #j #k.
  (Transition__Client( x, %i ) @ #j) ∧ (Transition__Client( x, %i ) @ #k)
 ∧
  ¬(#j = #k)"
*/
by sorry

lemma transition__Server [reuse, use_induction]:
  all-traces
  "∀ x %i #j #k.
    ((Transition__Server( x, %i ) @ #j) ∧
     (Transition__Server( x, %i ) @ #k)) ⇒
    (#j = #k)"
/*
guarded formula characterizing all counter-examples:
"∃ x %i #j #k.
  (Transition__Server( x, %i ) @ #j) ∧ (Transition__Server( x, %i ) @ #k)
 ∧
  ¬(#j = #k)"
*/
by sorry

lemma transition__Client_ta [reuse, use_induction]:
  all-traces
  "∀ x %i #j #k.
    ((Transition__Client_ta( x, %i ) @ #j) ∧
     (Transition__Client_ta( x, %i ) @ #k)) ⇒
    (#j = #k)"
/*
guarded formula characterizing all counter-examples:
"∃ x %i #j #k.
  (Transition__Client_ta( x, %i ) @ #j) ∧
  (Transition__Client_ta( x, %i ) @ #k)
 ∧
  ¬(#j = #k)"
*/
by sorry

lemma Correspondence:
  all-traces
  "∀ x #j.
    (ImgRecvValid( x ) @ #j) ⇒ (∃ #i. (ImgSend( x ) @ #i) ∧ (#i < #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (ImgRecvValid( x ) @ #j) ∧ ∀ #i. (ImgSend( x ) @ #i) ⇒ ¬(#i < #j)"
*/
simplify
solve( State__Server( <'rab_____6__0_2', %v__>, return__var__29, 'rab__',
                      <l__0__29, l__1__29, l__2__29>, t__0__29
       ) ▶₀ #j )
  case Server__merged_____6__0_1__1_0_____6__0_2__58_case_1
  solve( !Eq__( z, true ) ▶₁ #j )
    case Equality_gen
    solve( splitEqs(1) )
      case split_case_2
      solve( File__Server( 'rab____secret__pub', pk(x.1) ) ▶₆ #vr.1 )
        case Server__secret__pub
        solve( !KU( sign(x, ~n) ) @ #vk.1 )
          case Client__merged_____6__0_4__0_2_____6__0_5__0_1__71_case_2
          solve( Loop__Start( 'rab__Client_ta__6' ) @ #j.1 )
            case Client_ta__merged_____1__0_0__0_1_____3__85
            solve( State__Client_ta( <'rab_____1__0_0__0_1', %v__>, return__var__4,
                                     'rab__', l__0__4, t__0__4
                   ) ▶₀ #j.1 )
              case Client_ta__merged_____1__0_0_____1__0_0__0_1__86
              solve( State__Client( <'rab_____6__0_4__0_2', %v__>, return__var__28,
                                    'rab__rpc',
                                    <l__0__28, l__1__28, l__2__28, l__3__28, l__4__28, l__1__37, l__2__37>,
                                    <t__0__37, t__1__37, t__2__37>
                     ) ▶₀ #vr.11 )
                case Client__merged_____6_____6__0_4__0_2__85_case_1
                solve( Invoke( 'rab__rpc', 'rab__sign_image', n__1__7,
                               'rab____secret__priv'
                       ) ▶₁ #vr.12 )
                  case Client__merged_____6_____6__0_4__0_2__85_case_1
                  solve( File__Client_ta( 'rab____secret__priv', enc(z, ~n.3) ) ▶₃ #vr.12 )
                    case Client_ta__secret__priv
                    solve( State__Client( <'rab_____6__0_4__0_2', %v__>, return__var__28,
                                          'rab__rpc',
                                          <l__0__28, l__1__28, l__2__28, l__3__28, l__4__28, l__5__28, 
                                           l__6__28>,
                                          <t__0__28, t__1__28, t__2__28>
                           ) ▶₀ #vr.33 )
                      case Client__merged_____6_____6__0_4__0_2__85_case_1
                      solve( Loop__Start( 'rab__Client__13' ) @ #j.2 )
                        case Client__merged_____4__0_1__0_2_____6__89
                        solve( State__Client( <'rab_____4__0_1__0_2', %v__>, return__var__9,
                                              m__0__9, <l__0__9, l__1__9>, <t__0__9, t__1__9, t__2__9>
                               ) ▶₀ #j.2 )
                          case Client__merged_____4__0_1_____4__0_1__0_2__91
                          solve( Invoke( 'rab__rpc', 'rab__sign_image', x, 'rab____secret__priv'
                                 ) ▶₁ #vr.34 )
                            case Client__merged_____6_____6__0_4__0_2__85_case_1
                            solve( Loop__Start( 'rab__Client__13' ) @ #j.3 )
                              case Client__merged_____4__0_1__0_2_____6__89
                              solve( State__Client( <'rab_____4__0_1__0_2', %v__>, return__var__9,
                                                    m__0__9, <l__0__9, l__1__9>, <t__0__9, t__1__9, t__2__9>
                                     ) ▶₀ #j.3 )
                                case Client__merged_____4__0_1_____4__0_1__0_2__91
                                solve( File__Client_ta( 'rab____secret__priv', enc(~n.1, t__0__7)
                                       ) ▶₃ #vr.34 )
                                  case Client_ta__merged_____3_____3__0_1__88_case_1
                                  solve( State__Client_ta( <'rab_____3__0_1', %v__>, return__var__7,
                                                           <m__0__43, m__1__43, m__2__43>, 'rab__', ~n.4
                                         ) ▶₀ #vr.36 )
                                    case Client_ta__merged_____3_____3__0_1__88_case_1
                                    solve( Chid__Client( ~n.5, 'rab__rpc' ) ▶₁ #vr.44 )
                                      case Client__merged_____4__0_1_____4__0_1__0_2__91
                                      solve( Chid__Client( ~n.5, 'rab__rpc' ) ▶₁ #vr.50 )
                                        case Client__merged_____6_____6__0_4__0_2__85_case_1
                                        solve( !KU( ~n ) @ #vk.2 )
                                          case Client__merged_____6_____6__0_4__0_2__85
                                          solve( Loop__Start( 'rab__Client__13' ) @ #j.3 )
                                            case Client__merged_____4__0_1__0_2_____6__89
                                            solve( State__Client( <'rab_____4__0_1__0_2', %v__>,
                                                                  return__var__9, m__0__9, <l__0__9, l__1__9>,
                                                                  <t__0__9, t__1__9, t__2__9>
                                                   ) ▶₀ #j.3 )
                                              case Client__merged_____4__0_1_____4__0_1__0_2__91
                                              SOLVED // trace found
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma Reachable:
  exists-trace
  "∃ x #i #j #k.
    ((ClientClose( ) @ #j) ∧ (ClientTAClose( ) @ #k)) ∧
    (ImgRecvValid( x ) @ #i)"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i #j #k.
  (ClientClose( ) @ #j) ∧
  (ClientTAClose( ) @ #k) ∧
  (ImgRecvValid( x ) @ #i)"
*/
by sorry





















/*
WARNING: the following wellformedness checks failed!

Unbound variables
=================

  rule `Equality_gen' has unbound variables: 
    x
  
  rule `NEquality_gen' has unbound variables: 
    x, y

Facts occur in the left-hand-side but not in any right-hand-side 
=================================================================

  1. in rule "Server__merged_____6_____9__64":  factName `False' arity: 0 multiplicity: Linear

Derivation Checks
=================

  Derivation checks timed out.
  Use --derivcheck-timeout=INT to configure timeout.
  Set to 0 to deactivate for no timeout.
*/

/*
Generated from:
Tamarin version 1.10.0
Maude version 3.3
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2025-03-30 20:19:50.453495971 UTC
*/

end

==============================================================================
summary of summaries:

analyzed: tamarin_models/camserver_opt.spthy

  processing time: 1063.25s
  
  WARNING: 4 wellformedness check failed!
           The analysis results might be wrong!
  
  AlwaysStarts__ (all-traces): analysis incomplete (1 steps)
  AlwaysStartsWhenEnds__ (all-traces): analysis incomplete (1 steps)
  transition__Client (all-traces): analysis incomplete (1 steps)
  transition__Server (all-traces): analysis incomplete (1 steps)
  transition__Client_ta (all-traces): analysis incomplete (1 steps)
  Correspondence (all-traces): falsified - found trace (25 steps)
  Reachable (exists-trace): analysis incomplete (1 steps)

==============================================================================
