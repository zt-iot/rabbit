theory rabbit begin

// Function signature and definition of the equational theory E

builtins: natural-numbers
functions: fst/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<loc__1, loc__0>) = loc__1,
    fst(<x.1, x.2>) = x.1,
    snd(<loc__1, loc__0>) = loc__0,
    snd(<x.1, x.2>) = x.2,
    verify(sign(loc__1, loc__0), loc__1, pk(loc__0)) = true







rule (modulo E) Const__priv_key_alice:
   [ Fr( priv_key_alice ) ]
  --[
  Init__( 'rab__Const__priv_key_alice' ),
  Init__( <'rab__Const__priv_key_alice', priv_key_alice> ),
  !Const__( 'rab__priv_key_alice', priv_key_alice )
  ]->
   [ !Const__( 'rab__priv_key_alice', priv_key_alice ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system[role=system]:
   [ ]
  --[ Init__( 'rab__system' ) ]->
   [
   State__Alice( <'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__',
                 'rab__'
   ),
   State__Bob( <'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__',
               'rab__'
   ),
   !ACP__GEN__( 'rab__system__', 'rab__rab' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__0[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__0' ) ]->
   [ !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__1[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__1' ) ]->
   [ !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__send' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__2[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__2' ) ]->
   [ !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__3[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__3' ) ]->
   [ !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__send' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____0_____5__0_1__37[role=Alice]:
   [
   State__Alice( <'rab_____0', param, %v__>, return__var__0, 'rab__',
                 'rab__', 'rab__'
   ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__0 ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__10 ), Fr( n__0__3 )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____0', %v__ ) ]->
   [
   State__Alice( <'rab_____5__0_1', param, %v__>, 'rab__', 'rab__',
                 <sign(n__0__3, priv_key_alice__10), sign(n__0__3, priv_key_alice__10), 
                  n__0__3>,
                 priv_key_alice__0
   ),
   Out( n__0__3 ), Out( sign(n__0__3, priv_key_alice__10) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____5__0_1_____7__25[role=Alice]:
   [
   State__Alice( <'rab_____5__0_1', param, %v__>, return__var__13, 'rab__',
                 <l__0__13, l__1__13, l__2__13>, t__0__13
   )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____5__0_1', %v__ ),
  MsgSend( l__2__13 )
  ]->
   [
   State__Alice( <'rab_____7', param, %v__>, 'rab__', 'rab__',
                 <l__1__13, l__2__13>, t__0__13
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____7_____7__0_1__24[role=Alice]:
   [
   State__Alice( <'rab_____7', param, %v__>, return__var__15, 'rab__',
                 <l__0__15, l__1__15>, t__0__15
   ),
   !ACP__( <'rab__Alice', param>, 'rab__udp', 'rab__send' )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____7', %v__ ) ]->
   [
   State__Alice( <'rab_____7__0_1', param, %v__>, 'rab__', 'rab__',
                 <<l__1__15, l__0__15>, 'rab__udp', l__0__15, l__1__15>, t__0__15
   ),
   Store( 'rab__udp', <l__1__15, l__0__15> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____7__0_1_____11__23[role=Alice]:
   [
   State__Alice( <'rab_____7__0_1', param, %v__>, return__var__17, 'rab__',
                 <l__0__17, l__1__17, l__2__17, l__3__17>, t__0__17
   )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____7__0_1', %v__ ),
  AliceClose( )
  ]->
   [
   State__Alice( <'rab_____11', param, %v__>, 'rab__', 'rab__', 'rab__',
                 t__0__17
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____0_____2__1_0__39[role=Bob]:
   [
   State__Bob( <'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__',
               'rab__'
   ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__0 )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____0', %v__ ) ]->
   [
   State__Bob( <'rab_____2__1_0', param, %v__>, 'rab__', 'rab__',
               <'rab__udp', 'rab__'>, pk(priv_key_alice__0)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____0_____2__0_0__38[role=Bob]:
   [
   State__Bob( <'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__',
               'rab__'
   ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__0 )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____0', %v__ ) ]->
   [
   State__Bob( <'rab_____2__0_0', param, %v__>, 'rab__', 'rab__',
               <'rab__udp', 'rab__'>, pk(priv_key_alice__0)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____2__0_0_____3__35[role=Bob]:
   [
   State__Bob( <'rab_____2__0_0', param, %v__>, return__var__3, 'rab__',
               <l__0__3, l__1__3>, t__0__3
   ),
   Store( l__0__3, n__0__3 ),
   !ACP__( <'rab__Bob', param>, l__0__3, 'rab__recv' )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____2__0_0', %v__ ) ]->
   [
   State__Bob( <'rab_____3', param, %v__>, 'rab__', 'rab__', n__0__3,
               t__0__3
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____2__1_0_____3__32[role=Bob]:
   [
   State__Bob( <'rab_____2__1_0', param, %v__>, return__var__8, 'rab__',
               <l__0__8, l__1__8>, t__0__8
   ),
   Store( l__0__8, n__0__8 ), In( n__1__8 ),
   !ACP__( <'rab__Bob', param>, l__0__8, 'rab__recv' )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____2__1_0', %v__ ) ]->
   [
   State__Bob( <'rab_____3', param, %v__>, 'rab__', 'rab__', n__1__8,
               t__0__8
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____3_____4__1_1__29[role=Bob]:
   [
   State__Bob( <'rab_____3', param, %v__>, return__var__12, 'rab__',
               l__0__12, t__0__12
   ),
   !NEq__( verify(snd(l__0__12), fst(l__0__12), t__0__12), true )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____3', %v__ ),
  IntegrityFail( fst(l__0__12) )
  ]->
   [
   State__Bob( <'rab_____4__1_1', param, %v__>, 'rab__', 'rab__',
               <verify(snd(l__0__12), fst(l__0__12), t__0__12), l__0__12>, t__0__12
   )
   ]

  /*
  rule (modulo AC) Bob__merged_____3_____4__1_1__29[role=Bob]:
     [
     State__Bob( <'rab_____3', param, %v__>, return__var__12, 'rab__',
                 l__0__12, t__0__12
     ),
     !NEq__( z, true )
     ]
    --[
    Transition__( <'rab__Bob', param>, 'rab_____3', %v__ ),
    IntegrityFail( z.1 )
    ]->
     [
     State__Bob( <'rab_____4__1_1', param, %v__>, 'rab__', 'rab__',
                 <z, l__0__12>, t__0__12
     )
     ]
    variants (modulo AC)
    1. l__0__12
             = l__0__12.16
       t__0__12
             = t__0__12.19
       z     = verify(snd(l__0__12.16), fst(l__0__12.16), t__0__12.19)
       z.1   = fst(l__0__12.16)
    
    2. l__0__12
             = <z.17, sign(z.17, x.22)>
       t__0__12
             = pk(x.22)
       z     = true
       z.1   = z.17
    
    3. l__0__12
             = <z.45, x.71>
       t__0__12
             = t__0__12.38
       z     = verify(x.71, z.45, t__0__12.38)
       z.1   = z.45
  */

rule (modulo E) Bob__merged_____3_____4__0_1__28[role=Bob]:
   [
   State__Bob( <'rab_____3', param, %v__>, return__var__12, 'rab__',
               l__0__12, t__0__12
   ),
   !Eq__( verify(snd(l__0__12), fst(l__0__12), t__0__12), true )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____3', %v__ ),
  IntegritySuccess( fst(l__0__12) )
  ]->
   [
   State__Bob( <'rab_____4__0_1', param, %v__>, 'rab__', 'rab__',
               <verify(snd(l__0__12), fst(l__0__12), t__0__12), l__0__12>, t__0__12
   )
   ]

  /*
  rule (modulo AC) Bob__merged_____3_____4__0_1__28[role=Bob]:
     [
     State__Bob( <'rab_____3', param, %v__>, return__var__12, 'rab__',
                 l__0__12, t__0__12
     ),
     !Eq__( z, true )
     ]
    --[
    Transition__( <'rab__Bob', param>, 'rab_____3', %v__ ),
    IntegritySuccess( z.1 )
    ]->
     [
     State__Bob( <'rab_____4__0_1', param, %v__>, 'rab__', 'rab__',
                 <z, l__0__12>, t__0__12
     )
     ]
    variants (modulo AC)
    1. l__0__12
             = l__0__12.16
       t__0__12
             = t__0__12.19
       z     = verify(snd(l__0__12.16), fst(l__0__12.16), t__0__12.19)
       z.1   = fst(l__0__12.16)
    
    2. l__0__12
             = <z.17, sign(z.17, x.22)>
       t__0__12
             = pk(x.22)
       z     = true
       z.1   = z.17
    
    3. l__0__12
             = <z.45, x.71>
       t__0__12
             = t__0__12.38
       z     = verify(x.71, z.45, t__0__12.38)
       z.1   = z.45
  */

rule (modulo E) Bob__merged_____4__0_1_____8__25[role=Bob]:
   [
   State__Bob( <'rab_____4__0_1', param, %v__>, return__var__15, 'rab__',
               <l__0__15, l__1__15>, t__0__15
   )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____4__0_1', %v__ ), BobClose( )
  ]->
   [
   State__Bob( <'rab_____8', param, %v__>, 'rab__', 'rab__', 'rab__',
               t__0__15
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____4__1_1_____8__24[role=Bob]:
   [
   State__Bob( <'rab_____4__1_1', param, %v__>, return__var__18, 'rab__',
               <l__0__18, l__1__18>, t__0__18
   )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____4__1_1', %v__ ), BobClose( )
  ]->
   [
   State__Bob( <'rab_____8', param, %v__>, 'rab__', 'rab__', 'rab__',
               t__0__18
   )
   ]

  /* has exactly the trivial AC variant */

restriction Init__:
  "∀ x #i #j. ((Init__( x ) @ #i) ∧ (Init__( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) Equality_gen:
   [ ] --> [ !Eq__( x, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) NEquality_gen:
   [ ] --[ NEq___( x, y ) ]-> [ !NEq__( x, y ) ]

  /* has exactly the trivial AC variant */

restriction NEquality_rule:
  "∀ x #i. (NEq___( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

lemma AlwaysStarts__ [reuse, use_induction]:
  all-traces
  "∀ x p #i.
    (Loop__Back( x, p ) @ #i) ⇒
    (∃ #j. (Loop__Start( x, p ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x p #i.
  (Loop__Back( x, p ) @ #i)
 ∧
  ∀ #j. (Loop__Start( x, p ) @ #j) ⇒ ¬(#j < #i)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (Loop__Start( x, p ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    by solve( Loop__Back( x, p ) @ #i )
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma AlwaysStartsWhenEnds__ [reuse, use_induction]:
  all-traces
  "∀ x p #i.
    (Loop__Finish( x, p ) @ #i) ⇒
    (∃ #j. (Loop__Start( x, p ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x p #i.
  (Loop__Finish( x, p ) @ #i)
 ∧
  ∀ #j. (Loop__Start( x, p ) @ #j) ⇒ ¬(#j < #i)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (Loop__Start( x, p ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    by solve( Loop__Finish( x, p ) @ #i )
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma TransitionOnce__ [reuse, use_induction]:
  all-traces
  "∀ x p %i #j #k.
    ((Transition__( x, p, %i ) @ #j) ∧ (Transition__( x, p, %i ) @ #k)) ⇒
    (#j = #k)"
/*
guarded formula characterizing all counter-examples:
"∃ x p %i #j #k.
  (Transition__( x, p, %i ) @ #j) ∧ (Transition__( x, p, %i ) @ #k)
 ∧
  ¬(#j = #k)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (#j < #k)  ∥ (#k < #j) )
    case case_1
    solve( Transition__( x, p, %i ) @ #j )
      case Alice__merged_____0_____5__0_1__37
      solve( State__Alice( <'rab_____0', param, %i>, return__var__0, 'rab__',
                           'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_alice', priv_key_alice__0 ) ▶₁ #j )
          case Const__priv_key_alice
          solve( !Const__( 'rab__priv_key_alice', priv_key_alice__10 ) ▶₂ #j )
            case Const__priv_key_alice
            solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
              case Alice__merged_____0_____5__0_1__37
              solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                   'rab__', 'rab__', 'rab__'
                     ) ▶₀ #k )
                case Init__system
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____5__0_1_____7__25
      solve( State__Alice( <'rab_____5__0_1', param, %i>, return__var__13,
                           'rab__', <l__0__13, l__1__13, l__2__13>, t__0__13
             ) ▶₀ #j )
        case Alice__merged_____0_____5__0_1__37
        solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____5__0_1', %1
               ) @ #k )
          case Alice__merged_____5__0_1_____7__25
          solve( State__Alice( <'rab_____5__0_1', 'rab__rab', %1>, return__var__13,
                               'rab__', <l__0__13, l__1__13, l__2__13>, t__0__13
                 ) ▶₀ #k )
            case Alice__merged_____0_____5__0_1__37
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Alice__merged_____7__0_1_____11__23
      solve( State__Alice( <'rab_____7__0_1', param, %i>, return__var__17,
                           'rab__', <l__0__17, l__1__17, l__2__17, l__3__17>, t__0__17
             ) ▶₀ #j )
        case Alice__merged_____7_____7__0_1__24
        solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_1', %1
               ) @ #k )
          case Alice__merged_____7__0_1_____11__23
          solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>, return__var__17,
                               'rab__', <l__0__17, l__1__17, l__2__17, l__3__17>, t__0__17
                 ) ▶₀ #k )
            case Alice__merged_____7_____7__0_1__24
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Alice__merged_____7_____7__0_1__24
      solve( State__Alice( <'rab_____7', param, %i>, return__var__15, 'rab__',
                           <l__0__15, l__1__15>, t__0__15
             ) ▶₀ #j )
        case Alice__merged_____5__0_1_____7__25
        solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__send'
               ) ▶₁ #j )
          case Init__system__ACP__3
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7', %1 ) @ #k )
            case Alice__merged_____7_____7__0_1__24
            solve( State__Alice( <'rab_____7', 'rab__rab', %1>, return__var__15,
                                 'rab__', <l__0__15, l__1__15>, t__0__15
                   ) ▶₀ #k )
              case Alice__merged_____5__0_1_____7__25
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____0_____2__0_0__38
      solve( State__Bob( <'rab_____0', param, %i>, return__var__0, 'rab__',
                         'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_alice', priv_key_alice__0 ) ▶₁ #j )
          case Const__priv_key_alice
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
            case Bob__merged_____0_____2__0_0__38
            solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                               'rab__', 'rab__', 'rab__'
                   ) ▶₀ #k )
              case Init__system
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____0_____2__1_0__39
            by solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                  'rab__', 'rab__', 'rab__'
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Bob__merged_____0_____2__1_0__39
      solve( State__Bob( <'rab_____0', param, %i>, return__var__0, 'rab__',
                         'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_alice', priv_key_alice__0 ) ▶₁ #j )
          case Const__priv_key_alice
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
            case Bob__merged_____0_____2__0_0__38
            by solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                  'rab__', 'rab__', 'rab__'
                      ) ▶₀ #k )
          next
            case Bob__merged_____0_____2__1_0__39
            solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                               'rab__', 'rab__', 'rab__'
                   ) ▶₀ #k )
              case Init__system
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____2__0_0_____3__35
      solve( State__Bob( <'rab_____2__0_0', param, %i>, return__var__3,
                         'rab__', <l__0__3, l__1__3>, t__0__3
             ) ▶₀ #j )
        case Bob__merged_____0_____2__0_0__38
        solve( Store( 'rab__udp', n__0__3 ) ▶₁ #j )
          case Alice__merged_____7_____7__0_1__24
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__0
            solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____2__0_0', %1
                   ) @ #k )
              case Bob__merged_____2__0_0_____3__35
              solve( State__Bob( <'rab_____2__0_0', 'rab__rab', %1>, return__var__3,
                                 'rab__', <l__0__3, l__1__3>, t__0__3
                     ) ▶₀ #k )
                case Bob__merged_____0_____2__0_0__38
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____2__1_0_____3__32
      solve( State__Bob( <'rab_____2__1_0', param, %i>, return__var__8,
                         'rab__', <l__0__8, l__1__8>, t__0__8
             ) ▶₀ #j )
        case Bob__merged_____0_____2__1_0__39
        solve( Store( 'rab__udp', n__0__8 ) ▶₁ #j )
          case Alice__merged_____7_____7__0_1__24
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__0
            solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____2__1_0', %1
                   ) @ #k )
              case Bob__merged_____2__1_0_____3__32
              solve( State__Bob( <'rab_____2__1_0', 'rab__rab', %1>, return__var__8,
                                 'rab__', <l__0__8, l__1__8>, t__0__8
                     ) ▶₀ #k )
                case Bob__merged_____0_____2__1_0__39
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____3_____4__0_1__28
      solve( State__Bob( <'rab_____3', param, %i>, return__var__12, 'rab__',
                         l__0__12, t__0__12
             ) ▶₀ #j )
        case Bob__merged_____2__0_0_____3__35
        solve( !Eq__( true, true ) ▶₁ #j )
          case Equality_gen
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____3', %1 ) @ #k )
            case Bob__merged_____3_____4__0_1__28
            solve( State__Bob( <'rab_____3', 'rab__rab', %1>, return__var__12,
                               'rab__', l__0__12, t__0__12
                   ) ▶₀ #k )
              case Bob__merged_____2__0_0_____3__35
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____3_____4__1_1__29
            by solve( State__Bob( <'rab_____3', 'rab__rab', %1>, return__var__12,
                                  'rab__', l__0__12, t__0__12
                      ) ▶₀ #k )
          qed
        qed
      next
        case Bob__merged_____2__1_0_____3__32
        solve( !Eq__( z, true ) ▶₁ #j )
          case Equality_gen
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____3', %1 ) @ #k )
            case Bob__merged_____3_____4__0_1__28
            solve( State__Bob( <'rab_____3', 'rab__rab', %1>, return__var__12,
                               'rab__', l__0__12, t__0__12
                   ) ▶₀ #k )
              case Bob__merged_____2__1_0_____3__32
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____3_____4__1_1__29
            by solve( State__Bob( <'rab_____3', 'rab__rab', %1>, return__var__12,
                                  'rab__', l__0__12, t__0__12
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Bob__merged_____3_____4__1_1__29
      solve( State__Bob( <'rab_____3', param, %i>, return__var__12, 'rab__',
                         l__0__12, t__0__12
             ) ▶₀ #j )
        case Bob__merged_____2__0_0_____3__35
        solve( !NEq__( true, true ) ▶₁ #j )
          case NEquality_gen
          by contradiction /* from formulas */
        qed
      next
        case Bob__merged_____2__1_0_____3__32
        solve( !NEq__( z, true ) ▶₁ #j )
          case NEquality_gen
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____3', %1 ) @ #k )
            case Bob__merged_____3_____4__0_1__28
            by solve( State__Bob( <'rab_____3', 'rab__rab', %1>, return__var__12,
                                  'rab__', l__0__12.1, t__0__12
                      ) ▶₀ #k )
          next
            case Bob__merged_____3_____4__1_1__29
            solve( State__Bob( <'rab_____3', 'rab__rab', %1>, return__var__12,
                               'rab__', l__0__12.1, t__0__12
                   ) ▶₀ #k )
              case Bob__merged_____2__1_0_____3__32
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____4__0_1_____8__25
      solve( State__Bob( <'rab_____4__0_1', param, %i>, return__var__15,
                         'rab__', <l__0__15, l__1__15>, t__0__15
             ) ▶₀ #j )
        case Bob__merged_____3_____4__0_1__28_case_1
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____4__0_1', %1
               ) @ #k )
          case Bob__merged_____4__0_1_____8__25
          solve( State__Bob( <'rab_____4__0_1', 'rab__rab', %1>, return__var__15,
                             'rab__', <l__0__15, l__1__15>, t__0__15
                 ) ▶₀ #k )
            case Bob__merged_____3_____4__0_1__28
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____3_____4__0_1__28_case_2
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____4__0_1', %1
               ) @ #k )
          case Bob__merged_____4__0_1_____8__25
          solve( State__Bob( <'rab_____4__0_1', 'rab__rab', %1>, return__var__15,
                             'rab__', <l__0__15, l__1__15>, t__0__15
                 ) ▶₀ #k )
            case Bob__merged_____3_____4__0_1__28
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Bob__merged_____4__1_1_____8__24
      solve( State__Bob( <'rab_____4__1_1', param, %i>, return__var__18,
                         'rab__', <l__0__18, l__1__18>, t__0__18
             ) ▶₀ #j )
        case Bob__merged_____3_____4__1_1__29
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____4__1_1', %1
               ) @ #k )
          case Bob__merged_____4__1_1_____8__24
          solve( State__Bob( <'rab_____4__1_1', 'rab__rab', %1>, return__var__18,
                             'rab__', <l__0__18.1, l__1__18.1>, t__0__18
                 ) ▶₀ #k )
            case Bob__merged_____3_____4__1_1__29
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Transition__( x, p, %i ) @ #j )
      case Alice__merged_____0_____5__0_1__37
      solve( State__Alice( <'rab_____0', param, %i>, return__var__0, 'rab__',
                           'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_alice', priv_key_alice__0 ) ▶₁ #j )
          case Const__priv_key_alice
          solve( !Const__( 'rab__priv_key_alice', priv_key_alice__10 ) ▶₂ #j )
            case Const__priv_key_alice
            solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
              case Alice__merged_____0_____5__0_1__37
              solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                   'rab__', 'rab__', 'rab__'
                     ) ▶₀ #k )
                case Init__system
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____5__0_1_____7__25
      solve( State__Alice( <'rab_____5__0_1', param, %i>, return__var__13,
                           'rab__', <l__0__13, l__1__13, l__2__13>, t__0__13
             ) ▶₀ #j )
        case Alice__merged_____0_____5__0_1__37
        solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____5__0_1', %1
               ) @ #k )
          case Alice__merged_____5__0_1_____7__25
          solve( State__Alice( <'rab_____5__0_1', 'rab__rab', %1>, return__var__13,
                               'rab__', <l__0__13, l__1__13, l__2__13>, t__0__13
                 ) ▶₀ #k )
            case Alice__merged_____0_____5__0_1__37
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Alice__merged_____7__0_1_____11__23
      solve( State__Alice( <'rab_____7__0_1', param, %i>, return__var__17,
                           'rab__', <l__0__17, l__1__17, l__2__17, l__3__17>, t__0__17
             ) ▶₀ #j )
        case Alice__merged_____7_____7__0_1__24
        solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_1', %1
               ) @ #k )
          case Alice__merged_____7__0_1_____11__23
          solve( State__Alice( <'rab_____7__0_1', 'rab__rab', %1>, return__var__17,
                               'rab__', <l__0__17, l__1__17, l__2__17, l__3__17>, t__0__17
                 ) ▶₀ #k )
            case Alice__merged_____7_____7__0_1__24
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Alice__merged_____7_____7__0_1__24
      solve( State__Alice( <'rab_____7', param, %i>, return__var__15, 'rab__',
                           <l__0__15, l__1__15>, t__0__15
             ) ▶₀ #j )
        case Alice__merged_____5__0_1_____7__25
        solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__send'
               ) ▶₁ #j )
          case Init__system__ACP__3
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7', %1 ) @ #k )
            case Alice__merged_____7_____7__0_1__24
            solve( State__Alice( <'rab_____7', 'rab__rab', %1>, return__var__15,
                                 'rab__', <l__0__15, l__1__15>, t__0__15
                   ) ▶₀ #k )
              case Alice__merged_____5__0_1_____7__25
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____0_____2__0_0__38
      solve( State__Bob( <'rab_____0', param, %i>, return__var__0, 'rab__',
                         'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_alice', priv_key_alice__0 ) ▶₁ #j )
          case Const__priv_key_alice
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
            case Bob__merged_____0_____2__0_0__38
            solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                               'rab__', 'rab__', 'rab__'
                   ) ▶₀ #k )
              case Init__system
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____0_____2__1_0__39
            by solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                  'rab__', 'rab__', 'rab__'
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Bob__merged_____0_____2__1_0__39
      solve( State__Bob( <'rab_____0', param, %i>, return__var__0, 'rab__',
                         'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_alice', priv_key_alice__0 ) ▶₁ #j )
          case Const__priv_key_alice
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
            case Bob__merged_____0_____2__0_0__38
            by solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                  'rab__', 'rab__', 'rab__'
                      ) ▶₀ #k )
          next
            case Bob__merged_____0_____2__1_0__39
            solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                               'rab__', 'rab__', 'rab__'
                   ) ▶₀ #k )
              case Init__system
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____2__0_0_____3__35
      solve( State__Bob( <'rab_____2__0_0', param, %i>, return__var__3,
                         'rab__', <l__0__3, l__1__3>, t__0__3
             ) ▶₀ #j )
        case Bob__merged_____0_____2__0_0__38
        solve( Store( 'rab__udp', n__0__3 ) ▶₁ #j )
          case Alice__merged_____7_____7__0_1__24
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__0
            solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____2__0_0', %1
                   ) @ #k )
              case Bob__merged_____2__0_0_____3__35
              solve( State__Bob( <'rab_____2__0_0', 'rab__rab', %1>, return__var__3,
                                 'rab__', <l__0__3, l__1__3>, t__0__3
                     ) ▶₀ #k )
                case Bob__merged_____0_____2__0_0__38
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____2__1_0_____3__32
      solve( State__Bob( <'rab_____2__1_0', param, %i>, return__var__8,
                         'rab__', <l__0__8, l__1__8>, t__0__8
             ) ▶₀ #j )
        case Bob__merged_____0_____2__1_0__39
        solve( Store( 'rab__udp', n__0__8 ) ▶₁ #j )
          case Alice__merged_____7_____7__0_1__24
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__0
            solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____2__1_0', %1
                   ) @ #k )
              case Bob__merged_____2__1_0_____3__32
              solve( State__Bob( <'rab_____2__1_0', 'rab__rab', %1>, return__var__8,
                                 'rab__', <l__0__8, l__1__8>, t__0__8
                     ) ▶₀ #k )
                case Bob__merged_____0_____2__1_0__39
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____3_____4__0_1__28
      solve( State__Bob( <'rab_____3', param, %i>, return__var__12, 'rab__',
                         l__0__12, t__0__12
             ) ▶₀ #j )
        case Bob__merged_____2__0_0_____3__35
        solve( !Eq__( true, true ) ▶₁ #j )
          case Equality_gen
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____3', %1 ) @ #k )
            case Bob__merged_____3_____4__0_1__28
            solve( State__Bob( <'rab_____3', 'rab__rab', %1>, return__var__12,
                               'rab__', l__0__12, t__0__12
                   ) ▶₀ #k )
              case Bob__merged_____2__0_0_____3__35
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____3_____4__1_1__29
            by solve( State__Bob( <'rab_____3', 'rab__rab', %1>, return__var__12,
                                  'rab__', l__0__12, t__0__12
                      ) ▶₀ #k )
          qed
        qed
      next
        case Bob__merged_____2__1_0_____3__32
        solve( !Eq__( z, true ) ▶₁ #j )
          case Equality_gen
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____3', %1 ) @ #k )
            case Bob__merged_____3_____4__0_1__28
            solve( State__Bob( <'rab_____3', 'rab__rab', %1>, return__var__12,
                               'rab__', l__0__12, t__0__12
                   ) ▶₀ #k )
              case Bob__merged_____2__1_0_____3__32
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____3_____4__1_1__29
            by solve( State__Bob( <'rab_____3', 'rab__rab', %1>, return__var__12,
                                  'rab__', l__0__12, t__0__12
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Bob__merged_____3_____4__1_1__29
      solve( State__Bob( <'rab_____3', param, %i>, return__var__12, 'rab__',
                         l__0__12, t__0__12
             ) ▶₀ #j )
        case Bob__merged_____2__0_0_____3__35
        solve( !NEq__( true, true ) ▶₁ #j )
          case NEquality_gen
          by contradiction /* from formulas */
        qed
      next
        case Bob__merged_____2__1_0_____3__32
        solve( !NEq__( z, true ) ▶₁ #j )
          case NEquality_gen
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____3', %1 ) @ #k )
            case Bob__merged_____3_____4__0_1__28
            by solve( State__Bob( <'rab_____3', 'rab__rab', %1>, return__var__12,
                                  'rab__', l__0__12.1, t__0__12
                      ) ▶₀ #k )
          next
            case Bob__merged_____3_____4__1_1__29
            solve( State__Bob( <'rab_____3', 'rab__rab', %1>, return__var__12,
                               'rab__', l__0__12.1, t__0__12
                   ) ▶₀ #k )
              case Bob__merged_____2__1_0_____3__32
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____4__0_1_____8__25
      solve( State__Bob( <'rab_____4__0_1', param, %i>, return__var__15,
                         'rab__', <l__0__15, l__1__15>, t__0__15
             ) ▶₀ #j )
        case Bob__merged_____3_____4__0_1__28_case_1
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____4__0_1', %1
               ) @ #k )
          case Bob__merged_____4__0_1_____8__25
          solve( State__Bob( <'rab_____4__0_1', 'rab__rab', %1>, return__var__15,
                             'rab__', <l__0__15, l__1__15>, t__0__15
                 ) ▶₀ #k )
            case Bob__merged_____3_____4__0_1__28
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____3_____4__0_1__28_case_2
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____4__0_1', %1
               ) @ #k )
          case Bob__merged_____4__0_1_____8__25
          solve( State__Bob( <'rab_____4__0_1', 'rab__rab', %1>, return__var__15,
                             'rab__', <l__0__15, l__1__15>, t__0__15
                 ) ▶₀ #k )
            case Bob__merged_____3_____4__0_1__28
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Bob__merged_____4__1_1_____8__24
      solve( State__Bob( <'rab_____4__1_1', param, %i>, return__var__18,
                         'rab__', <l__0__18, l__1__18>, t__0__18
             ) ▶₀ #j )
        case Bob__merged_____3_____4__1_1__29
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____4__1_1', %1
               ) @ #k )
          case Bob__merged_____4__1_1_____8__24
          solve( State__Bob( <'rab_____4__1_1', 'rab__rab', %1>, return__var__18,
                             'rab__', <l__0__18.1, l__1__18.1>, t__0__18
                 ) ▶₀ #k )
            case Bob__merged_____3_____4__1_1__29
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
qed

lemma Correspondence:
  all-traces
  "∀ msg #j.
    (IntegritySuccess( msg ) @ #j) ⇒
    (∃ #i. (MsgSend( msg ) @ #i) ∧ (#i < #j))"
/*
guarded formula characterizing all counter-examples:
"∃ msg #j.
  (IntegritySuccess( msg ) @ #j)
 ∧
  ∀ #i. (MsgSend( msg ) @ #i) ⇒ ¬(#i < #j)"
*/
simplify
solve( State__Bob( <'rab_____3', param, %v__>, return__var__12, 'rab__',
                   l__0__12, t__0__12
       ) ▶₀ #j )
  case Bob__merged_____2__0_0_____3__35
  by contradiction /* from formulas */
next
  case Bob__merged_____2__1_0_____3__32
  solve( !Eq__( z, true ) ▶₁ #j )
    case Equality_gen
    solve( !KU( sign(msg, ~n) ) @ #vk.2 )
      case Alice__merged_____0_____5__0_1__37
      by contradiction /* from formulas */
    next
      case c_sign
      by solve( !KU( ~n ) @ #vk.3 )
    qed
  qed
qed

lemma Reachable:
  exists-trace "∃ #i #j. (AliceClose( ) @ #i) ∧ (BobClose( ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j. (AliceClose( ) @ #i) ∧ (BobClose( ) @ #j)"
*/
simplify
solve( State__Alice( <'rab_____7__0_1', param, %v__>, return__var__17,
                     'rab__', <l__0__17, l__1__17, l__2__17, l__3__17>, t__0__17
       ) ▶₀ #i )
  case Alice__merged_____7_____7__0_1__24
  solve( BobClose( ) @ #j )
    case Bob__merged_____4__0_1_____8__25
    solve( State__Bob( <'rab_____4__0_1', param, %v__>, return__var__15,
                       'rab__', <l__0__15, l__1__15>, t__0__15
           ) ▶₀ #j )
      case Bob__merged_____3_____4__0_1__28_case_1
      SOLVED // trace found
    qed
  qed
qed















/*
WARNING: the following wellformedness checks failed!

Unbound variables
=================

  rule `Equality_gen' has unbound variables: 
    x
  
  rule `NEquality_gen' has unbound variables: 
    x, y

Inexistant lemma actions
========================

  lemma `AlwaysStarts__' references action 
    fact "Loop__Back" (arity 2, Linear) 
  but no rule has such an action.
  
  lemma `AlwaysStarts__' references action 
    fact "Loop__Start" (arity 2, Linear) 
  but no rule has such an action.
  
  lemma `AlwaysStartsWhenEnds__' references action 
    fact "Loop__Finish" (arity 2, Linear) 
  but no rule has such an action.
  
  lemma `AlwaysStartsWhenEnds__' references action 
    fact "Loop__Start" (arity 2, Linear) 
  but no rule has such an action.

Message Derivation Checks
=========================

  The variables of the following rule(s) are not derivable from their premises, you may be performing unintended pattern matching.

Rule Equality_gen: 
Failed to derive Variable(s): x

Rule NEquality_gen: 
Failed to derive Variable(s): x, y
*/

/*
Generated from:
Tamarin version 1.10.0
Maude version 3.3
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2025-05-25 12:24:05.599972296 UTC
*/

end

==============================================================================
summary of summaries:

analyzed: tamarin_models/digital_signature_tt_pp.spthy

  processing time: 3.56s
  
  WARNING: 7 wellformedness check failed!
           The analysis results might be wrong!
  
  AlwaysStarts__ (all-traces): verified (6 steps)
  AlwaysStartsWhenEnds__ (all-traces): verified (6 steps)
  TransitionOnce__ (all-traces): verified (152 steps)
  Correspondence (all-traces): verified (7 steps)
  Reachable (exists-trace): verified (5 steps)

==============================================================================
