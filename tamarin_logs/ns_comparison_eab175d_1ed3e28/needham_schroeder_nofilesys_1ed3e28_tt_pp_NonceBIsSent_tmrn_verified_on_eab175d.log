theory rabbit begin

// Function signature and definition of the equational theory E

builtins: natural-numbers
functions: dec/2, enc/2, fst/1, pair/2, pk/1, sign/2, snd/1, true/0,
           verify/3
equations:
    dec(enc(loc__1, pk(loc__0)), loc__0) = loc__1,
    fst(<loc__1, loc__0>) = loc__1,
    fst(<x.1, x.2>) = x.1,
    snd(<loc__1, loc__0>) = loc__0,
    snd(<x.1, x.2>) = x.2,
    verify(sign(loc__1, loc__0), loc__1, pk(loc__0)) = true







rule (modulo E) Const__nonce_a:
   [ Fr( nonce_a ) ]
  --[
  Init__( 'rab__Const__nonce_a' ),
  Init__( <'rab__Const__nonce_a', nonce_a> ),
  !Const__( 'rab__nonce_a', nonce_a )
  ]->
   [ !Const__( 'rab__nonce_a', nonce_a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Const__nonce_b:
   [ Fr( nonce_b ) ]
  --[
  Init__( 'rab__Const__nonce_b' ),
  Init__( <'rab__Const__nonce_b', nonce_b> ),
  !Const__( 'rab__nonce_b', nonce_b )
  ]->
   [ !Const__( 'rab__nonce_b', nonce_b ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Const__priv_key_alice:
   [ Fr( priv_key_alice ) ]
  --[
  Init__( 'rab__Const__priv_key_alice' ),
  Init__( <'rab__Const__priv_key_alice', priv_key_alice> ),
  !Const__( 'rab__priv_key_alice', priv_key_alice )
  ]->
   [ !Const__( 'rab__priv_key_alice', priv_key_alice ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Const__priv_key_bob:
   [ Fr( priv_key_bob ) ]
  --[
  Init__( 'rab__Const__priv_key_bob' ),
  Init__( <'rab__Const__priv_key_bob', priv_key_bob> ),
  !Const__( 'rab__priv_key_bob', priv_key_bob )
  ]->
   [ !Const__( 'rab__priv_key_bob', priv_key_bob ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system[role=system]:
   [ ]
  --[ Init__( 'rab__system' ) ]->
   [
   State__Keyprovider( <'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__',
                       'rab__', 'rab__'
   ),
   State__Alice( <'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__',
                 'rab__'
   ),
   State__Bob( <'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__',
               'rab__'
   ),
   !ACP__GEN__( 'rab__system__', 'rab__rab' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__0[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__0' ) ]->
   [ !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__1[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__1' ) ]->
   [ !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__send' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__2[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__2' ) ]->
   [ !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__3[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__3' ) ]->
   [ !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__send' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__4[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__4' ) ]->
   [ !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__key_chan', 'rab__recv' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__5[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__5' ) ]->
   [ !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__key_chan', 'rab__send' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__6[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__6' ) ]->
   [
   !ACP__( <'rab__Keyprovider', 'rab__rab'>, 'rab__key_chan', 'rab__recv' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__7[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__7' ) ]->
   [
   !ACP__( <'rab__Keyprovider', 'rab__rab'>, 'rab__key_chan', 'rab__send' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Keyprovider__merged_____0_____2__6[role=Keyprovider]:
   [
   State__Keyprovider( <'rab_____0', param, %v__>, return__var__0, 'rab__',
                       'rab__', 'rab__'
   ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__0 ),
   !ACP__( <'rab__Keyprovider', param>, 'rab__key_chan', 'rab__send' )
   ]
  --[ Transition__( <'rab__Keyprovider', param>, 'rab_____0', %v__ ) ]->
   [
   State__Keyprovider( <'rab_____2', param, %v__>, 'rab__', 'rab__',
                       'rab__', pk(priv_key_bob__0)
   ),
   Store( 'rab__key_chan', pk(priv_key_bob__0) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____0_____1__0_0__99[role=Alice]:
   [
   State__Alice( <'rab_____0', param, %v__>, return__var__0, 'rab__',
                 'rab__', 'rab__'
   )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____0', %v__ ) ]->
   [
   State__Alice( <'rab_____1__0_0', param, %v__>, 'rab__', 'rab__',
                 <'rab__key_chan', 'rab__'>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____0_____1__1_0__98[role=Alice]:
   [
   State__Alice( <'rab_____0', param, %v__>, return__var__0, 'rab__',
                 'rab__', 'rab__'
   )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____0', %v__ ) ]->
   [
   State__Alice( <'rab_____1__1_0', param, %v__>, 'rab__', 'rab__',
                 <'rab__key_chan', 'rab__'>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____1__0_0_____6__97[role=Alice]:
   [
   State__Alice( <'rab_____1__0_0', param, %v__>, return__var__2, 'rab__',
                 <l__0__2, l__1__2>, 'rab__'
   ),
   Store( l__0__2, n__0__2 ),
   !ACP__( <'rab__Alice', param>, l__0__2, 'rab__recv' ),
   !Const__( 'rab__nonce_a', nonce_a__11 ),
   !Const__( 'rab__nonce_a', nonce_a__18 ),
   !ACP__( <'rab__Alice', param>, 'rab__udp', 'rab__send' )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____1__0_0', %v__ ) ]->
   [
   State__Alice( <'rab_____6', param, %v__>, 'rab__', 'rab__',
                 <enc(<nonce_a__11, 'rab__Alice'>, n__0__2), n__0__2>, 'rab__'
   ),
   Out( enc(<nonce_a__11, 'rab__Alice'>, n__0__2) ),
   Store( 'rab__udp', enc(<nonce_a__11, 'rab__Alice'>, n__0__2) ),
   AliceSendNonceA( nonce_a__18 )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____1__1_0_____6__93[role=Alice]:
   [
   State__Alice( <'rab_____1__1_0', param, %v__>, return__var__7, 'rab__',
                 <l__0__7, l__1__7>, 'rab__'
   ),
   Store( l__0__7, n__0__7 ), In( n__1__7 ),
   !ACP__( <'rab__Alice', param>, l__0__7, 'rab__recv' ),
   !Const__( 'rab__nonce_a', nonce_a__11 ),
   !Const__( 'rab__nonce_a', nonce_a__18 ),
   !ACP__( <'rab__Alice', param>, 'rab__udp', 'rab__send' )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____1__1_0', %v__ ) ]->
   [
   State__Alice( <'rab_____6', param, %v__>, 'rab__', 'rab__',
                 <enc(<nonce_a__11, 'rab__Alice'>, n__1__7), n__1__7>, 'rab__'
   ),
   Out( enc(<nonce_a__11, 'rab__Alice'>, n__1__7) ),
   Store( 'rab__udp', enc(<nonce_a__11, 'rab__Alice'>, n__1__7) ),
   AliceSendNonceA( nonce_a__18 )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____6_____8__1_0__82[role=Alice]:
   [
   State__Alice( <'rab_____6', param, %v__>, return__var__19, 'rab__',
                 <l__0__19, l__1__19>, 'rab__'
   ),
   !Const__( 'rab__nonce_a', nonce_a__19 )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____6', %v__ ),
  AliceSendNonceATag( nonce_a__19 )
  ]->
   [
   State__Alice( <'rab_____8__1_0', param, %v__>, 'rab__', 'rab__',
                 <'rab__udp', 'rab__', l__0__19, l__1__19>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____6_____8__0_0__81[role=Alice]:
   [
   State__Alice( <'rab_____6', param, %v__>, return__var__19, 'rab__',
                 <l__0__19, l__1__19>, 'rab__'
   ),
   !Const__( 'rab__nonce_a', nonce_a__19 )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____6', %v__ ),
  AliceSendNonceATag( nonce_a__19 )
  ]->
   [
   State__Alice( <'rab_____8__0_0', param, %v__>, 'rab__', 'rab__',
                 <'rab__udp', 'rab__', l__0__19, l__1__19>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____8__0_0_____12__0_1__78[role=Alice]:
   [
   State__Alice( <'rab_____8__0_0', param, %v__>, return__var__22, 'rab__',
                 <l__0__22, l__1__22, l__2__22, l__3__22>, 'rab__'
   ),
   Store( l__0__22, n__0__22 ),
   !ACP__( <'rab__Alice', param>, l__0__22, 'rab__recv' ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__31 ),
   !Const__( 'rab__nonce_a', nonce_a__35 ),
   !Const__( 'rab__nonce_a', nonce_a__34 ),
   !Eq__( fst(dec(n__0__22, priv_key_alice__31)), nonce_a__34 )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____8__0_0', %v__ ),
  SecretNonceAlice( nonce_a__35 )
  ]->
   [
   State__Alice( <'rab_____12__0_1', param, %v__>, 'rab__', 'rab__',
                 <snd(dec(n__0__22, priv_key_alice__31)), 
                  fst(dec(n__0__22, priv_key_alice__31)), 
                  dec(n__0__22, priv_key_alice__31), n__0__22, l__2__22, l__3__22>,
                 'rab__'
   )
   ]

  /*
  rule (modulo AC) Alice__merged_____8__0_0_____12__0_1__78[role=Alice]:
     [
     State__Alice( <'rab_____8__0_0', param, %v__>, return__var__22, 'rab__',
                   <l__0__22, l__1__22, l__2__22, l__3__22>, 'rab__'
     ),
     Store( l__0__22, n__0__22 ),
     !ACP__( <'rab__Alice', param>, l__0__22, 'rab__recv' ),
     !Const__( 'rab__priv_key_alice', priv_key_alice__31 ),
     !Const__( 'rab__nonce_a', nonce_a__35 ),
     !Const__( 'rab__nonce_a', nonce_a__34 ), !Eq__( z, nonce_a__34 )
     ]
    --[
    Transition__( <'rab__Alice', param>, 'rab_____8__0_0', %v__ ),
    SecretNonceAlice( nonce_a__35 )
    ]->
     [
     State__Alice( <'rab_____12__0_1', param, %v__>, 'rab__', 'rab__',
                   <z.1, z, z.2, n__0__22, l__2__22, l__3__22>, 'rab__'
     )
     ]
    variants (modulo AC)
    1. n__0__22
             = n__0__22.27
       priv_key_alice__31
             = priv_key_alice__31.31
       z     = fst(dec(n__0__22.27, priv_key_alice__31.31))
       z.1   = snd(dec(n__0__22.27, priv_key_alice__31.31))
       z.2   = dec(n__0__22.27, priv_key_alice__31.31)
    
    2. n__0__22
             = enc(z.47, pk(priv_key_alice__31.35))
       priv_key_alice__31
             = priv_key_alice__31.35
       z     = fst(z.47)
       z.1   = snd(z.47)
       z.2   = z.47
    
    3. n__0__22
             = enc(<z.43, z.45>, pk(priv_key_alice__31.34))
       priv_key_alice__31
             = priv_key_alice__31.34
       z     = z.43
       z.1   = z.45
       z.2   = <z.43, z.45>
  */

rule (modulo E) Alice__merged_____8__1_0_____12__0_1__74[role=Alice]:
   [
   State__Alice( <'rab_____8__1_0', param, %v__>, return__var__27, 'rab__',
                 <l__0__27, l__1__27, l__2__27, l__3__27>, 'rab__'
   ),
   Store( l__0__27, n__0__27 ), In( n__1__27 ),
   !ACP__( <'rab__Alice', param>, l__0__27, 'rab__recv' ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__31 ),
   !Const__( 'rab__nonce_a', nonce_a__35 ),
   !Const__( 'rab__nonce_a', nonce_a__34 ),
   !Eq__( fst(dec(n__1__27, priv_key_alice__31)), nonce_a__34 )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____8__1_0', %v__ ),
  SecretNonceAlice( nonce_a__35 )
  ]->
   [
   State__Alice( <'rab_____12__0_1', param, %v__>, 'rab__', 'rab__',
                 <snd(dec(n__1__27, priv_key_alice__31)), 
                  fst(dec(n__1__27, priv_key_alice__31)), 
                  dec(n__1__27, priv_key_alice__31), n__1__27, l__2__27, l__3__27>,
                 'rab__'
   )
   ]

  /*
  rule (modulo AC) Alice__merged_____8__1_0_____12__0_1__74[role=Alice]:
     [
     State__Alice( <'rab_____8__1_0', param, %v__>, return__var__27, 'rab__',
                   <l__0__27, l__1__27, l__2__27, l__3__27>, 'rab__'
     ),
     Store( l__0__27, n__0__27 ), In( n__1__27 ),
     !ACP__( <'rab__Alice', param>, l__0__27, 'rab__recv' ),
     !Const__( 'rab__priv_key_alice', priv_key_alice__31 ),
     !Const__( 'rab__nonce_a', nonce_a__35 ),
     !Const__( 'rab__nonce_a', nonce_a__34 ), !Eq__( z, nonce_a__34 )
     ]
    --[
    Transition__( <'rab__Alice', param>, 'rab_____8__1_0', %v__ ),
    SecretNonceAlice( nonce_a__35 )
    ]->
     [
     State__Alice( <'rab_____12__0_1', param, %v__>, 'rab__', 'rab__',
                   <z.1, z, z.2, n__1__27, l__2__27, l__3__27>, 'rab__'
     )
     ]
    variants (modulo AC)
    1. n__1__27
             = n__1__27.28
       priv_key_alice__31
             = priv_key_alice__31.32
       z     = fst(dec(n__1__27.28, priv_key_alice__31.32))
       z.1   = snd(dec(n__1__27.28, priv_key_alice__31.32))
       z.2   = dec(n__1__27.28, priv_key_alice__31.32)
    
    2. n__1__27
             = enc(z.48, pk(priv_key_alice__31.36))
       priv_key_alice__31
             = priv_key_alice__31.36
       z     = fst(z.48)
       z.1   = snd(z.48)
       z.2   = z.48
    
    3. n__1__27
             = enc(<z.44, z.46>, pk(priv_key_alice__31.35))
       priv_key_alice__31
             = priv_key_alice__31.35
       z     = z.44
       z.1   = z.46
       z.2   = <z.44, z.46>
  */

rule (modulo E) Alice__merged_____12__0_1_____12__0_3__0_1__66[role=Alice]:
   [
   State__Alice( <'rab_____12__0_1', param, %v__>, return__var__36, 'rab__',
                 <l__0__36, l__1__36, l__2__36, l__3__36, l__4__36, l__5__36>, 'rab__'
   ),
   !ACP__( <'rab__Alice', param>, 'rab__udp', 'rab__send' )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____12__0_1', %v__ ) ]->
   [
   State__Alice( <'rab_____12__0_3__0_1', param, %v__>, 'rab__', 'rab__',
                 <enc(l__0__36, l__5__36), 'rab__udp', enc(l__0__36, l__5__36), l__0__36, 
                  l__1__36, l__2__36, l__3__36, l__4__36, l__5__36>,
                 'rab__'
   ),
   Out( enc(l__0__36, l__5__36) ),
   Store( 'rab__udp', enc(l__0__36, l__5__36) )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____12__0_3__0_1_____12__0_5__61[role=Alice]:
   [
   State__Alice( <'rab_____12__0_3__0_1', param, %v__>, return__var__42,
                 'rab__',
                 <l__0__42, l__1__42, l__2__42, l__3__42, l__4__42, l__5__42, l__6__42, 
                  l__7__42, l__8__42>,
                 'rab__'
   )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____12__0_3__0_1', %v__ ),
  AliceSendNonceBTag( l__3__42 )
  ]->
   [
   State__Alice( <'rab_____12__0_5', param, %v__>, 'rab__', 'rab__',
                 <l__2__42, l__3__42, l__4__42, l__5__42, l__6__42, l__7__42, l__8__42>,
                 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____12__0_5_____20__60[role=Alice]:
   [
   State__Alice( <'rab_____12__0_5', param, %v__>, return__var__44, 'rab__',
                 <l__0__44, l__1__44, l__2__44, l__3__44, l__4__44, l__5__44, l__6__44>,
                 'rab__'
   )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____12__0_5', %v__ ),
  AliceClose( )
  ]->
   [
   State__Alice( <'rab_____20', param, %v__>, 'rab__', 'rab__', 'rab__',
                 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____0_____2__1_0__82[role=Bob]:
   [
   State__Bob( <'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__',
               'rab__'
   )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____0', %v__ ), BobOpen( )
  ]->
   [
   State__Bob( <'rab_____2__1_0', param, %v__>, 'rab__', 'rab__',
               <'rab__udp', 'rab__'>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____0_____2__0_0__81[role=Bob]:
   [
   State__Bob( <'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__',
               'rab__'
   )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____0', %v__ ), BobOpen( )
  ]->
   [
   State__Bob( <'rab_____2__0_0', param, %v__>, 'rab__', 'rab__',
               <'rab__udp', 'rab__'>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____2__0_0_____8__78[role=Bob]:
   [
   State__Bob( <'rab_____2__0_0', param, %v__>, return__var__3, 'rab__',
               <l__0__3, l__1__3>, 'rab__'
   ),
   Store( l__0__3, n__0__3 ),
   !ACP__( <'rab__Bob', param>, l__0__3, 'rab__recv' ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__12 ),
   !ACP__( <'rab__Bob', param>, 'rab__udp', 'rab__send' ),
   !Const__( 'rab__nonce_b', nonce_b__20 ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__13 ),
   !Const__( 'rab__nonce_b', nonce_b__13 )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____2__0_0', %v__ ) ]->
   [
   State__Bob( <'rab_____8', param, %v__>, 'rab__', 'rab__',
               <
                enc(<fst(dec(n__0__3, priv_key_bob__12)), nonce_b__13>,
                    pk(priv_key_alice__13)), 
                fst(dec(n__0__3, priv_key_bob__12)), n__0__3>,
               'rab__'
   ),
   Out( enc(<fst(dec(n__0__3, priv_key_bob__12)), nonce_b__13>,
            pk(priv_key_alice__13))
   ),
   Store( 'rab__udp',
          enc(<fst(dec(n__0__3, priv_key_bob__12)), nonce_b__13>,
              pk(priv_key_alice__13))
   ),
   BobSendNonceB( nonce_b__20 )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) Bob__merged_____2__0_0_____8__78[role=Bob]:
     [
     State__Bob( <'rab_____2__0_0', param, %v__>, return__var__3, 'rab__',
                 <l__0__3, l__1__3>, 'rab__'
     ),
     Store( l__0__3, n__0__3 ),
     !ACP__( <'rab__Bob', param>, l__0__3, 'rab__recv' ),
     !Const__( 'rab__priv_key_bob', priv_key_bob__12 ),
     !ACP__( <'rab__Bob', param>, 'rab__udp', 'rab__send' ),
     !Const__( 'rab__nonce_b', nonce_b__20 ),
     !Const__( 'rab__priv_key_alice', priv_key_alice__13 ),
     !Const__( 'rab__nonce_b', nonce_b__13 )
     ]
    --[ Transition__( <'rab__Bob', param>, 'rab_____2__0_0', %v__ ) ]->
     [
     State__Bob( <'rab_____8', param, %v__>, 'rab__', 'rab__',
                 <enc(<z, nonce_b__13>, pk(priv_key_alice__13)), z, n__0__3>, 'rab__'
     ),
     Out( enc(<z, nonce_b__13>, pk(priv_key_alice__13)) ),
     Store( 'rab__udp', enc(<z, nonce_b__13>, pk(priv_key_alice__13)) ),
     BobSendNonceB( nonce_b__20 )
     ]
    variants (modulo AC)
    1. n__0__3
             = n__0__3.28
       priv_key_bob__12
             = priv_key_bob__12.33
       z     = fst(dec(n__0__3.28, priv_key_bob__12.33))
    
    2. n__0__3
             = enc(x.289, pk(priv_key_bob__12.149))
       priv_key_bob__12
             = priv_key_bob__12.149
       z     = fst(x.289)
    
    3. n__0__3
             = enc(<z.163, x.291>, pk(priv_key_bob__12.150))
       priv_key_bob__12
             = priv_key_bob__12.150
       z     = z.163
    // loop breaker: [1]
  */

rule (modulo E) Bob__merged_____2__1_0_____8__74[role=Bob]:
   [
   State__Bob( <'rab_____2__1_0', param, %v__>, return__var__8, 'rab__',
               <l__0__8, l__1__8>, 'rab__'
   ),
   Store( l__0__8, n__0__8 ), In( n__1__8 ),
   !ACP__( <'rab__Bob', param>, l__0__8, 'rab__recv' ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__12 ),
   !ACP__( <'rab__Bob', param>, 'rab__udp', 'rab__send' ),
   !Const__( 'rab__nonce_b', nonce_b__20 ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__13 ),
   !Const__( 'rab__nonce_b', nonce_b__13 )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____2__1_0', %v__ ) ]->
   [
   State__Bob( <'rab_____8', param, %v__>, 'rab__', 'rab__',
               <
                enc(<fst(dec(n__1__8, priv_key_bob__12)), nonce_b__13>,
                    pk(priv_key_alice__13)), 
                fst(dec(n__1__8, priv_key_bob__12)), n__1__8>,
               'rab__'
   ),
   Out( enc(<fst(dec(n__1__8, priv_key_bob__12)), nonce_b__13>,
            pk(priv_key_alice__13))
   ),
   Store( 'rab__udp',
          enc(<fst(dec(n__1__8, priv_key_bob__12)), nonce_b__13>,
              pk(priv_key_alice__13))
   ),
   BobSendNonceB( nonce_b__20 )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) Bob__merged_____2__1_0_____8__74[role=Bob]:
     [
     State__Bob( <'rab_____2__1_0', param, %v__>, return__var__8, 'rab__',
                 <l__0__8, l__1__8>, 'rab__'
     ),
     Store( l__0__8, n__0__8 ), In( n__1__8 ),
     !ACP__( <'rab__Bob', param>, l__0__8, 'rab__recv' ),
     !Const__( 'rab__priv_key_bob', priv_key_bob__12 ),
     !ACP__( <'rab__Bob', param>, 'rab__udp', 'rab__send' ),
     !Const__( 'rab__nonce_b', nonce_b__20 ),
     !Const__( 'rab__priv_key_alice', priv_key_alice__13 ),
     !Const__( 'rab__nonce_b', nonce_b__13 )
     ]
    --[ Transition__( <'rab__Bob', param>, 'rab_____2__1_0', %v__ ) ]->
     [
     State__Bob( <'rab_____8', param, %v__>, 'rab__', 'rab__',
                 <enc(<z, nonce_b__13>, pk(priv_key_alice__13)), z, n__1__8>, 'rab__'
     ),
     Out( enc(<z, nonce_b__13>, pk(priv_key_alice__13)) ),
     Store( 'rab__udp', enc(<z, nonce_b__13>, pk(priv_key_alice__13)) ),
     BobSendNonceB( nonce_b__20 )
     ]
    variants (modulo AC)
    1. n__1__8
             = n__1__8.29
       priv_key_bob__12
             = priv_key_bob__12.34
       z     = fst(dec(n__1__8.29, priv_key_bob__12.34))
    
    2. n__1__8
             = enc(x.290, pk(priv_key_bob__12.150))
       priv_key_bob__12
             = priv_key_bob__12.150
       z     = fst(x.290)
    
    3. n__1__8
             = enc(<z.164, x.292>, pk(priv_key_bob__12.151))
       priv_key_bob__12
             = priv_key_bob__12.151
       z     = z.164
    // loop breaker: [1]
  */

rule (modulo E) Bob__merged_____8_____10__1_0__62[role=Bob]:
   [
   State__Bob( <'rab_____8', param, %v__>, return__var__21, 'rab__',
               <l__0__21, l__1__21, l__2__21>, 'rab__'
   ),
   !Const__( 'rab__nonce_b', nonce_b__21 )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____8', %v__ ),
  BobSendNonceBTag( nonce_b__21 )
  ]->
   [
   State__Bob( <'rab_____10__1_0', param, %v__>, 'rab__', 'rab__',
               <'rab__udp', 'rab__', l__0__21, l__1__21, l__2__21>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____8_____10__0_0__61[role=Bob]:
   [
   State__Bob( <'rab_____8', param, %v__>, return__var__21, 'rab__',
               <l__0__21, l__1__21, l__2__21>, 'rab__'
   ),
   !Const__( 'rab__nonce_b', nonce_b__21 )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____8', %v__ ),
  BobSendNonceBTag( nonce_b__21 )
  ]->
   [
   State__Bob( <'rab_____10__0_0', param, %v__>, 'rab__', 'rab__',
               <'rab__udp', 'rab__', l__0__21, l__1__21, l__2__21>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____10__0_0_____12__0_1__58[role=Bob]:
   [
   State__Bob( <'rab_____10__0_0', param, %v__>, return__var__24, 'rab__',
               <l__0__24, l__1__24, l__2__24, l__3__24, l__4__24>, 'rab__'
   ),
   Store( l__0__24, n__0__24 ),
   !ACP__( <'rab__Bob', param>, l__0__24, 'rab__recv' ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__33 ),
   !Const__( 'rab__nonce_b', nonce_b__35 ),
   !Const__( 'rab__nonce_b', nonce_b__34 ),
   !Eq__( dec(n__0__24, priv_key_bob__33), nonce_b__34 )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____10__0_0', %v__ ),
  SecretNonceBob( nonce_b__35 )
  ]->
   [
   State__Bob( <'rab_____12__0_1', param, %v__>, 'rab__', 'rab__',
               <dec(n__0__24, priv_key_bob__33), n__0__24, l__2__24, l__3__24, l__4__24
               >,
               'rab__'
   )
   ]

  /*
  rule (modulo AC) Bob__merged_____10__0_0_____12__0_1__58[role=Bob]:
     [
     State__Bob( <'rab_____10__0_0', param, %v__>, return__var__24, 'rab__',
                 <l__0__24, l__1__24, l__2__24, l__3__24, l__4__24>, 'rab__'
     ),
     Store( l__0__24, n__0__24 ),
     !ACP__( <'rab__Bob', param>, l__0__24, 'rab__recv' ),
     !Const__( 'rab__priv_key_bob', priv_key_bob__33 ),
     !Const__( 'rab__nonce_b', nonce_b__35 ),
     !Const__( 'rab__nonce_b', nonce_b__34 ), !Eq__( z, nonce_b__34 )
     ]
    --[
    Transition__( <'rab__Bob', param>, 'rab_____10__0_0', %v__ ),
    SecretNonceBob( nonce_b__35 )
    ]->
     [
     State__Bob( <'rab_____12__0_1', param, %v__>, 'rab__', 'rab__',
                 <z, n__0__24, l__2__24, l__3__24, l__4__24>, 'rab__'
     )
     ]
    variants (modulo AC)
    1. n__0__24
             = n__0__24.25
       priv_key_bob__33
             = priv_key_bob__33.29
       z     = dec(n__0__24.25, priv_key_bob__33.29)
    
    2. n__0__24
             = enc(z.39, pk(priv_key_bob__33.30))
       priv_key_bob__33
             = priv_key_bob__33.30
       z     = z.39
  */

rule (modulo E) Bob__merged_____10__1_0_____12__0_1__54[role=Bob]:
   [
   State__Bob( <'rab_____10__1_0', param, %v__>, return__var__29, 'rab__',
               <l__0__29, l__1__29, l__2__29, l__3__29, l__4__29>, 'rab__'
   ),
   Store( l__0__29, n__0__29 ), In( n__1__29 ),
   !ACP__( <'rab__Bob', param>, l__0__29, 'rab__recv' ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__33 ),
   !Const__( 'rab__nonce_b', nonce_b__35 ),
   !Const__( 'rab__nonce_b', nonce_b__34 ),
   !Eq__( dec(n__1__29, priv_key_bob__33), nonce_b__34 )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____10__1_0', %v__ ),
  SecretNonceBob( nonce_b__35 )
  ]->
   [
   State__Bob( <'rab_____12__0_1', param, %v__>, 'rab__', 'rab__',
               <dec(n__1__29, priv_key_bob__33), n__1__29, l__2__29, l__3__29, l__4__29
               >,
               'rab__'
   )
   ]

  /*
  rule (modulo AC) Bob__merged_____10__1_0_____12__0_1__54[role=Bob]:
     [
     State__Bob( <'rab_____10__1_0', param, %v__>, return__var__29, 'rab__',
                 <l__0__29, l__1__29, l__2__29, l__3__29, l__4__29>, 'rab__'
     ),
     Store( l__0__29, n__0__29 ), In( n__1__29 ),
     !ACP__( <'rab__Bob', param>, l__0__29, 'rab__recv' ),
     !Const__( 'rab__priv_key_bob', priv_key_bob__33 ),
     !Const__( 'rab__nonce_b', nonce_b__35 ),
     !Const__( 'rab__nonce_b', nonce_b__34 ), !Eq__( z, nonce_b__34 )
     ]
    --[
    Transition__( <'rab__Bob', param>, 'rab_____10__1_0', %v__ ),
    SecretNonceBob( nonce_b__35 )
    ]->
     [
     State__Bob( <'rab_____12__0_1', param, %v__>, 'rab__', 'rab__',
                 <z, n__1__29, l__2__29, l__3__29, l__4__29>, 'rab__'
     )
     ]
    variants (modulo AC)
    1. n__1__29
             = n__1__29.26
       priv_key_bob__33
             = priv_key_bob__33.30
       z     = dec(n__1__29.26, priv_key_bob__33.30)
    
    2. n__1__29
             = enc(z.40, pk(priv_key_bob__33.31))
       priv_key_bob__33
             = priv_key_bob__33.31
       z     = z.40
  */

rule (modulo E) Bob__merged_____12__0_1_____19__48[role=Bob]:
   [
   State__Bob( <'rab_____12__0_1', param, %v__>, return__var__36, 'rab__',
               <l__0__36, l__1__36, l__2__36, l__3__36, l__4__36>, 'rab__'
   )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____12__0_1', %v__ ), BobClose( )
  ]->
   [
   State__Bob( <'rab_____19', param, %v__>, 'rab__', 'rab__', 'rab__',
               'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

restriction Init__:
  "∀ x #i #j. ((Init__( x ) @ #i) ∧ (Init__( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) Equality_gen:
   [ ] --> [ !Eq__( x, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) NEquality_gen:
   [ ] --[ NEq___( x, y ) ]-> [ !NEq__( x, y ) ]

  /* has exactly the trivial AC variant */

restriction NEquality_rule:
  "∀ x #i. (NEq___( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

lemma AlwaysStarts__ [reuse, use_induction]:
  all-traces
  "∀ x p #i.
    (Loop__Back( x, p ) @ #i) ⇒
    (∃ #j. (Loop__Start( x, p ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x p #i.
  (Loop__Back( x, p ) @ #i)
 ∧
  ∀ #j. (Loop__Start( x, p ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma AlwaysStartsWhenEnds__ [reuse, use_induction]:
  all-traces
  "∀ x p #i.
    (Loop__Finish( x, p ) @ #i) ⇒
    (∃ #j. (Loop__Start( x, p ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x p #i.
  (Loop__Finish( x, p ) @ #i)
 ∧
  ∀ #j. (Loop__Start( x, p ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma TransitionOnce__ [reuse, use_induction]:
  all-traces
  "∀ x p %i #j #k.
    ((Transition__( x, p, %i ) @ #j) ∧ (Transition__( x, p, %i ) @ #k)) ⇒
    (#j = #k)"
/*
guarded formula characterizing all counter-examples:
"∃ x p %i #j #k.
  (Transition__( x, p, %i ) @ #j) ∧ (Transition__( x, p, %i ) @ #k)
 ∧
  ¬(#j = #k)"
*/
by sorry

lemma SecrecyCanBeEstablishedB_tmrn:
  exists-trace "∃ nb #j. SecretNonceBob( nb ) @ #j"
/*
guarded formula characterizing all satisfying traces:
"∃ nb #j. (SecretNonceBob( nb ) @ #j)"
*/
by sorry

lemma SecrecyCanBeEstablishedA_tmrn:
  exists-trace "∃ na #i. SecretNonceAlice( na ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ na #i. (SecretNonceAlice( na ) @ #i)"
*/
by sorry

lemma NonceBIsSent_tmrn:
  exists-trace "∃ nb #j. BobSendNonceBTag( nb ) @ #j"
/*
guarded formula characterizing all satisfying traces:
"∃ nb #j. (BobSendNonceBTag( nb ) @ #j)"
*/
simplify
solve( BobSendNonceBTag( nb ) @ #j )
  case Bob__merged_____8_____10__0_0__61
  solve( State__Bob( <'rab_____8', param, %v__>, return__var__21, 'rab__',
                     <l__0__21, l__1__21, l__2__21>, 'rab__'
         ) ▶₀ #j )
    case Bob__merged_____2__0_0_____8__78
    solve( !Const__( 'rab__nonce_b', nb ) ▶₁ #j )
      case Const__nonce_b
      solve( splitEqs(1) )
        case split_case_1
        solve( Store( 'rab__udp', enc(<l__1__21, x>, pk(~n.2)) ) ▶₁ #vr )
          case Alice__merged_____1__0_0_____6__97
          solve( Store( 'rab__key_chan', pk(~n.3) ) ▶₁ #vr.8 )
            case Keyprovider__merged_____0_____2__6
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma NonceAIsSent_tmrn:
  exists-trace "∃ na #i. AliceSendNonceATag( na ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ na #i. (AliceSendNonceATag( na ) @ #i)"
*/
by sorry

lemma BobOpenReachable_tmrn:
  exists-trace "∃ #i. BobOpen( ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ #i. (BobOpen( ) @ #i)"
*/
by sorry

lemma NonceSecrecyB_alt:
  all-traces "¬(∃ nb #i #j. (SecretNonceBob( nb ) @ #i) ∧ (K( nb ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ nb #i #j. (SecretNonceBob( nb ) @ #i) ∧ (K( nb ) @ #j)"
*/
by sorry

lemma NonceSecrecyA_alt:
  all-traces
  "¬(∃ na #i #j. (SecretNonceAlice( na ) @ #i) ∧ (K( na ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ na #i #j. (SecretNonceAlice( na ) @ #i) ∧ (K( na ) @ #j)"
*/
by sorry

lemma NonceSecrecyB:
  all-traces
  "∀ nb #i. (SecretNonceBob( nb ) @ #i) ⇒ (¬(∃ #m. K( nb ) @ #m))"
/*
guarded formula characterizing all counter-examples:
"∃ nb #i. (SecretNonceBob( nb ) @ #i) ∧ ∃ #m. (K( nb ) @ #m)"
*/
by sorry

lemma NonceSecrecyA:
  all-traces
  "∀ na #i. (SecretNonceAlice( na ) @ #i) ⇒ (¬(∃ #l. K( na ) @ #l))"
/*
guarded formula characterizing all counter-examples:
"∃ na #i. (SecretNonceAlice( na ) @ #i) ∧ ∃ #l. (K( na ) @ #l)"
*/
by sorry



















/*
WARNING: the following wellformedness checks failed!

Unbound variables
=================

  rule `Equality_gen' has unbound variables: 
    x
  
  rule `NEquality_gen' has unbound variables: 
    x, y

Inexistant lemma actions
========================

  lemma `AlwaysStarts__' references action 
    fact "Loop__Back" (arity 2, Linear) 
  but no rule has such an action.
  
  lemma `AlwaysStarts__' references action 
    fact "Loop__Start" (arity 2, Linear) 
  but no rule has such an action.
  
  lemma `AlwaysStartsWhenEnds__' references action 
    fact "Loop__Finish" (arity 2, Linear) 
  but no rule has such an action.
  
  lemma `AlwaysStartsWhenEnds__' references action 
    fact "Loop__Start" (arity 2, Linear) 
  but no rule has such an action.

Derivation Checks
=================

  Derivation checks timed out.
  Use --derivcheck-timeout=INT to configure timeout.
  Set to 0 to deactivate for no timeout.
*/

/*
Generated from:
Tamarin version 1.10.0
Maude version 3.3
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2025-05-25 12:24:05.599972296 UTC
*/

end

==============================================================================
summary of summaries:

analyzed: tamarin_models/needham_schroeder_nofilesys_1ed3e28f8582996d9f70298530175a72e18fce77_tt_pp.spthy

  processing time: 13.23s
  
  WARNING: 7 wellformedness check failed!
           The analysis results might be wrong!
  
  AlwaysStarts__ (all-traces): analysis incomplete (1 steps)
  AlwaysStartsWhenEnds__ (all-traces): analysis incomplete (1 steps)
  TransitionOnce__ (all-traces): analysis incomplete (1 steps)
  SecrecyCanBeEstablishedB_tmrn (exists-trace): analysis incomplete (1 steps)
  SecrecyCanBeEstablishedA_tmrn (exists-trace): analysis incomplete (1 steps)
  NonceBIsSent_tmrn (exists-trace): verified (8 steps)
  NonceAIsSent_tmrn (exists-trace): analysis incomplete (1 steps)
  BobOpenReachable_tmrn (exists-trace): analysis incomplete (1 steps)
  NonceSecrecyB_alt (all-traces): analysis incomplete (1 steps)
  NonceSecrecyA_alt (all-traces): analysis incomplete (1 steps)
  NonceSecrecyB (all-traces): analysis incomplete (1 steps)
  NonceSecrecyA (all-traces): analysis incomplete (1 steps)

==============================================================================
