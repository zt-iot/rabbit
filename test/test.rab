(*** Success, TyperFail "Unknown identifier foo" *)
(* Loader does not check the channel type existence *)
channel ch : foo

(*** Success, TyperSuccess *)
type ch_ty : channel
channel ch : ch_ty

(*** Success, TyperSuccess *)
equation 42 = 42

(*** Fail "identifier already defined f", TyperFail "Unknown identifier f" *)
(* Error message of loader is wrong *)
equation f(x) = 42

(*** Success, TyperSuccess *)
function add:2
function f:1
equation f(x) = f(add(x,42))

(*** Success, TyperSuccess *)
const c = 42
const f = 4.12
const fresh x
const fresh y<>

(*** Fail "Unknown identifier true", TyperFail "Unknown identifier true" *)
(* true/false is not defined in the parser, therefore they are considered as variables *)
const c = true

(*** Fail "Identifier c is already bound", TyperFail "Identifier c is already bound" *)
const c = 42
const fresh c

(*** Success, TyperSuccess *)
syscall f(a, b, c) { c }

(*** Fail "forbidden identifier s", TyperFail "System call s can be called only at command" *)
(* system call cannot be called without assignment *)
syscall s(a, b, c) { c }
syscall c(a, b) { s(a, b, b) }

(*** Fail "forbidden identifier s", TyperFail "System call s can be called only at command" *)
(* system call cannot be used in equation *)
syscall s(a, b, c) { c }
equation s(1, 2, 3) = 4

(*** Success, TyperSuccess *)
(* function can be called without assignment *)
function f:1
syscall c(a) { f(a) }

(*** Fail "unknown local variable x" *)
(* In [x := s(a)], [x] must be a local variable.
   In [new x in ...], [x] is not a local variable!
*)

syscall s(a) { a }
syscall s2(a) { new x in x := s(a) }

(*** Success, TyperSuccess *)
(* syscall can be called inside syscall definition *)

syscall s(a) { a }
syscall s2(a) { _ := s(a) }

(*** Success, TyperSuccess *)
(* function arguments are local *)

syscall s(a) { a }
syscall s2(a) { a := s(a) }

(*** Success, TyperSuccess *)
(* Minimal process def *)
type client_t : process
process client() : client_t 
{  
  main 
  {
    1
  }
}

(*** Success, TyperSuccess *)
(* Local variable can shadow other ids *)

const fresh a
syscall s(a) { a }

(*** Success, TyperSuccess *)
type client_t : process
type readonly_t : filesys
const fresh priv_k
function pk:1
process client() : client_t
{
  file "foobar" : readonly_t = pk(priv_k)
  main { 1 }
}

(*** Success, TyperSuccess *)
type client_t : process
const fresh x
process client() : client_t
{
  var x = 1 (* local variables can shadow existing vars *)
  main { 1 }
}

(*** Success, TyperSuccess *)
type client_t : process
const fresh x
process client() : client_t
{
  function x(a){ a } (* function name can shadow existing vars *)
  main { 1 }
}

(*** Fail "identifier already defined x", TyperSuccess *)
(* arguments cannot shadow toplevel variables *)
(* Typer allows the shadowing *)
type client_t : process
process client() : client_t
{
  var x = 1
  function f(x){ 1 } (* argument cannot shadow toplevel variable *)
  main { 1 }
}

(*** Verified *)
(* One of the simplest Rabbit code *)

type proc_t 	  : process

process p() : proc_t
{
  main 
  {
    event [::Event()];
    event [::Event2()]
  }
}


system 
  p()
requires  
[
  lemma Reachable :
    reachable ::Event2() ;

  lemma Correspondence :
    corresponds ::Event2() ~> ::Event()
]

(*** Falsified *)
(* One of the simplest Rabbit code *)

type proc_t 	  : process

process p() : proc_t
{
  main 
  {
    event [::Event()]
  }
}


system 
  p()
requires  
[
  lemma Reachable :
    reachable ::Event2()
]

(*** Fail "1 arguments provided while Event requires 0", TyperFail "Object of arity 1 takes 0 arguments" *)
(* One of the simplest Rabbit code *)

type proc_t 	  : process

process p() : proc_t
{
  main 
  {
    event [::Event()]
  }
}


system 
  p()
requires  
[
  lemma Reachable :
    reachable ::Event(1)
]

(*** Fail "unknown local variable x", TyperFail "Unknown identifier x" *)
syscall s() { x := 1 }
