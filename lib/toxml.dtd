<!-- DTD for rabbit-xml -->
<!-- [pcdata] short-cut for #PCDATA -->
<!ELEMENT value (#PCDATA)>

<!-- **system** constists of 
* the prelude part:
    * *ext_const* 	: user-declared constants
    * *ext_func* 	: user-declared functions
    * *ext_eq* 		: user-declared equations
    * *event*  		: user-(implicitly)-declared event facts
    * *channel* 	: defined channels
* and the *process* part 
* later we add *requirements* part -->

<!ELEMENT system (ext_const*,ext_func*,ext_eq*,event*,channel*,process*)>


<!-- [access] for encoding access controls -->
<!ELEMENT access EMPTY>
<!ATTLIST access read CDATA "false">
<!ATTLIST access write CDATA "false">
<!ATTLIST access send CDATA "false">
<!ATTLIST access recv CDATA "false">

<!-- [attack] for encoding possible attacks -->
<!ELEMENT attack EMPTY>
<!ATTLIST attack eavesdrop CDATA "false">
<!ATTLIST attack tamper CDATA "false">
<!ATTLIST attack drop CDATA "false">

<!-- [ext_const] refers to a user-declared constant  -->
<!ELEMENT ext_const EMPTY>
<!ATTLIST ext_const id ID #REQUIRED>
<!ATTLIST ext_const name CDATA #REQUIRED>

<!-- [ext_func] refers to a user-declared function  -->
<!ELEMENT ext_func EMPTY>
<!ATTLIST ext_func id ID #REQUIRED>
<!ATTLIST ext_func name CDATA #REQUIRED>
<!ATTLIST ext_func arity CDATA #REQUIRED>

<!-- [ext_func] refers to a user-declared equation  -->
<!ELEMENT ext_eq (expr,expr)>

<!-- [const] refers to a system constant/macro  -->
<!ELEMENT const (expr)>
<!ATTLIST const id ID #REQUIRED>
<!ATTLIST const name CDATA #REQUIRED>

<!-- [event] refers to a used (implicitly declared) event Fact in process statement -->
<!ELEMENT event EMPTY>
<!ATTLIST event id ID #REQUIRED>
<!ATTLIST event name CDATA #REQUIRED>
<!ATTLIST event arity CDATA #REQUIRED>

<!-- [channel] refers to a defined channel and its allowed attacks -->
<!ELEMENT channel (attack)>
<!ATTLIST channel name CDATA #REQUIRED>
<!ATTLIST channel id ID #REQUIRED>
<!ATTLIST channel channel_class CDATA #REQUIRED>


<!-- * AST for expressions * -->
<!-- [expr] refers to an expression denoting either a value or a channel name -->
<!ELEMENT expr (expr_ext_const|expr_const|expr_var|expr_boolean|expr_string|expr_integer|expr_float|expr_apply|expr_tuple|expr_channel)>

<!ELEMENT expr_ext_const EMPTY>
<!ATTLIST expr_ext_const ext_const_ref IDREF #REQUIRED>
<!ATTLIST expr_ext_const ext_const_name CDATA #REQUIRED>

<!ELEMENT expr_const EMPTY>
<!ATTLIST expr_const const_ref IDREF #REQUIRED>
<!ATTLIST expr_const const_name CDATA #REQUIRED>

<!ELEMENT expr_var EMPTY>
<!ATTLIST expr_var name CDATA #REQUIRED>
<!ATTLIST expr_var frame CDATA #REQUIRED>
<!ATTLIST expr_var de_Bruijn CDATA #REQUIRED>

<!ELEMENT expr_boolean (value)>
<!ELEMENT expr_string (value)>
<!ELEMENT expr_integer (value)>
<!ELEMENT expr_float (value)>

<!ELEMENT expr_apply (expr*)>
<!ATTLIST expr_apply ext_func_ref IDREF #REQUIRED>
<!ATTLIST expr_apply ext_func_name CDATA #REQUIRED>

<!ELEMENT expr_tuple (expr*)>

<!ELEMENT expr_channel EMPTY>
<!ATTLIST expr_channel ch_ref IDREF #REQUIRED>
<!ATTLIST expr_channel ch_name CDATA #REQUIRED>


<!-- * AST for statements * -->
<!-- [event_call] refers to trigerring an event -->
<!ELEMENT event_call (expr*)>
<!ATTLIST event_call event_ref IDREF #REQUIRED>
<!ATTLIST event_call event_name CDATA #REQUIRED>

<!-- [a_stmt] refers to an atomic statement. (in Inaba's thesis, it is called [op].) -->
<!ELEMENT a_stmt (a_stmt_skip|a_stmt_let|a_stmt_call|a_stmt_instruction|a_stmt_ite|a_stmt_for)>

<!ELEMENT a_stmt_skip EMPTY>
<!ELEMENT a_stmt_let (expr_var,expr)>

<!ELEMENT a_stmt_call (expr_var,expr*)>
<!ATTLIST a_stmt_call mem_func_ref IDREF #REQUIRED>
<!ATTLIST a_stmt_call mem_func_name CDATA #REQUIRED>

<!ELEMENT a_stmt_instruction (expr_var,expr*)>
<!ATTLIST a_stmt_instruction ins_name CDATA #REQUIRED>

<!ELEMENT cond (expr)>
<!ELEMENT then (stmt+)>
<!ELEMENT else (stmt+)>
<!ELEMENT a_stmt_ite (cond,then,else)>

<!ELEMENT a_stmt_for (expr_var,stmt*)>
<!ATTLIST a_stmt_for from CDATA #REQUIRED>
<!ATTLIST a_stmt_for to CDATA #REQUIRED>

<!-- [stmt] refers to a general statement. -->
<!ELEMENT stmt (a_stmt,event_call?)>


<!-- * AST for processes * -->
<!ELEMENT process (attack,channel_access*,file*,mem_var*,mem_func*,main)>
<!ATTLIST process id ID #REQUIRED>
<!ATTLIST process name CDATA #REQUIRED>
<!-- <!ATTLIST process lineno CDATA #REQUIRED> -->

<!ELEMENT channel_access (access)>
<!ATTLIST channel_access channel_ref IDREF #REQUIRED>
<!ATTLIST channel_access channel_name CDATA #REQUIRED>

<!ELEMENT file (path,initial_data,attack,access)>
<!ELEMENT path (#PCDATA)>
<!ELEMENT initial_data (expr)>

<!ELEMENT mem_var (expr)>
<!ATTLIST mem_var name CDATA #REQUIRED>

<!ELEMENT mem_func (ARGUMENT*,body,return)>
<!ATTLIST mem_func id ID #REQUIRED>
<!ATTLIST mem_func name CDATA #REQUIRED>

<!ELEMENT ARGUMENT EMPTY>
<!ATTLIST ARGUMENT name CDATA #REQUIRED>

<!ELEMENT body (stmt+)>
<!ELEMENT return (expr_var)>

<!ELEMENT main (body)>

