(* Minimal working rabbit code for testing purpose *)
function {A : Type, B : Type} fst(pair : (A, B)) : A 
function {A : Type, B : Type} snd(pair : (A, B)) : B
equation fst ((x, y)) = x
equation snd ((x, y)) = y

type abc : process[(server.S, server.I)] (* process does not have a parameter type, only a security level *)

process server[abc]()
{  
	var a : string = "a"
	var b : string = "b"
	var c : string = "c"

	main 
  	{
        c := "d";
        new kj : key[(server.S, server.I), Sym, string] in 

        var k : string = "haha" in
        case 
        [A(x), B(y), C(z), D(j)] ->
            a := x; 
            case [B(k), A(a), C(x)] -> c := k end;
            put [D("aaa")];
            case [D(ko)] -> skip end;
            b := z
        end
        
  	}
}



(***********)
system 
	server()
requires  [
  lemma Reachable1 :
    exists-trace "Ex #j  . A() @ #j" ;
  lemma Reachable2 :
    exists-trace "Ex #j  . B() @ #j" ;
  lemma Reachable3 :
    exists-trace "Ex #j  . AAA() @ #j" ;
  lemma Reachable4 :
    exists-trace "Ex #j  . BBB() @ #j" ;
  lemma Reachable5 :
    exists-trace "Ex x #j  . Took(x) @ #j" ;
  lemma Reachable :
    exists-trace "Ex x #i #j  . ClientClose() @ #j & ImgRecvValid(x) @ #i" ;

  lemma Correspondence :
    all-traces "All x #j  . ImgRecvValid(x) @ #j ==> Ex #i . ImgSend (x) @ i & i < j" 
  ]

