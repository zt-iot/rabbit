theory rabbit

begin
builtins: natural-numbers


// The signature of our model:






// Initializing the gloval constants and access policy rules:




// Constants:



// Add model inits: Alice,Bob


rule Init_system[role="system"]
  : [  ]
    --[ Init('system') ]->
    [ !ACP_GEN_('system_', 'str:'),
      State('Alice', 'idx_0', 'str:', %1, '()'),
      State('Bob', 'idx_0', 'str:', %1, '()') ]


// Access control of Alice:chan



// Fact: !ACP_(<'Alice', 'str:'>, 'chan', 'str:')


rule Init_system_ACP_0[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_0') ]->
    [ !ACP_(<'Alice', 'str:'>, 'chan', 'str:') ]


// Access control of Bob:chan



// Fact: !ACP_(<'Bob', 'str:'>, 'chan', 'str:')


rule Init_system_ACP_1[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_1') ]->
    [ !ACP_(<'Bob', 'str:'>, 'chan', 'str:') ]

// Model:  Alice


rule Alice_guarded_skip_rep_idx_1_idx_2_13[role="Alice"]
  : [ State('Alice', 'idx_1', param, %v_, rho_7),
      False() ]
    --[ Transition_(<'Alice', param>, 'idx_1', %v_),
        Loop_Finish(<'Alice', param>, 'idx_0') ]->
    [ State('Alice', 'idx_2', param, %v_, '()') ]

rule Alice_guarded_event_idx_1__0_0_idx_1__0_0__0_1_12[role="Alice"]
  : [ State('Alice', 'idx_1__0_0', param, %v_, rho_2),
      !ACP_(<'Alice', param>, 'chan', 'str:'),
      Ping('chan', n_0_2) ]
    --[ Transition_(<'Alice', param>, 'idx_1__0_0', %v_),
        Pong(n_0_2) ]->
    [ State('Alice', 'idx_1__0_0__0_1', param, %v_, <'()', n_0_2>) ]

rule Alice_put_case_out_idx_1__0_0__0_1_idx_1__0_1_11[role="Alice"]
  : [ State('Alice', 'idx_1__0_0__0_1', param, %v_, <rho_4, m_0_4>),
      !ACP_(<'Alice', param>, 'chan', 'str:') ]
    --[ Transition_(<'Alice', param>, 'idx_1__0_0__0_1', %v_) ]->
    [ State('Alice', 'idx_1__0_1', param, %v_, '()'),
      Pong('chan', m_0_4) ]

rule Alice_repeat_idx_1__0_1_idx_1_6[role="Alice"]
  : [ State('Alice', 'idx_1__0_1', param, %v_, rho_6) ]
    --[ Transition_(<'Alice', param>, 'idx_1__0_1', %v_),
        Loop_Back(<'Alice', param>, 'idx_0') ]->
    [ State('Alice', 'idx_1', param, %v_ %+ %1, rho_6) ]

rule Alice_guarded_idx_1_idx_1__0_0_1[role="Alice"]
  : [ State('Alice', 'idx_1', param, %v_, rho_1) ]
    --[ Transition_(<'Alice', param>, 'idx_1', %v_) ]->
    [ State('Alice', 'idx_1__0_0', param, %v_, '()') ]

rule Alice_repeat_in_idx_0_idx_1_0[role="Alice"]
  : [ State('Alice', 'idx_0', param, %v_, rho_0) ]
    --[ Transition_(<'Alice', param>, 'idx_0', %v_),
        Loop_Start(<'Alice', param>, 'idx_0') ]->
    [ State('Alice', 'idx_1', param, %v_, '()') ]


// Model:  Bob


rule Bob_guarded_new_intr_idx_1_idx_1__0_2_25[role="Bob"]
  : [ State('Bob', 'idx_1', param, %v_, rho_1),
      Fr(n_0_2) ]
    --[ Transition_(<'Bob', param>, 'idx_1', %v_),
        Ping(n_0_2) ]->
    [ State('Bob', 'idx_1__0_2', param, %v_, <'()', n_0_2>) ]

rule Bob_guarded_skip_rep_idx_1_idx_2_24[role="Bob"]
  : [ State('Bob', 'idx_1', param, %v_, rho_13),
      False() ]
    --[ Transition_(<'Bob', param>, 'idx_1', %v_),
        Loop_Finish(<'Bob', param>, 'idx_0') ]->
    [ State('Bob', 'idx_2', param, %v_, '()') ]

rule Bob_guarded_event_ca_idx_1__0_3_idx_1__0_5_22[role="Bob"]
  : [ State('Bob', 'idx_1__0_3', param, %v_, <rho_5, m_0_5>),
      !ACP_(<'Bob', param>, 'chan', 'str:'),
      Pong('chan', m_0_5) ]
    --[ Transition_(<'Bob', param>, 'idx_1__0_3', %v_),
        Valid(m_0_5) ]->
    [ State('Bob', 'idx_1__0_5', param, %v_, '()') ]

rule Bob_guarded_event_ca_idx_1__0_3_idx_1__0_5_21[role="Bob"]
  : [ State('Bob', 'idx_1__0_3', param, %v_, <rho_8, m_0_8>),
      !ACP_(<'Bob', param>, 'chan', 'str:'),
      Pong('chan', n_0_8) ]
    --[ Transition_(<'Bob', param>, 'idx_1__0_3', %v_),
        Invalid(m_0_8, n_0_8),
        NEq_(m_0_8, n_0_8) ]->
    [ State('Bob', 'idx_1__0_5', param, %v_, '()') ]

rule Bob_repeat_idx_1__0_5_idx_1_12[role="Bob"]
  : [ State('Bob', 'idx_1__0_5', param, %v_, rho_12) ]
    --[ Transition_(<'Bob', param>, 'idx_1__0_5', %v_),
        Loop_Back(<'Bob', param>, 'idx_0') ]->
    [ State('Bob', 'idx_1', param, %v_ %+ %1, rho_12) ]

rule Bob_put_idx_1__0_2_idx_1__0_3_4[role="Bob"]
  : [ State('Bob', 'idx_1__0_2', param, %v_, <rho_4, m_0_4>),
      !ACP_(<'Bob', param>, 'chan', 'str:') ]
    --[ Transition_(<'Bob', param>, 'idx_1__0_2', %v_) ]->
    [ State('Bob', 'idx_1__0_3', param, %v_, <'()', m_0_4>),
      Ping('chan', m_0_4) ]

rule Bob_repeat_in_idx_0_idx_1_0[role="Bob"]
  : [ State('Bob', 'idx_0', param, %v_, rho_0) ]
    --[ Transition_(<'Bob', param>, 'idx_0', %v_),
        Loop_Start(<'Bob', param>, 'idx_0') ]->
    [ State('Bob', 'idx_1', param, %v_, '()') ]

restriction Init_ : " All x #i #j . Init(x) @ #i & Init(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"

lemma AlwaysStarts_[reuse,use_induction]:
      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma AlwaysStartsWhenEnds_[reuse,use_induction]:
      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma TransitionOnce_[reuse,use_induction]:
      "All x p %i #j #k . Transition_(x, p, %i) @ #j &
        Transition_(x, p, %i) @ #k ==> #j = #k"


lemma Corresponds2 : all-traces "All new_0 #time_1 . Valid(new_0)@#time_1 ==> Ex  #time_2 . Ping(new_0)@#time_2 & #time_2 < #time_1 "
lemma Corresponds : all-traces "All new_0 #time_1 . Pong(new_0)@#time_1 ==> Ex  #time_2 . Ping(new_0)@#time_2 & #time_2 < #time_1 "
lemma Reachable : exists-trace "Ex new_0 #time_0 . Valid(new_0)@#time_0 "
end

