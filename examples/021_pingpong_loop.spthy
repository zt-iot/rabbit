theory rabbit

begin
builtins: natural-numbers


// The signature of our model:






// Initializing the gloval constants and access policy rules:




// Constants:



// Add model inits: Alice,Bob


rule Init_system[role="system"] : []--[Init_('rab_system')]->[!ACP_GEN_('rab_system_', 'rab_rab'), State_Alice(<'rab___0', 'rab_rab', %1>, 'rab_', 'rab_', 'rab_', 'rab_'), State_Bob(<'rab___0', 'rab_rab', %1>, 'rab_', 'rab_', 'rab_', 'rab_')] 


// Access control of Alice:chan



// Fact: !ACP_(<'rab_Alice', 'rab_rab'>, 'rab_chan', 'rab_')


rule Init_system_ACP_0[role="system"] : [!ACP_GEN_('rab_system_', 'rab_rab')]--[Init_('rab_system_ACP_0')]->[!ACP_(<'rab_Alice', 'rab_rab'>, 'rab_chan', 'rab_')] 


// Access control of Bob:chan



// Fact: !ACP_(<'rab_Bob', 'rab_rab'>, 'rab_chan', 'rab_')


rule Init_system_ACP_1[role="system"] : [!ACP_GEN_('rab_system_', 'rab_rab')]--[Init_('rab_system_ACP_1')]->[!ACP_(<'rab_Bob', 'rab_rab'>, 'rab_chan', 'rab_')] 

// Model:  Alice


rule Alice_repeat_in_guarded___0___1_0_0_14[role="Alice"] : [State_Alice(<'rab___0', param, %v_>, return_var_0, 'rab_', 'rab_', 'rab_')]--[Transition_(<'rab_Alice', param>, 'rab___0', %v_), Loop_Start(<'rab_Alice', param>, 'rab___0')]->[State_Alice(<'rab___1_0_0', param, %v_>, 'rab_', 'rab_', 'rab_', 'rab_')] 

rule Alice_guarded_skip_repeat_out___1___2_13[role="Alice"] : [State_Alice(<'rab___1', param, %v_>, return_var_7, 'rab_', 'rab_', 'rab_'), False()]--[Transition_(<'rab_Alice', param>, 'rab___1', %v_), Loop_Finish(<'rab_Alice', param>, 'rab___0')]->[State_Alice(<'rab___2', param, %v_>, 'rab_', 'rab_', 'rab_', 'rab_')] 

rule Alice_guarded_event___1_0_0___1_0_0_0_1_12[role="Alice"] : [State_Alice(<'rab___1_0_0', param, %v_>, return_var_2, 'rab_', 'rab_', 'rab_'), !ACP_(<'rab_Alice', param>, 'rab_chan', 'rab_'), Ping('rab_chan', n_0_2)]--[Transition_(<'rab_Alice', param>, 'rab___1_0_0', %v_), Pong(n_0_2)]->[State_Alice(<'rab___1_0_0_0_1', param, %v_>, 'rab_', n_0_2, 'rab_', 'rab_')] 

rule Alice_put_case_out___1_0_0_0_1___1_0_1_11[role="Alice"] : [State_Alice(<'rab___1_0_0_0_1', param, %v_>, return_var_4, m_0_4, 'rab_', 'rab_'), !ACP_(<'rab_Alice', param>, 'rab_chan', 'rab_')]--[Transition_(<'rab_Alice', param>, 'rab___1_0_0_0_1', %v_)]->[State_Alice(<'rab___1_0_1', param, %v_>, 'rab_', 'rab_', 'rab_', 'rab_'), Pong('rab_chan', m_0_4)] 

rule Alice_repeat___1_0_1___1_6[role="Alice"] : [State_Alice(<'rab___1_0_1', param, %v_>, return_var_6, 'rab_', 'rab_', 'rab_')]--[Transition_(<'rab_Alice', param>, 'rab___1_0_1', %v_), Loop_Back(<'rab_Alice', param>, 'rab___0')]->[State_Alice(<'rab___1', param, %v_ %+ %1>, return_var_6, 'rab_', 'rab_', 'rab_')] 

rule Alice_repeat_in___0___1_0[role="Alice"] : [State_Alice(<'rab___0', param, %v_>, return_var_0, 'rab_', 'rab_', 'rab_')]--[Transition_(<'rab_Alice', param>, 'rab___0', %v_), Loop_Start(<'rab_Alice', param>, 'rab___0')]->[State_Alice(<'rab___1', param, %v_>, 'rab_', 'rab_', 'rab_', 'rab_')] 


// Model:  Bob


rule Bob_guarded_new_intro_event___1___1_0_2_25[role="Bob"] : [State_Bob(<'rab___1', param, %v_>, return_var_1, 'rab_', 'rab_', 'rab_'), Fr(n_0_2)]--[Transition_(<'rab_Bob', param>, 'rab___1', %v_), Ping(n_0_2)]->[State_Bob(<'rab___1_0_2', param, %v_>, 'rab_', n_0_2, 'rab_', 'rab_')] 

rule Bob_guarded_skip_repeat_out___1___2_24[role="Bob"] : [State_Bob(<'rab___1', param, %v_>, return_var_13, 'rab_', 'rab_', 'rab_'), False()]--[Transition_(<'rab_Bob', param>, 'rab___1', %v_), Loop_Finish(<'rab_Bob', param>, 'rab___0')]->[State_Bob(<'rab___2', param, %v_>, 'rab_', 'rab_', 'rab_', 'rab_')] 

rule Bob_guarded_event_case_out_new_out___1_0_3___1_0_5_22[role="Bob"] : [State_Bob(<'rab___1_0_3', param, %v_>, return_var_5, m_0_5, 'rab_', 'rab_'), !ACP_(<'rab_Bob', param>, 'rab_chan', 'rab_'), Pong('rab_chan', m_0_5)]--[Transition_(<'rab_Bob', param>, 'rab___1_0_3', %v_), Valid(m_0_5)]->[State_Bob(<'rab___1_0_5', param, %v_>, 'rab_', 'rab_', 'rab_', 'rab_')] 

rule Bob_guarded_event_case_out_new_out___1_0_3___1_0_5_21[role="Bob"] : [State_Bob(<'rab___1_0_3', param, %v_>, return_var_8, m_0_8, 'rab_', 'rab_'), !ACP_(<'rab_Bob', param>, 'rab_chan', 'rab_'), Pong('rab_chan', n_0_8)]--[Transition_(<'rab_Bob', param>, 'rab___1_0_3', %v_), Invalid(m_0_8, n_0_8), NEq_(m_0_8, n_0_8)]->[State_Bob(<'rab___1_0_5', param, %v_>, 'rab_', 'rab_', 'rab_', 'rab_')] 

rule Bob_repeat___1_0_5___1_12[role="Bob"] : [State_Bob(<'rab___1_0_5', param, %v_>, return_var_12, 'rab_', 'rab_', 'rab_')]--[Transition_(<'rab_Bob', param>, 'rab___1_0_5', %v_), Loop_Back(<'rab_Bob', param>, 'rab___0')]->[State_Bob(<'rab___1', param, %v_ %+ %1>, return_var_12, 'rab_', 'rab_', 'rab_')] 

rule Bob_put___1_0_2___1_0_3_4[role="Bob"] : [State_Bob(<'rab___1_0_2', param, %v_>, return_var_4, m_0_4, 'rab_', 'rab_'), !ACP_(<'rab_Bob', param>, 'rab_chan', 'rab_')]--[Transition_(<'rab_Bob', param>, 'rab___1_0_2', %v_)]->[State_Bob(<'rab___1_0_3', param, %v_>, 'rab_', m_0_4, 'rab_', 'rab_'), Ping('rab_chan', m_0_4)] 

rule Bob_repeat_in___0___1_0[role="Bob"] : [State_Bob(<'rab___0', param, %v_>, return_var_0, 'rab_', 'rab_', 'rab_')]--[Transition_(<'rab_Bob', param>, 'rab___0', %v_), Loop_Start(<'rab_Bob', param>, 'rab___0')]->[State_Bob(<'rab___1', param, %v_>, 'rab_', 'rab_', 'rab_', 'rab_')] 

restriction Init_ : " All x #i #j . Init_(x) @ #i & Init_(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"
lemma AlwaysStarts_[reuse,use_induction]:

      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"
lemma AlwaysStartsWhenEnds_[reuse,use_induction]:

      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"
lemma TransitionOnce_[reuse,use_induction]:

      "All x p %i #j #k . Transition_(x, p, %i) @#j &
        Transition_(x, p, %i) @ #k ==> #j = #k"

lemma Corresponds2 : all-traces "All new_0 #time_1 . Valid(new_0)@#time_1 ==> Ex  #time_2 . Ping(new_0)@#time_2 & #time_2 < #time_1 "
lemma Corresponds : all-traces "All new_0 #time_1 . Pong(new_0)@#time_1 ==> Ex  #time_2 . Ping(new_0)@#time_2 & #time_2 < #time_1 "
lemma Reachable : exists-trace "Ex new_0 #time_0 . Valid(new_0)@#time_0 "
end

