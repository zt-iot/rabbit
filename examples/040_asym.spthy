theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: true/0, false/0, fst/1, snd/1, pk/1, sign/2, verify/3
equations: fst(<loc_1, loc_0>)=loc_1, snd(<loc_1, loc_0>)=loc_0, verify(sign(loc_1, loc_0), loc_1, pk(loc_0))=true()

// Initializing the gloval constants and access policy rules:




// Constants:



// const fresh privkey


rule Const_privkey
  : [ Fr(privkey) ]
    --[ Init('Const_privkey'),
        !Const('privkey', privkey) ]->
    [ !Const('privkey', privkey) ]


// const pubkey = pk(privkey)


rule Const_pubkey
  : [ !Const('privkey', privkey) ]
    --[ !Const('pubkey', pk(privkey)) ]->
    [ !Const('pubkey', pk(privkey)) ]


// Add model inits: Client


rule Init_system[role="system"]
  : [  ]
    --[ Init('system') ]->
    [ !ACP_GEN_('system_', 'str:'),
      State('Client', 'idx_0', 'str:', %1, '()') ]

// Model:  Client


rule Client_new_intro_let_in_idx_0_idx_7_25[role="Client"]
  : [ State('Client', 'idx_0', param, %v_, rho_0),
      !Const('privkey', privkey_1),
      !Const('pubkey', pubkey_2),
      Fr(n_0_0) ]
    --[ Transition_(<'Client', param>, 'idx_0', %v_),
        Invalid(),
        Eq_(verify(sign(n_0_0, privkey_1), n_0_0, pubkey_2), false()) ]->
    [ State('Client', 'idx_7', param, %v_, '()') ]

rule Client_new_intro_let_in_idx_0_idx_7_24[role="Client"]
  : [ State('Client', 'idx_0', param, %v_, rho_0),
      !Const('privkey', privkey_1),
      !Const('pubkey', pubkey_2),
      Fr(n_0_0) ]
    --[ Transition_(<'Client', param>, 'idx_0', %v_),
        Valid(),
        Eq_(verify(sign(n_0_0, privkey_1), n_0_0, pubkey_2), true()) ]->
    [ State('Client', 'idx_7', param, %v_, '()') ]

restriction Init_ : " All x #i #j . Init(x) @ #i & Init(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"

lemma AlwaysStarts_[reuse,use_induction]:
      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma AlwaysStartsWhenEnds_[reuse,use_induction]:
      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma TransitionOnce_[reuse,use_induction]:
      "All x p %i #j #k . Transition_(x, p, %i) @ #j &
        Transition_(x, p, %i) @ #k ==> #j = #k"


lemma NotReachable : exists-trace "Ex  #time_0 . Invalid()@#time_0 "
lemma Reachable : exists-trace "Ex  #time_0 . Valid()@#time_0 "
end

