theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: true/0, false/0, fst/1, snd/1, pk/1, sign/2, verify/3
equations: fst(<loc_1, loc_0>)=loc_1, snd(<loc_1, loc_0>)=loc_0, verify(sign(loc_1, loc_0), loc_1, pk(loc_0))=true()

// Initializing the gloval constants and access policy rules:




// Constants:



// const fresh privkey


rule Const_privkey : [Fr(privkey)]--[Init_('rab_Const_privkey'), Init_(<'rab_Const_privkey', privkey>), !Const_('rab_privkey', privkey)]->[!Const_('rab_privkey', privkey)] 


// const pubkey = ...


rule Const_pubkey : [!Const_('rab_privkey', privkey)]--[!Const_('rab_pubkey', pk(privkey))]->[!Const_('rab_pubkey', pk(privkey))] 


// Add model inits: Client


rule Init_system[role="system"] : []--[Init_('rab_system')]->[!ACP_GEN_('rab_system_', 'rab_rab_str'), State_Client(<'rab___0', 'rab_rab_str', %1>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty')] 

// Model:  Client


rule Client_new_intro_let_intro_let_intro_guarded_event_case_out_let_out_let_out_new_out___0___7_25[role="Client"] : [State_Client(<'rab___0', param, %v_>, return_var_0, 'rab_empty', 'rab_empty', 'rab_empty'), !Const_('rab_privkey', privkey_1), !Const_('rab_pubkey', pubkey_2), Fr(n_0_0)]--[Transition_(<'rab_Client', param>, 'rab___0', %v_), Invalid(), Eq_(verify(sign(n_0_0, privkey_1), n_0_0, pubkey_2), false())]->[State_Client(<'rab___7', param, %v_>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty')] 

rule Client_new_intro_let_intro_let_intro_guarded_event_case_out_let_out_let_out_new_out___0___7_24[role="Client"] : [State_Client(<'rab___0', param, %v_>, return_var_0, 'rab_empty', 'rab_empty', 'rab_empty'), !Const_('rab_privkey', privkey_1), !Const_('rab_pubkey', pubkey_2), Fr(n_0_0)]--[Transition_(<'rab_Client', param>, 'rab___0', %v_), Valid(), Eq_(verify(sign(n_0_0, privkey_1), n_0_0, pubkey_2), true())]->[State_Client(<'rab___7', param, %v_>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty')] 

restriction Init_ : " All x #i #j . Init_(x) @ #i & Init_(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"
lemma AlwaysStarts_[reuse,use_induction]:

      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"
lemma AlwaysStartsWhenEnds_[reuse,use_induction]:

      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"
lemma TransitionOnce_[reuse,use_induction]:

      "All x p %i #j #k . Transition_(x, p, %i) @#j &
        Transition_(x, p, %i) @ #k ==> #j = #k"

lemma NotReachable : exists-trace "Ex  #time_0 . Invalid()@#time_0 "
lemma Reachable : exists-trace "Ex  #time_0 . Valid()@#time_0 "
end

