function fst:1
function snd:1
equation fst ((x, y)) = x
equation snd ((x, y)) = y

(* [false] and [true] are not primitive! *)
function true:0
function false:0

function pk:1
function sign:2
function verify:3
equation verify (sign(d, k), d, pk(k)) = true

type process_t : process

const fresh privkey
const pubkey = pk(privkey)

process client() : process_t 
{
    main {
        new msg in
	var sig = sign(msg, privkey) in
	var res = verify(sig, msg, pubkey) in
	case
	| [res = true] ->
	   event[::Valid()]
	| [res = false] ->
	   event[::Invalid()]
        end
    }
}

system
  client()
requires
[
  lemma Reachable: (* verified *)
    reachable ::Valid() ;

  lemma NotReachable: (* falsified *)
    reachable ::Invalid()
]
