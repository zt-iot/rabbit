syscall send_one(c) {
   put[c::send(1)]

   (* rule Alice__scall_intro_put_____0_____0__0_1__5[role="Alice"]
        : [State__Alice(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'),
           !ACP__(<'rab__Alice', param>, <'rab__chan', param>, 'rab__send_one')] <-------- !!!!!!!!!
        --[Transition__(<'rab__Alice', param>, 'rab_____0', %v__)]
        ->[State__Alice(<'rab_____0__0_1', param, %v__>, 'rab__', 'rab__', <'rab__chan', param>, 'rab__'),
           Send(<'rab__chan', param>, '1')] 
    *)

}

type person_t : process
type chan_t : channel

process alice<p>(ch : chan_t) : person_t 
{
    main {
        _ := send_one(ch);
        event[::Valid()]
    }
}

allow person_t chan_t [send_one]

(*
rule Init__system1__ACP__0[role="system1"]
   : [!ACP__GEN__('rab__system1__', param)]
   --[Init__(<'rab__system1__ACP__0', param>)]
   ->[!ACP__(<'rab__Alice', param>, <'rab__chan', param>, 'rab__send_one')]  <-------- !!!!!
*)

channel chan<> : chan_t

system
  !p.alice<p>(chan<p>)
requires
[
  lemma Reachable : (* verified *)
    reachable ::Valid()
]
