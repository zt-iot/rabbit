theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: succ/1


// Initializing the gloval constants and access policy rules:




// Constants:



// Add model inits: Alice


rule Init_system[role="system"] : []--[Init_('rab_system')]->[!ACP_GEN_('rab_system_', 'rab_rab_str'), State_Alice(<'rab___0', 'rab_rab_str', %1>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty')] 

// Model:  Alice


rule Alice_new_intro_event_let_intro_attack_intro_return_attack_out___0___4_33[role="Alice"] : [State_Alice(<'rab___0', param, %v_>, return_var_0, 'rab_empty', 'rab_empty', 'rab_empty'), Fr(n_0_0)]--[Transition_(<'rab_Alice', param>, 'rab___0', %v_), Send(n_0_0)]->[State_Alice(<'rab___4', param, %v_>, 'rab_unit', n_0_0, succ(n_0_0), 'rab_empty')] 

rule Alice_new_intro_event_let_intro_scall_intro_return_scall_out___0___4_32[role="Alice"] : [State_Alice(<'rab___0', param, %v_>, return_var_0, 'rab_empty', 'rab_empty', 'rab_empty'), Fr(n_0_0)]--[Transition_(<'rab_Alice', param>, 'rab___0', %v_), Send(n_0_0)]->[State_Alice(<'rab___4', param, %v_>, 'rab_unit', n_0_0, n_0_0, 'rab_empty')] 

rule Alice_guarded_event_case_out_let_out_new_out___4___7_23[role="Alice"] : [State_Alice(<'rab___4', param, %v_>, return_var_9, m_0_9, l_0_9, 'rab_empty')]--[Transition_(<'rab_Alice', param>, 'rab___4', %v_), Valid(m_0_9), Eq_(m_0_9, l_0_9)]->[State_Alice(<'rab___7', param, %v_>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty')] 

rule Alice_guarded_event_case_out_let_out_new_out___4___7_22[role="Alice"] : [State_Alice(<'rab___4', param, %v_>, return_var_12, m_0_12, l_0_12, 'rab_empty')]--[Transition_(<'rab_Alice', param>, 'rab___4', %v_), Invalid(), NEq_(m_0_12, l_0_12)]->[State_Alice(<'rab___7', param, %v_>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty')] 

restriction Init_ : " All x #i #j . Init_(x) @ #i & Init_(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"
lemma AlwaysStarts_[reuse,use_induction]:

      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"
lemma AlwaysStartsWhenEnds_[reuse,use_induction]:

      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"
lemma TransitionOnce_[reuse,use_induction]:

      "All x p %i #j #k . Transition_(x, p, %i) @#j &
        Transition_(x, p, %i) @ #k ==> #j = #k"

lemma Tampered : exists-trace "Ex  #time_0 . Invalid()@#time_0 "
lemma Corresponds : all-traces "All new_0 #time_1 . Valid(new_0)@#time_1 ==> Ex  #time_2 . Send(new_0)@#time_2 & #time_2 < #time_1 "
lemma Reachable : exists-trace "Ex new_0 #time_0 . Valid(new_0)@#time_0 "
end

