theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: succ/1


// Initializing the gloval constants and access policy rules:




// Constants:



// Add model inits: Alice


rule Init_system[role="system"]
  : [  ]
    --[ Init('system') ]->
    [ !ACP_GEN_('system_', 'str:'),
      State('Alice', 'idx_0', 'str:', %1, '()') ]

// Model:  Alice


rule Alice_new_intro_event__idx_0_idx_4_33[role="Alice"]
  : [ State('Alice', 'idx_0', param, %v_, rho_0),
      Fr(n_0_0) ]
    --[ Transition_(<'Alice', param>, 'idx_0', %v_),
        Send(n_0_0) ]->
    [ State('Alice', 'idx_4', param, %v_, <'()', n_0_0, n_0_0>) ]

rule Alice_new_intro_event__idx_0_idx_4_32[role="Alice"]
  : [ State('Alice', 'idx_0', param, %v_, rho_0),
      Fr(n_0_0) ]
    --[ Transition_(<'Alice', param>, 'idx_0', %v_),
        Send(n_0_0) ]->
    [ State('Alice', 'idx_4', param, %v_, <'()', n_0_0, succ(n_0_0)>) ]

rule Alice_guarded_event_ca_idx_4_idx_7_23[role="Alice"]
  : [ State('Alice', 'idx_4', param, %v_, <rho_9, m_0_9, l_0_9>) ]
    --[ Transition_(<'Alice', param>, 'idx_4', %v_),
        Valid(m_0_9),
        Eq_(m_0_9, l_0_9) ]->
    [ State('Alice', 'idx_7', param, %v_, '()') ]

rule Alice_guarded_event_ca_idx_4_idx_7_22[role="Alice"]
  : [ State('Alice', 'idx_4', param, %v_, <rho_12, m_0_12, l_0_12>) ]
    --[ Transition_(<'Alice', param>, 'idx_4', %v_),
        Invalid(),
        NEq_(m_0_12, l_0_12) ]->
    [ State('Alice', 'idx_7', param, %v_, '()') ]

restriction Init_ : " All x #i #j . Init(x) @ #i & Init(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"

lemma AlwaysStarts_[reuse,use_induction]:
      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma AlwaysStartsWhenEnds_[reuse,use_induction]:
      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma TransitionOnce_[reuse,use_induction]:
      "All x p %i #j #k . Transition_(x, p, %i) @ #j &
        Transition_(x, p, %i) @ #k ==> #j = #k"


lemma Tampered : exists-trace "Ex  #time_0 . Invalid()@#time_0 "
lemma Corresponds : all-traces "All new_0 #time_1 . Valid(new_0)@#time_1 ==> Ex  #time_2 . Send(new_0)@#time_2 & #time_2 < #time_1 "
lemma Reachable : exists-trace "Ex new_0 #time_0 . Valid(new_0)@#time_0 "
end

