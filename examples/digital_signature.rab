(* security primitives *)
function pk:1
function sign:2
function fst:1
function snd:1
equation fst ((x, y)) = x
equation snd ((x, y)) = y
function true:0
function verify:3
equation verify (sign(d, k), d, pk(k)) = true



(* load some primitive syscalls, incl. send and recv *)
load "udp_rpc.rab"

(* syscall that returns some fresh globally known message *)
syscall message () {
  new v in 
  v
}

(***********)
(** declare types with their classes *)
type readonly_t   : filesys

type client_t 	  : process

type udp_t 	  : channel



(***********)
(** access control *)

(* clients can both send and receive messages on udp_t channels *)
allow client_t udp_t [send, recv]

(** clients are allowed to generate fresh messages *)
allow client_t [message]



(***********)
(** attacker model *)

(* declare active attacks *)

(* tamper message *)
attack tampar_channel on recv (c) {
  case [c::store(j), ::In(w)] ->
    w
  end
}

allow attack client_t [tampar_channel] 

passive attack eaves_mem (v) {
  put [::Out(v)]
}


allow client_t [eaves_mem]





(***********)
(** global constants *)
const fresh priv_key_alice

(***********)
(** installed channels and filesystems *)

channel udp : udp_t (* Only a single UDP channel for now *)


(***********)
(** process templates *)

process alice(ch_net : udp_t) : client_t
{
    var n = priv_key_alice

  	main 
  	{
      var msg = message() in
      _ := eaves_mem(msg);

      var sig = sign(msg, priv_key_alice) in
      _ := eaves_mem(sig);


      (* Send msg appended with signature to Bob *)
       event [::MsgSend(msg)];
      _ := send(ch_net, (msg, sig));

      event [::AliceClose ()]
  	}
}

process bob(ch_net : udp_t) : client_t
{
  (* Use public key of Alice to verify message *)
  var pub_key_alice = pk(priv_key_alice)

  main 
  {
    
    var msg_with_sig = recv(ch_net) in

    var res = verify(snd(msg_with_sig), fst(msg_with_sig), pub_key_alice) in

    case 
    | [res = true] ->
        event [::IntegritySuccess(fst(msg_with_sig))]
    | [res != true] ->
        event [::IntegrityFail(fst(msg_with_sig))]
    end;
    event [::BobClose ()]
  }
}


system
   alice(udp) | bob(udp)
requires  [
    lemma Reachable : 
      exists-trace "Ex #i #j . AliceClose () @ #i & BobClose() @ #j";
    

    lemma Correspondence :
    	all-traces "All msg #j  . IntegritySuccess(msg) @ #j ==> Ex #i . MsgSend (msg) @ i & i < j" 

  ]
