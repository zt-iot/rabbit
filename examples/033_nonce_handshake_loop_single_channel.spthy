theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: fst/1, snd/1, enc/2, dec/2
equations: fst(<loc_1, loc_0>)=loc_1, snd(<loc_1, loc_0>)=loc_0, dec(enc(loc_1, loc_0), loc_0)=loc_1

// Initializing the gloval constants and access policy rules:




// Constants:



// const fresh sym_k


rule Const_sym_k
  : [ Fr(sym_k) ]
    --[ Init('Const_sym_k'),
        !Const('sym_k', sym_k) ]->
    [ !Const('sym_k', sym_k) ]


// Add model inits: Alice,Bob


rule Init_system[role="system"]
  : [  ]
    --[ Init('system') ]->
    [ !ACP_GEN_('system_', 'str:'),
      State('Alice', 'idx_0', 'str:', %1, '()'),
      State('Bob', 'idx_0', 'str:', %1, '()') ]


// Access control of Alice:chan



// Fact: !ACP_(<'Alice', 'str:'>, 'chan', 'recv')


rule Init_system_ACP_0[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_0') ]->
    [ !ACP_(<'Alice', 'str:'>, 'chan', 'recv') ]


// Fact: !ACP_(<'Alice', 'str:'>, 'chan', 'send')


rule Init_system_ACP_1[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_1') ]->
    [ !ACP_(<'Alice', 'str:'>, 'chan', 'send') ]


// Access control of Bob:chan



// Fact: !ACP_(<'Bob', 'str:'>, 'chan', 'recv')


rule Init_system_ACP_2[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_2') ]->
    [ !ACP_(<'Bob', 'str:'>, 'chan', 'recv') ]


// Fact: !ACP_(<'Bob', 'str:'>, 'chan', 'send')


rule Init_system_ACP_3[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_3') ]->
    [ !ACP_(<'Bob', 'str:'>, 'chan', 'send') ]

// Model:  Alice


rule Alice_let_intro_scall__idx_0_idx_1__0_0_22[role="Alice"]
  : [ State('Alice', 'idx_0', param, %v_, rho_0) ]
    --[ Transition_(<'Alice', param>, 'idx_0', %v_) ]->
    [ State('Alice', 'idx_1__0_0', param, %v_, <'()', 'chan', 'str:'>) ]

rule Alice_guarded_return_c_idx_1__0_0_idx_4_21[role="Alice"]
  : [ State('Alice', 'idx_1__0_0', param, %v_, <rho_2, l_0_2, l_1_2>),
      Fr(n_0_6),
      !ACP_(<'Alice', param>, l_0_2, 'recv'),
      Store(l_0_2, n_0_2) ]
    --[ Transition_(<'Alice', param>, 'idx_1__0_0', %v_),
        Sent(n_0_6, n_0_2) ]->
    [ State('Alice', 'idx_4', param, %v_, <'()', n_0_6, n_0_2>) ]

rule Alice_scall_intro_put__idx_4_idx_7_16[role="Alice"]
  : [ State('Alice', 'idx_4', param, %v_, <rho_8, m_0_8, l_0_8>),
      !ACP_(<'Alice', param>, 'chan', 'send'),
      !Const('sym_k', sym_k_8) ]
    --[ Transition_(<'Alice', param>, 'idx_4', %v_) ]->
    [ State('Alice', 'idx_7', param, %v_, '()'),
      Store('chan', enc(<m_0_8, l_0_8>, sym_k_8)) ]


// Model:  Bob


rule Bob_new_intro_scall__idx_0_idx_3__0_0_52[role="Bob"]
  : [ State('Bob', 'idx_0', param, %v_, rho_0),
      !ACP_(<'Bob', param>, 'chan', 'send'),
      Fr(n_0_0) ]
    --[ Transition_(<'Bob', param>, 'idx_0', %v_) ]->
    [ State('Bob', 'idx_3__0_0', param, %v_, <'()', n_0_0, 'chan', 'str:'>),
      Store('chan', n_0_0) ]

rule Bob_guarded_return_c_idx_3__0_0_idx_7__1_1_47[role="Bob"]
  : [ State('Bob', 'idx_3__0_0', param, %v_, <rho_6, m_0_6, l_0_6, l_1_6>),
      !Const('sym_k', sym_k_10),
      !ACP_(<'Bob', param>, l_0_6, 'recv'),
      Store(l_0_6, n_0_6) ]
    --[ Transition_(<'Bob', param>, 'idx_3__0_0', %v_),
        Invalid(),
        NEq_(m_0_6, snd(dec(n_0_6, sym_k_10))) ]->
    [ State('Bob', 'idx_7__1_1', param, %v_, <'()', m_0_6, snd(dec(n_0_6, sym_k_10)), fst(dec(n_0_6, sym_k_10)), dec(n_0_6, sym_k_10), n_0_6>) ]

rule Bob_guarded_return_c_idx_3__0_0_idx_7__0_1_46[role="Bob"]
  : [ State('Bob', 'idx_3__0_0', param, %v_, <rho_6, m_0_6, l_0_6, l_1_6>),
      !Const('sym_k', sym_k_10),
      !ACP_(<'Bob', param>, l_0_6, 'recv'),
      Store(l_0_6, n_0_6) ]
    --[ Transition_(<'Bob', param>, 'idx_3__0_0', %v_),
        Valid(fst(dec(n_0_6, sym_k_10)), m_0_6),
        Eq_(m_0_6, snd(dec(n_0_6, sym_k_10))) ]->
    [ State('Bob', 'idx_7__0_1', param, %v_, <'()', m_0_6, snd(dec(n_0_6, sym_k_10)), fst(dec(n_0_6, sym_k_10)), dec(n_0_6, sym_k_10), n_0_6>) ]

rule Bob_case_out_event_l_idx_7__0_1_idx_14_31[role="Bob"]
  : [ State('Bob', 'idx_7__0_1', param, %v_, <rho_15, m_0_15, l_0_15, l_1_15, l_2_15, l_3_15>) ]
    --[ Transition_(<'Bob', param>, 'idx_7__0_1', %v_),
        End(l_1_15, m_0_15) ]->
    [ State('Bob', 'idx_14', param, %v_, '()') ]

rule Bob_case_out_event_l_idx_7__1_1_idx_14_30[role="Bob"]
  : [ State('Bob', 'idx_7__1_1', param, %v_, <rho_18, m_0_18, l_0_18, l_1_18, l_2_18, l_3_18>) ]
    --[ Transition_(<'Bob', param>, 'idx_7__1_1', %v_),
        End(l_1_18, m_0_18) ]->
    [ State('Bob', 'idx_14', param, %v_, '()') ]

restriction Init_ : " All x #i #j . Init(x) @ #i & Init(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"

lemma AlwaysStarts_[reuse,use_induction]:
      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma AlwaysStartsWhenEnds_[reuse,use_induction]:
      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma TransitionOnce_[reuse,use_induction]:
      "All x p %i #j #k . Transition_(x, p, %i) @ #j &
        Transition_(x, p, %i) @ #k ==> #j = #k"


lemma Corresponds : all-traces "All new_0 new_1 #time_1 . End(new_1, new_0)@#time_1 ==> Ex  #time_2 . Valid(new_1, new_0)@#time_2 & #time_2 < #time_1 "
lemma Invalid : exists-trace "Ex  #time_0 . Invalid()@#time_0 "
lemma Valid : exists-trace "Ex new_0 new_1 #time_0 . Valid(new_1, new_0)@#time_0 "
end

