theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: true/0, pk/1, enc/2, sign/2, dec/2, fst/1, snd/1, verify/3, h/1
equations: fst(<loc_1, loc_0>)=loc_1, snd(<loc_1, loc_0>)=loc_0, dec(enc(loc_1, loc_0), loc_0)=loc_1, verify(sign(loc_1, loc_0), loc_1, pk(loc_0))=true()

// Initializing the gloval constants and access policy rules:




// Constants:



// const fresh sym_k<>


rule Const_sym_k
  : [ Fr(sym_k) ]
    --[ Init(<'sym_k', param>),
        !Const(<'sym_k', param>, sym_k) ]->
    [ !Const(<'sym_k', param>, sym_k) ]


// const fresh priv_k<>


rule Const_priv_k
  : [ Fr(priv_k) ]
    --[ Init(<'priv_k', param>),
        !Const(<'priv_k', param>, priv_k) ]->
    [ !Const(<'priv_k', param>, priv_k) ]


// const fresh pubkey<k> = pk(priv_k_0)


rule Const_pubkey
  : [ !Const(<'priv_k', param>, priv_k_0) ]
    --[ Init(<'pubkey', param>),
        !Const(<'pubkey', param>, pk(priv_k_0)) ]->
    [ !Const(<'pubkey', param>, pk(priv_k_0)) ]


// Add model inits: Server


rule Init_system[role="system"]
  : [  ]
    --[ Init('system') ]->
    [ !ACP_GEN_('system_', 'str:'),
      State('Server', 'idx_0', 'str:', %1, '()') ]


// Access control of Server:udp



// Fact: !ACP_(<'Server', 'str:'>, <'udp', ident>, 'recv')


rule Init_system_ACP_0[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init(<'system_ACP_0', ident>) ]->
    [ !ACP_(<'Server', 'str:'>, <'udp', ident>, 'recv') ]


// Fact: !ACP_(<'Server', 'str:'>, <'udp', ident>, 'str:')


rule Init_system_ACP_1[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init(<'system_ACP_1', ident>) ]->
    [ !ACP_(<'Server', 'str:'>, <'udp', ident>, 'str:') ]


// Add model inits: Client_ta,Client


rule Init_system1[role="system1"]
  : [ Fr(param) ]
    --[ Init(<'system1', param>) ]->
    [ !ACP_GEN_('system1_', param),
      State('Client_ta', 'idx_0', param, %1, '()'),
      State('Client', 'idx_0', param, %1, '()') ]


// Access control of Client_ta:rpc



// Fact: !ACP_(<'Client_ta', param>, <'rpc', param>, 'accept_rpc')


rule Init_system1_ACP_0[role="system1"]
  : [ !ACP_GEN_('system1_', param) ]
    --[ Init(<'system1_ACP_0', param>) ]->
    [ !ACP_(<'Client_ta', param>, <'rpc', param>, 'accept_rpc') ]


// Fact: !ACP_(<'Client_ta', param>, <'rpc', param>, 'str:')


rule Init_system1_ACP_1[role="system1"]
  : [ !ACP_GEN_('system1_', param) ]
    --[ Init(<'system1_ACP_1', param>) ]->
    [ !ACP_(<'Client_ta', param>, <'rpc', param>, 'str:') ]


// Access control of Client:rpc



// Fact: !ACP_(<'Client', param>, <'rpc', param>, 'close_rpc')


rule Init_system1_ACP_2[role="system1"]
  : [ !ACP_GEN_('system1_', param) ]
    --[ Init(<'system1_ACP_2', param>) ]->
    [ !ACP_(<'Client', param>, <'rpc', param>, 'close_rpc') ]


// Fact: !ACP_(<'Client', param>, <'rpc', param>, 'invoke_rpc')


rule Init_system1_ACP_3[role="system1"]
  : [ !ACP_GEN_('system1_', param) ]
    --[ Init(<'system1_ACP_3', param>) ]->
    [ !ACP_(<'Client', param>, <'rpc', param>, 'invoke_rpc') ]


// Fact: !ACP_(<'Client', param>, <'rpc', param>, 'connect_rpc')


rule Init_system1_ACP_4[role="system1"]
  : [ !ACP_GEN_('system1_', param) ]
    --[ Init(<'system1_ACP_4', param>) ]->
    [ !ACP_(<'Client', param>, <'rpc', param>, 'connect_rpc') ]


// Fact: !ACP_(<'Client', param>, <'rpc', param>, 'str:')


rule Init_system1_ACP_5[role="system1"]
  : [ !ACP_GEN_('system1_', param) ]
    --[ Init(<'system1_ACP_5', param>) ]->
    [ !ACP_(<'Client', param>, <'rpc', param>, 'str:') ]


// Access control of Client:udp



// Fact: !ACP_(<'Client', param>, <'udp', param>, 'send')


rule Init_system1_ACP_6[role="system1"]
  : [ !ACP_GEN_('system1_', param) ]
    --[ Init(<'system1_ACP_6', param>) ]->
    [ !ACP_(<'Client', param>, <'udp', param>, 'send') ]

// Model:  Server


rule Server_guarded_let_intr_idx_1_idx_1__0_1_39[role="Server"]
  : [ State('Server', 'idx_1', param, %v_, rho_1),
      !ACP_(<'Server', param>, <'udp', n_0_1>, 'str:'),
      Store(<'udp', n_0_1>, n_1_1) ]
    --[ Transition_(<'Server', param>, 'idx_1', %v_) ]->
    [ State('Server', 'idx_1__0_1', param, %v_, <'()', n_0_1, n_1_1, n_1_1>) ]

rule Server_guarded_let_intr_idx_1_idx_1__0_2_38[role="Server"]
  : [ State('Server', 'idx_1', param, %v_, rho_1),
      !ACP_(<'Server', param>, <'udp', n_0_1>, 'str:'),
      Store(<'udp', n_0_1>, n_1_1) ]
    --[ Transition_(<'Server', param>, 'idx_1', %v_) ]->
    [ State('Server', 'idx_1__0_2', param, %v_, <'()', n_0_1, n_1_1, n_1_1>) ]

rule Server_guarded_skip_rep_idx_1_idx_2_37[role="Server"]
  : [ State('Server', 'idx_1', param, %v_, rho_19),
      False() ]
    --[ Transition_(<'Server', param>, 'idx_1', %v_),
        Loop_Finish(<'Server', param>, 'idx_0') ]->
    [ State('Server', 'idx_2', param, %v_, '()') ]

rule Server_guarded_assign_c_idx_1__0_1_idx_1__0_2_35[role="Server"]
  : [ State('Server', 'idx_1__0_1', param, %v_, <rho_3, m_0_3, m_1_3, l_0_3>),
      In(n_0_3) ]
    --[ Transition_(<'Server', param>, 'idx_1__0_1', %v_) ]->
    [ State('Server', 'idx_1__0_2', param, %v_, <'()', m_0_3, m_1_3, n_0_3>) ]

rule Server_let_intro_guarde_idx_1__0_2_idx_1__0_6_31[role="Server"]
  : [ State('Server', 'idx_1__0_2', param, %v_, <rho_9, m_0_9, m_1_9, l_0_9>),
      !Const(<'pubkey', m_0_9>, pubkey_0_9) ]
    --[ Transition_(<'Server', param>, 'idx_1__0_2', %v_),
        ImgRecvInvalid(snd(l_0_9)),
        NEq_(verify(fst(l_0_9), snd(l_0_9), pubkey_0_9), true()) ]->
    [ State('Server', 'idx_1__0_6', param, %v_, <'()', m_0_9, m_1_9>) ]

rule Server_let_intro_guarde_idx_1__0_2_idx_1__0_6_30[role="Server"]
  : [ State('Server', 'idx_1__0_2', param, %v_, <rho_9, m_0_9, m_1_9, l_0_9>),
      !Const(<'pubkey', m_0_9>, pubkey_0_9) ]
    --[ Transition_(<'Server', param>, 'idx_1__0_2', %v_),
        ImgRecvValid(snd(l_0_9)),
        Eq_(verify(fst(l_0_9), snd(l_0_9), pubkey_0_9), true()) ]->
    [ State('Server', 'idx_1__0_6', param, %v_, <'()', m_0_9, m_1_9>) ]

rule Server_repeat_idx_1__0_6_idx_1_18[role="Server"]
  : [ State('Server', 'idx_1__0_6', param, %v_, <rho_18, m_0_18, m_1_18>) ]
    --[ Transition_(<'Server', param>, 'idx_1__0_6', %v_),
        Loop_Back(<'Server', param>, 'idx_0') ]->
    [ State('Server', 'idx_1', param, %v_ %+ %1, rho_18) ]

rule Server_repeat_in_idx_0_idx_1_0[role="Server"]
  : [ State('Server', 'idx_0', param, %v_, rho_0) ]
    --[ Transition_(<'Server', param>, 'idx_0', %v_),
        Loop_Start(<'Server', param>, 'idx_0') ]->
    [ State('Server', 'idx_1', param, %v_, '()') ]


// Model:  Client_ta


rule Client_ta_guarded_guarded__idx_4_idx_4__0_1_90[role="Client_ta"]
  : [ State('Client_ta', 'idx_4', param, %v_, <rho_8, t_0_8>),
      !ACP_(<'Client_ta', param>, <'rpc', param>, 'str:'),
      Fr(n_0_15),
      !ACP_(<'Client_ta', param>, n_0_8, 'fopen'),
      !ACP_(<'Client_ta', param>, n_0_8, 'fopen'),
      File_Client_ta(param, loc_0, n_0_14),
      !ACP_(<'Client_ta', param>, <'rpc', param>, 'str:'),
      Invoke(<'rpc', param>, n_2_8, n_1_8, n_0_8) ]
    --[ Transition_(<'Client_ta', param>, 'idx_4', %v_),
        Eq_(n_0_23, n_0_30),
        Eq_(n_2_8, 'sign_image'),
        Eq_(n_0_14, n_0_23) ]->
    [ State('Client_ta', 'idx_4__0_1', param, %v_, <'()', n_0_8, n_1_8, n_2_8, t_0_8>),
      File_Client_ta(param, loc_0, n_0_14),
      Returned(<'rpc', param>, sign(n_1_8, dec(n_0_23, t_0_8))) ]

rule Client_ta_init_filesys_ini_idx_0_idx_2__0_0_89[role="Client_ta"]
  : [ State('Client_ta', 'idx_0', param, %v_, rho_0),
      !Const(<'sym_k', param>, sym_k_0_1),
      !Const(<'sym_k', param>, sym_k_1_0),
      !Const(<'priv_k', param>, priv_k_0_0) ]
    --[ Transition_(<'Client_ta', param>, 'idx_0', %v_) ]->
    [ State('Client_ta', 'idx_2__0_0', param, %v_, <'()', <'rpc', param>, sym_k_0_1>),
      File_Client_ta(param, '_secret_priv', enc(priv_k_0_0, sym_k_1_0)),
      !ACP_(<'Client_ta', param>, '_secret_priv', 'fclose'),
      !ACP_(<'Client_ta', param>, '_secret_priv', 'fread'),
      !ACP_(<'Client_ta', param>, '_secret_priv', 'fopen') ]

rule Client_ta_guarded_put_idx_2__0_0_idx_2__0_0__0_1_87[role="Client_ta"]
  : [ State('Client_ta', 'idx_2__0_0', param, %v_, <rho_3, l_0_3, t_0_3>),
      !ACP_(<'Client_ta', param>, l_0_3, 'accept_rpc'),
      !ACP_(<'Client_ta', param>, l_0_3, 'accept_rpc'),
      Req(l_0_3) ]
    --[ Transition_(<'Client_ta', param>, 'idx_2__0_0', %v_) ]->
    [ State('Client_ta', 'idx_2__0_0__0_1', param, %v_, <'()', l_0_3, t_0_3>),
      Ack(l_0_3) ]

rule Client_ta_case_out_scall_o_idx_2__0_0__0_1_idx_4_86[role="Client_ta"]
  : [ State('Client_ta', 'idx_2__0_0__0_1', param, %v_, <rho_5, l_0_5, t_0_5>) ]
    --[ Transition_(<'Client_ta', param>, 'idx_2__0_0__0_1', %v_),
        Loop_Start(<'Client_ta', param>, 'idx_3') ]->
    [ State('Client_ta', 'idx_4', param, %v_, <'()', t_0_5>) ]

rule Client_ta_guarded_guarded__idx_4_idx_4__0_1_84[role="Client_ta"]
  : [ State('Client_ta', 'idx_4', param, %v_, <rho_8, t_0_8>),
      !ACP_(<'Client_ta', param>, <'rpc', param>, 'str:'),
      Invoke(<'rpc', param>, n_2_8, n_1_8, n_0_8) ]
    --[ Transition_(<'Client_ta', param>, 'idx_4', %v_),
        InValidName_Client_ta(param, n_2_8),
        NEq_(n_2_8, 'sign_image') ]->
    [ State('Client_ta', 'idx_4__0_1', param, %v_, <'()', n_0_8, n_1_8, n_2_8, t_0_8>) ]

rule Client_ta_guarded_skip_rep_idx_4_idx_5_82[role="Client_ta"]
  : [ State('Client_ta', 'idx_4', param, %v_, <rho_45, t_0_45>),
      !ACP_(<'Client_ta', param>, <'rpc', param>, 'str:'),
      Exit(<'rpc', param>) ]
    --[ Transition_(<'Client_ta', param>, 'idx_4', %v_),
        Loop_Finish(<'Client_ta', param>, 'idx_3') ]->
    [ State('Client_ta', 'idx_5', param, %v_, <'()', t_0_45>) ]

rule Client_ta_event_idx_5_idx_6_48[role="Client_ta"]
  : [ State('Client_ta', 'idx_5', param, %v_, <rho_48, t_0_48>) ]
    --[ Transition_(<'Client_ta', param>, 'idx_5', %v_),
        ClientTAClose() ]->
    [ State('Client_ta', 'idx_6', param, %v_, <'()', t_0_48>) ]

rule Client_ta_repeat_idx_4__0_1_idx_4_44[role="Client_ta"]
  : [ State('Client_ta', 'idx_4__0_1', param, %v_, <rho_44, m_0_44, m_1_44, m_2_44, t_0_44>) ]
    --[ Transition_(<'Client_ta', param>, 'idx_4__0_1', %v_),
        Loop_Back(<'Client_ta', param>, 'idx_3') ]->
    [ State('Client_ta', 'idx_4', param, %v_ %+ %1, <rho_44, t_0_44>) ]


// Model:  Client


rule Client_init_mem_init_me_idx_0_idx_3__0_1_83[role="Client"]
  : [ State('Client', 'idx_0', param, %v_, rho_0),
      !ACP_(<'Client', param>, <'rpc', param>, 'connect_rpc') ]
    --[ Transition_(<'Client', param>, 'idx_0', %v_) ]->
    [ State('Client', 'idx_3__0_1', param, %v_, <'()', <'rpc', param>, 'str:', 'sign_image', '_secret_priv'>),
      Req(<'rpc', param>) ]

rule Client_guarded_new_intr_idx_3__0_1_idx_3__0_1__0_2_79[role="Client"]
  : [ State('Client', 'idx_3__0_1', param, %v_, <rho_5, l_0_5, l_1_5, t_0_5, t_1_5>),
      Fr(n_0_6),
      !ACP_(<'Client', param>, l_0_5, 'connect_rpc'),
      !ACP_(<'Client', param>, l_0_5, 'connect_rpc'),
      Ack(l_0_5) ]
    --[ Transition_(<'Client', param>, 'idx_3__0_1', %v_) ]->
    [ State('Client', 'idx_3__0_1__0_2', param, %v_, <'()', n_0_6, l_0_5, l_1_5, t_0_5, t_1_5>),
      Structure(<'Client', param>, 'chid', n_0_6, l_0_5),
      Conn(l_0_5) ]

rule Client_return_new_out_c_idx_3__0_1__0_2_idx_5_77[role="Client"]
  : [ State('Client', 'idx_3__0_1__0_2', param, %v_, <rho_8, m_0_8, l_0_8, l_1_8, t_0_8, t_1_8>) ]
    --[ Transition_(<'Client', param>, 'idx_3__0_1__0_2', %v_),
        Loop_Start(<'Client', param>, 'idx_4') ]->
    [ State('Client', 'idx_5', param, %v_, <'()', m_0_8, t_0_8, t_1_8>) ]

rule Client_guarded_let_intr_idx_5_idx_5__0_3__0_2_73[role="Client"]
  : [ State('Client', 'idx_5', param, %v_, <rho_13, l_0_13, t_0_13, t_1_13>),
      Fr(n_0_16),
      Structure(<'Client', param>, 'chid', l_0_13, n_0_22),
      !ACP_(<'Client', param>, n_0_22, 'invoke_rpc') ]
    --[ Transition_(<'Client', param>, 'idx_5', %v_) ]->
    [ State('Client', 'idx_5__0_3__0_2', param, %v_, <'()', n_0_22, t_1_13, n_0_16, t_0_13, l_0_13, 'str:', n_0_16, l_0_13, t_0_13, t_1_13>),
      Structure(<'Client', param>, 'chid', l_0_13, n_0_22),
      Invoke(n_0_22, t_0_13, n_0_16, t_1_13) ]

rule Client_guarded_skip_rep_idx_5_idx_6_72[role="Client"]
  : [ State('Client', 'idx_5', param, %v_, <rho_36, l_0_36, t_0_36, t_1_36>) ]
    --[ Transition_(<'Client', param>, 'idx_5', %v_),
        Loop_Finish(<'Client', param>, 'idx_4') ]->
    [ State('Client', 'idx_6', param, %v_, <'()', l_0_36, t_0_36, t_1_36>) ]

rule Client_guarded_return_c_idx_5__0_3__0_2_idx_5__0_5_62[role="Client"]
  : [ State('Client', 'idx_5__0_3__0_2', param, %v_, <rho_24, m_0_24, l_0_24, l_1_24, l_2_24, l_3_24, l_4_24, l_5_24, l_6_24, t_0_24, t_1_24>),
      !ACP_(<'Client', param>, m_0_24, 'invoke_rpc'),
      Returned(m_0_24, n_0_24) ]
    --[ Transition_(<'Client', param>, 'idx_5__0_3__0_2', %v_),
        ImgSend(l_5_24) ]->
    [ State('Client', 'idx_5__0_5', param, %v_, <'()', n_0_24, l_5_24, l_6_24, t_0_24, t_1_24>) ]

rule Client_scall_intro_put__idx_5__0_5_idx_5__0_8_57[role="Client"]
  : [ State('Client', 'idx_5__0_5', param, %v_, <rho_30, l_0_30, l_1_30, l_2_30, t_0_30, t_1_30>),
      !ACP_(<'Client', param>, <'udp', param>, 'send') ]
    --[ Transition_(<'Client', param>, 'idx_5__0_5', %v_) ]->
    [ State('Client', 'idx_5__0_8', param, %v_, <'()', l_2_30, t_0_30, t_1_30>),
      Store(<'udp', param>, <l_0_30, l_1_30>) ]

rule Client_scall_intro_get__idx_6_idx_6__0_3_52[role="Client"]
  : [ State('Client', 'idx_6', param, %v_, <rho_39, l_0_39, t_0_39, t_1_39>),
      Structure(<'Client', param>, 'chid', l_0_39, n_0_40),
      !ACP_(<'Client', param>, n_0_40, 'close_rpc') ]
    --[ Transition_(<'Client', param>, 'idx_6', %v_),
        Eq_(n_0_40, n_0_41) ]->
    [ State('Client', 'idx_6__0_3', param, %v_, <'()', n_0_40, l_0_39, l_0_39, t_0_39, t_1_39>),
      Exit(n_0_40) ]

rule Client_get_out_scall_ou_idx_6__0_3_idx_9_49[role="Client"]
  : [ State('Client', 'idx_6__0_3', param, %v_, <rho_43, m_0_43, l_0_43, l_1_43, t_0_43, t_1_43>) ]
    --[ Transition_(<'Client', param>, 'idx_6__0_3', %v_),
        ClientClose() ]->
    [ State('Client', 'idx_9', param, %v_, <'()', t_0_43, t_1_43>) ]

rule Client_repeat_idx_5__0_8_idx_5_35[role="Client"]
  : [ State('Client', 'idx_5__0_8', param, %v_, <rho_35, l_0_35, t_0_35, t_1_35>) ]
    --[ Transition_(<'Client', param>, 'idx_5__0_8', %v_),
        Loop_Back(<'Client', param>, 'idx_4') ]->
    [ State('Client', 'idx_5', param, %v_ %+ %1, <rho_35, l_0_35, t_0_35, t_1_35>) ]

restriction Init_ : " All x #i #j . Init(x) @ #i & Init(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"

lemma AlwaysStarts_[reuse,use_induction]:
      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma AlwaysStartsWhenEnds_[reuse,use_induction]:
      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma TransitionOnce_[reuse,use_induction]:
      "All x p %i #j #k . Transition_(x, p, %i) @ #j &
        Transition_(x, p, %i) @ #k ==> #j = #k"


lemma Correspondence : all-traces "All new_0 #time_1 . ImgRecvValid(new_0)@#time_1 ==> Ex  #time_2 . ImgSend(new_0)@#time_2 & #time_2 < #time_1 "
lemma Reachable : exists-trace "Ex new_0 #time_2  #time_1  #time_0 . ImgRecvValid(new_0)@#time_2 & ClientTAClose()@#time_1 & ClientClose()@#time_0 "
end

