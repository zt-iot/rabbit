type person_t : process
type chan_t : channel

process alice(ch : chan_t) : person_t 
{
    main {
        repeat
	| [] ->
	    case
	    | [ch::ping(n)] ->        (* Only takes [ping(n)] *)
	          event [::Pong(n)];
	          put [ch::pong(n)]
            end
	until
	| [::False()] -> skip         (* loops forever *)
        end
    }
}

process bob(ch : chan_t) : person_t 
{
    main {
        repeat
	| [] ->
            new n in
	    event [::Ping(n)];
	    put [ch::ping(n)];
	    case
	    | [ch::pong(n)] ->        (* Only takes [pong(n)] *)
	         event [::Valid(n)]
	    | [ch::pong(m), n != m] ->
	         event [::Invalid(n, m)]
            end
	until
	| [::False()] -> skip         (* loops forever *)
	end
    }
}

allow person_t chan_t [.]

channel chan : chan_t

system
  alice(chan) | bob(chan)
requires
[
  lemma Reachable :
    reachable ::Valid(n) ;

  lemma Corresponds :
    corresponds ::Pong(n) ~> ::Ping(n) ;

  lemma Corresponds2 :
    corresponds ::Valid(n) ~> ::Ping(n)
]
