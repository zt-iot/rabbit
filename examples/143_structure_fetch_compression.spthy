theory rabbit

begin
builtins: natural-numbers


// The signature of our model:






// Initializing the gloval constants and access policy rules:




// Constants:



// Add model inits: P


rule Init_system[role="system"]
  : [  ]
    --[ Init('system') ]->
    [ !ACP_GEN_('system_', 'str:'),
      State('P', 'idx_0', 'str:', %1, '()') ]

// Model:  P


rule P_new_intro_get_in_idx_1_idx_3__0_1_16[role="P"]
  : [ State('P', 'idx_1', param, %v_, rho_1),
      Fr(n_0_1) ]
    --[ Transition_(<'P', param>, 'idx_1', %v_),
        Valid(),
        Eq_(<'1', '2', '3'>, <n_0_2, n_1_2, n_2_2>),
        Eq_(n_2_2, '3'),
        Eq_(n_1_2, '2'),
        Eq_(n_0_2, '1') ]->
    [ State('P', 'idx_3__0_1', param, %v_, <'()', n_0_2, n_1_2, n_2_2, n_0_1>),
      Structure(<'P', param>, 'S', n_0_1, <n_0_2, n_1_2, n_2_2>) ]

rule P_case_out_del_eve_idx_3__0_1_idx_8_13[role="P"]
  : [ State('P', 'idx_3__0_1', param, %v_, <rho_5, m_0_5, m_1_5, m_2_5, m_3_5>),
      Structure(<'P', param>, 'S', m_3_5, n_0_6) ]
    --[ Transition_(<'P', param>, 'idx_3__0_1', %v_),
        Deleted() ]->
    [ State('P', 'idx_8', param, %v_, '()') ]

rule P_event_idx_0_idx_1_0[role="P"]
  : [ State('P', 'idx_0', param, %v_, rho_0) ]
    --[ Transition_(<'P', param>, 'idx_0', %v_),
        Allocating() ]->
    [ State('P', 'idx_1', param, %v_, '()') ]

restriction Init_ : " All x #i #j . Init(x) @ #i & Init(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"

lemma AlwaysStarts_[reuse,use_induction]:
      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma AlwaysStartsWhenEnds_[reuse,use_induction]:
      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma TransitionOnce_[reuse,use_induction]:
      "All x p %i #j #k . Transition_(x, p, %i) @ #j &
        Transition_(x, p, %i) @ #k ==> #j = #k"


lemma Correspondence : all-traces "All  #time_1 . Deleted()@#time_1 ==> Ex  #time_2 . Allocating()@#time_2 & #time_2 < #time_1 "
lemma Reachable : exists-trace "Ex  #time_0 . Deleted()@#time_0 "
end

