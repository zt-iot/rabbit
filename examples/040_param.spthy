theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: false/0, true/0, verify/3, sign/2, pk/1, snd/1, fst/1
equations: verify(sign(loc_1, loc_0), loc_1, pk(loc_0))=true(), snd(<loc_1, loc_0>)=loc_0, fst(<loc_1, loc_0>)=loc_1

// Initializing the gloval constants and access policy rules:




// Global Constants:


rule Const_privkey : [Fr(privkey)]--[Init_('rab_Const_privkey'), Init_(<'rab_Const_privkey', privkey>), !Const_('rab_privkey', privkey)]->[!Const_('rab_privkey', privkey)] 

rule Const_pubkey : [!Const_('rab_privkey', privkey)]--[!Const_('rab_pubkey', pk(privkey))]->[!Const_('rab_pubkey', pk(privkey))] 


// Parametric global Constants:



// Access control:


rule Init_system[role="system"] : []--[Init_('rab_system')]->[State_Client(<'rab___0', 'rab_rab', %1>, 'rab_', 'rab_', 'rab_', 'rab_'), !ACP_GEN_('rab_system_', 'rab_rab')] 

// Model:  Client



rule Client_merged___0___7_25[role="Client"] : [State_Client(<'rab___0', param, %v_>, return_var_0, 'rab_', 'rab_', 'rab_'), Fr(n_0_0), !Const_('rab_pubkey', pubkey_2), !Eq_(verify(sign(n_0_0, privkey_1), n_0_0, pubkey_2), false()), !Const_('rab_privkey', privkey_1)]--[Transition_(<'rab_Client', param>, 'rab___0', %v_), Invalid()]->[State_Client(<'rab___7', param, %v_>, 'rab_', 'rab_', 'rab_', 'rab_')] 

rule Client_merged___0___7_24[role="Client"] : [State_Client(<'rab___0', param, %v_>, return_var_0, 'rab_', 'rab_', 'rab_'), Fr(n_0_0), !Const_('rab_pubkey', pubkey_2), !Eq_(verify(sign(n_0_0, privkey_1), n_0_0, pubkey_2), true()), !Const_('rab_privkey', privkey_1)]--[Transition_(<'rab_Client', param>, 'rab___0', %v_), Valid()]->[State_Client(<'rab___7', param, %v_>, 'rab_', 'rab_', 'rab_', 'rab_')] 

restriction Init_ : " All x #i #j . Init_(x) @ #i & Init_(x) @ #j ==> #i = #j "
rule Equality_gen: [] --> [!Eq_(x,x)]
rule NEquality_gen: [] --[NEq__(x,y)]-> [!NEq_(x,y)]
restriction NEquality_rule: "All x #i. NEq__(x,x) @ #i ==> F"
lemma AlwaysStarts_[reuse,use_induction]:

      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"
lemma AlwaysStartsWhenEnds_[reuse,use_induction]:

      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"
lemma TransitionOnce_[reuse,use_induction]:

      "All x p %i #j #k . Transition_(x, p, %i) @#j &
        Transition_(x, p, %i) @ #k ==> #j = #k"

lemma NotReachable : exists-trace "Ex  #time_0 . Invalid()@#time_0 "
lemma Reachable : exists-trace "Ex  #time_0 . Valid()@#time_0 "
end

