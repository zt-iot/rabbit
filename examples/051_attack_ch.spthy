theory rabbit

begin
builtins: natural-numbers


// The signature of our model:






// Initializing the gloval constants and access policy rules:




// Constants:



// Add model inits: Alice


rule Init_system[role="system"]
  : [  ]
    --[ Init('system') ]->
    [ !ACP_GEN_('system_', 'str:'),
      State('Alice', 'idx_0', 'str:', %1, '()') ]


// Access control of Alice:ch



// Fact: !ACP_(<'Alice', 'str:'>, 'ch', 'recv')


rule Init_system_ACP_0[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_0') ]->
    [ !ACP_(<'Alice', 'str:'>, 'ch', 'recv') ]


// Fact: !ACP_(<'Alice', 'str:'>, 'ch', 'send')


rule Init_system_ACP_1[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_1') ]->
    [ !ACP_(<'Alice', 'str:'>, 'ch', 'send') ]

// Model:  Alice


rule Alice_new_intro_event_idx_0_idx_2_45[role="Alice"]
  : [ State('Alice', 'idx_0', param, %v_, rho_0),
      Fr(n_0_0) ]
    --[ Transition_(<'Alice', param>, 'idx_0', %v_),
        Send(n_0_0) ]->
    [ State('Alice', 'idx_2', param, %v_, <'()', n_0_0>) ]

rule Alice_scall_intro_put__idx_2_idx_4__0_0_44[role="Alice"]
  : [ State('Alice', 'idx_2', param, %v_, <rho_2, m_0_2>),
      !ACP_(<'Alice', param>, 'ch', 'send') ]
    --[ Transition_(<'Alice', param>, 'idx_2', %v_) ]->
    [ State('Alice', 'idx_4__0_0', param, %v_, <'()', m_0_2, 'ch', 'str:'>),
      Store('ch', m_0_2) ]

rule Alice_scall_intro_put__idx_2_idx_4__1_0_43[role="Alice"]
  : [ State('Alice', 'idx_2', param, %v_, <rho_2, m_0_2>),
      !ACP_(<'Alice', param>, 'ch', 'send') ]
    --[ Transition_(<'Alice', param>, 'idx_2', %v_) ]->
    [ State('Alice', 'idx_4__1_0', param, %v_, <'()', m_0_2, 'ch', 'str:'>),
      Store('ch', m_0_2) ]

rule Alice_guarded_return_c_idx_4__1_0_idx_5_36[role="Alice"]
  : [ State('Alice', 'idx_4__1_0', param, %v_, <rho_7, m_0_7, l_0_7, l_1_7>),
      !ACP_(<'Alice', param>, l_0_7, 'recv'),
      In(n_1_7),
      Store(l_0_7, n_0_7) ]
    --[ Transition_(<'Alice', param>, 'idx_4__1_0', %v_) ]->
    [ State('Alice', 'idx_5', param, %v_, <'()', m_0_7, n_1_7>) ]

rule Alice_guarded_return_c_idx_4__0_0_idx_5_33[role="Alice"]
  : [ State('Alice', 'idx_4__0_0', param, %v_, <rho_12, m_0_12, l_0_12, l_1_12>),
      !ACP_(<'Alice', param>, l_0_12, 'recv'),
      Store(l_0_12, n_0_12) ]
    --[ Transition_(<'Alice', param>, 'idx_4__0_0', %v_) ]->
    [ State('Alice', 'idx_5', param, %v_, <'()', m_0_12, n_0_12>) ]

rule Alice_guarded_event_ca_idx_5_idx_8_30[role="Alice"]
  : [ State('Alice', 'idx_5', param, %v_, <rho_16, m_0_16, l_0_16>) ]
    --[ Transition_(<'Alice', param>, 'idx_5', %v_),
        Valid(m_0_16),
        Eq_(m_0_16, l_0_16) ]->
    [ State('Alice', 'idx_8', param, %v_, '()') ]

rule Alice_guarded_event_ca_idx_5_idx_8_29[role="Alice"]
  : [ State('Alice', 'idx_5', param, %v_, <rho_19, m_0_19, l_0_19>) ]
    --[ Transition_(<'Alice', param>, 'idx_5', %v_),
        Invalid(),
        NEq_(m_0_19, l_0_19) ]->
    [ State('Alice', 'idx_8', param, %v_, '()') ]

restriction Init_ : " All x #i #j . Init(x) @ #i & Init(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"

lemma AlwaysStarts_[reuse,use_induction]:
      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma AlwaysStartsWhenEnds_[reuse,use_induction]:
      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma TransitionOnce_[reuse,use_induction]:
      "All x p %i #j #k . Transition_(x, p, %i) @ #j &
        Transition_(x, p, %i) @ #k ==> #j = #k"


lemma Tampered : exists-trace "Ex  #time_0 . Invalid()@#time_0 "
lemma Corresponds : all-traces "All new_0 #time_1 . Valid(new_0)@#time_1 ==> Ex  #time_2 . Send(new_0)@#time_2 & #time_2 < #time_1 "
lemma Reachable : exists-trace "Ex new_0 #time_0 . Valid(new_0)@#time_0 "
end

