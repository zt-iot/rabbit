(* security primitives *)
function vk : key[Sig]@(s, i) -> key[Ver]@(Public, i)

function enc : 'a -> key[Sym, 'a]@(Public, i) -> cipher['a]@(Public, i)
function dec : cipher['a] -> key[Sym, 'a] -> 'a
equation dec(enc(x, y), y) = x

function sign : 'a -> key[Sig, 'a]@(s, i) -> signature@(S('a), i) (* signature@('a, i) will match any "signature security type", E.G.*)

function fst : 'a * 'b -> 'a
function snd : 'a * 'b -> 'b
equation fst ((x, y)) = x
equation snd ((x, y)) = y
function true : bool                                        (* A 0-argument function, aka a constant, which is of type bool *)
function verify : signature@(s', i') -> 'a@(s', i') -> key[Ver, 'a]@(s, i) -> bool

equation verify (sign(d, k), d, vk(k)) = true