theory rabbit

begin
builtins: natural-numbers


// The signature of our model:






// Initializing the gloval constants and access policy rules:




// Constants:



// const fresh c


rule Const_c
  : [ Fr(c) ]
    --[ Init('Const_c'),
        !Const('c', c) ]->
    [ !Const('c', c) ]


// const c2 = <c, c>


rule Const_c2
  : [ !Const('c', c),
      !Const('c', c) ]
    --[ !Const('c2', <c, c>) ]->
    [ !Const('c2', <c, c>) ]


// const fresh cp<>


rule Const_cp
  : [ Fr(cp) ]
    --[ Init(<'cp', param>),
        !Const(<'cp', param>, cp) ]->
    [ !Const(<'cp', param>, cp) ]


// const fresh cp2<p> = <cp_0, cp_1>


rule Const_cp2
  : [ !Const(<'cp', param>, cp_0),
      !Const(<'cp', <param, param>>, cp_1) ]
    --[ Init(<'cp2', param>),
        !Const(<'cp2', param>, <cp_0, cp_1>) ]->
    [ !Const(<'cp2', param>, <cp_0, cp_1>) ]


// Add model inits: 


rule Init_system[role="system"]
  : [  ]
    --[ Init('system') ]->
    [ !ACP_GEN_('system_', 'str:') ]


// Add model inits: Proc


rule Init_system1[role="system1"]
  : [ Fr(param) ]
    --[ Init(<'system1', param>) ]->
    [ !ACP_GEN_('system1_', param),
      State('Proc', 'idx_0', param, %1, '()') ]

// Model:  Proc


rule Proc_return_idx_1_idx_2_1[role="Proc"]
  : [ State('Proc', 'idx_1', param, %v_, rho_1),
      !Const(<'cp2', <param, param>>, cp2_1_1),
      !Const(<'cp', param>, cp_0_1),
      !Const('c2', c2_1),
      !Const('c', c_1) ]
    --[ Transition_(<'Proc', param>, 'idx_1', %v_) ]->
    [ State('Proc', 'idx_2', param, %v_, <c_1, c2_1, cp_0_1, cp2_1_1>) ]

rule Proc_event_idx_0_idx_1_0[role="Proc"]
  : [ State('Proc', 'idx_0', param, %v_, rho_0) ]
    --[ Transition_(<'Proc', param>, 'idx_0', %v_),
        Valid() ]->
    [ State('Proc', 'idx_1', param, %v_, '()') ]

restriction Init_ : " All x #i #j . Init(x) @ #i & Init(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"

lemma AlwaysStarts_[reuse,use_induction]:
      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma AlwaysStartsWhenEnds_[reuse,use_induction]:
      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma TransitionOnce_[reuse,use_induction]:
      "All x p %i #j #k . Transition_(x, p, %i) @ #j &
        Transition_(x, p, %i) @ #k ==> #j = #k"


lemma Reachable : exists-trace "Ex  #time_0 . Valid()@#time_0 "
end

