theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: fst/1, snd/1, enc/2, dec/2
equations: fst(<loc_1, loc_0>)=loc_1, snd(<loc_1, loc_0>)=loc_0, dec(enc(loc_1, loc_0), loc_0)=loc_1

// Initializing the gloval constants and access policy rules:




// Constants:



// const fresh sym_k


rule Const_sym_k
  : [Fr(sym_k)]
    --[Init_('rab_Const_sym_k'), !Const_('rab_sym_k', sym_k)]->
    [!Const_('rab_sym_k', sym_k)] 


// Add model inits: Alice,Bob


rule Init_system[role="system"]
  : []
    --[Init_('rab_system')]->
    [!ACP_GEN_('rab_system_', 'rab_rab_str'), State_Alice(<'rab___0', 'rab_rab_str', %1>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty'), State_Bob(<'rab___0', 'rab_rab_str', %1>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty')] 


// Access control of Alice:chan2



// Fact: !ACP_(<'rab_Alice', 'rab_rab_str'>, 'rab_chan2', 'rab_recv')


rule Init_system_ACP_0[role="system"]
  : [!ACP_GEN_('rab_system_', 'rab_rab_str')]
    --[Init_('rab_system_ACP_0')]->
    [!ACP_(<'rab_Alice', 'rab_rab_str'>, 'rab_chan2', 'rab_recv')] 


// Fact: !ACP_(<'rab_Alice', 'rab_rab_str'>, 'rab_chan2', 'rab_send')


rule Init_system_ACP_1[role="system"]
  : [!ACP_GEN_('rab_system_', 'rab_rab_str')]
    --[Init_('rab_system_ACP_1')]->
    [!ACP_(<'rab_Alice', 'rab_rab_str'>, 'rab_chan2', 'rab_send')] 


// Access control of Alice:chan



// Fact: !ACP_(<'rab_Alice', 'rab_rab_str'>, 'rab_chan', 'rab_recv')


rule Init_system_ACP_2[role="system"]
  : [!ACP_GEN_('rab_system_', 'rab_rab_str')]
    --[Init_('rab_system_ACP_2')]->
    [!ACP_(<'rab_Alice', 'rab_rab_str'>, 'rab_chan', 'rab_recv')] 


// Fact: !ACP_(<'rab_Alice', 'rab_rab_str'>, 'rab_chan', 'rab_send')


rule Init_system_ACP_3[role="system"]
  : [!ACP_GEN_('rab_system_', 'rab_rab_str')]
    --[Init_('rab_system_ACP_3')]->
    [!ACP_(<'rab_Alice', 'rab_rab_str'>, 'rab_chan', 'rab_send')] 


// Access control of Bob:chan2



// Fact: !ACP_(<'rab_Bob', 'rab_rab_str'>, 'rab_chan2', 'rab_recv')


rule Init_system_ACP_4[role="system"]
  : [!ACP_GEN_('rab_system_', 'rab_rab_str')]
    --[Init_('rab_system_ACP_4')]->
    [!ACP_(<'rab_Bob', 'rab_rab_str'>, 'rab_chan2', 'rab_recv')] 


// Fact: !ACP_(<'rab_Bob', 'rab_rab_str'>, 'rab_chan2', 'rab_send')


rule Init_system_ACP_5[role="system"]
  : [!ACP_GEN_('rab_system_', 'rab_rab_str')]
    --[Init_('rab_system_ACP_5')]->
    [!ACP_(<'rab_Bob', 'rab_rab_str'>, 'rab_chan2', 'rab_send')] 


// Access control of Bob:chan



// Fact: !ACP_(<'rab_Bob', 'rab_rab_str'>, 'rab_chan', 'rab_recv')


rule Init_system_ACP_6[role="system"]
  : [!ACP_GEN_('rab_system_', 'rab_rab_str')]
    --[Init_('rab_system_ACP_6')]->
    [!ACP_(<'rab_Bob', 'rab_rab_str'>, 'rab_chan', 'rab_recv')] 


// Fact: !ACP_(<'rab_Bob', 'rab_rab_str'>, 'rab_chan', 'rab_send')


rule Init_system_ACP_7[role="system"]
  : [!ACP_GEN_('rab_system_', 'rab_rab_str')]
    --[Init_('rab_system_ACP_7')]->
    [!ACP_(<'rab_Bob', 'rab_rab_str'>, 'rab_chan', 'rab_send')] 

// Model:  Alice


rule Alice_repeat_in_guarded_let_intro_scall_intro___0___1_0_1_0_0_32[role="Alice"]
  : [State_Alice(<'rab___0', param, %v_>, return_var_0, 'rab_empty', 'rab_empty', 'rab_empty')]
    --[Transition_(<'rab_Alice', param>, 'rab___0', %v_), Loop_Start(<'rab_Alice', param>, 'rab___0')]->
    [State_Alice(<'rab___1_0_1_0_0', param, %v_>, 'rab_unit', 'rab_empty', <'rab_chan', 'rab_'>, 'rab_empty')] 

rule Alice_guarded_skip_repeat_out___1___2_30[role="Alice"]
  : [State_Alice(<'rab___1', param, %v_>, return_var_16, 'rab_empty', 'rab_empty', 'rab_empty'), False()]
    --[Transition_(<'rab_Alice', param>, 'rab___1', %v_), Loop_Finish(<'rab_Alice', param>, 'rab___0')]->
    [State_Alice(<'rab___2', param, %v_>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty')] 

rule Alice_guarded_return_case_out_scall_out_new_intro_event___1_0_1_0_0___1_0_4_28[role="Alice"]
  : [State_Alice(<'rab___1_0_1_0_0', param, %v_>, return_var_4, 'rab_empty', <l_0_4, l_1_4>, 'rab_empty'), Fr(n_0_8), !ACP_(<'rab_Alice', param>, l_0_4, 'rab_recv'), Store(l_0_4, n_0_4)]
    --[Transition_(<'rab_Alice', param>, 'rab___1_0_1_0_0', %v_), Sent(n_0_8, n_0_4)]->
    [State_Alice(<'rab___1_0_4', param, %v_>, 'rab_unit', n_0_8, n_0_4, 'rab_empty')] 

rule Alice_scall_intro_put_scall_out_new_out_let_out___1_0_4___1_0_7_23[role="Alice"]
  : [State_Alice(<'rab___1_0_4', param, %v_>, return_var_10, m_0_10, l_0_10, 'rab_empty'), !ACP_(<'rab_Alice', param>, 'rab_chan2', 'rab_send'), !Const_('rab_sym_k', sym_k_10)]
    --[Transition_(<'rab_Alice', param>, 'rab___1_0_4', %v_)]->
    [State_Alice(<'rab___1_0_7', param, %v_>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty'), Store('rab_chan2', enc(<m_0_10, l_0_10>, sym_k_10))] 

rule Alice_repeat___1_0_7___1_15[role="Alice"]
  : [State_Alice(<'rab___1_0_7', param, %v_>, return_var_15, 'rab_empty', 'rab_empty', 'rab_empty')]
    --[Transition_(<'rab_Alice', param>, 'rab___1_0_7', %v_), Loop_Back(<'rab_Alice', param>, 'rab___0')]->
    [State_Alice(<'rab___1', param, %v_ %+ %1>, return_var_15, 'rab_empty', 'rab_empty', 'rab_empty')] 

rule Alice_repeat_in___0___1_0[role="Alice"]
  : [State_Alice(<'rab___0', param, %v_>, return_var_0, 'rab_empty', 'rab_empty', 'rab_empty')]
    --[Transition_(<'rab_Alice', param>, 'rab___0', %v_), Loop_Start(<'rab_Alice', param>, 'rab___0')]->
    [State_Alice(<'rab___1', param, %v_>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty')] 


// Model:  Bob


rule Bob_guarded_new_intro_scall_intro_put_scall_out_let_intro_scall_intro___1___1_0_3_0_0_61[role="Bob"]
  : [State_Bob(<'rab___1', param, %v_>, return_var_1, 'rab_empty', 'rab_empty', 'rab_empty'), Fr(n_0_2), !ACP_(<'rab_Bob', param>, 'rab_chan', 'rab_send')]
    --[Transition_(<'rab_Bob', param>, 'rab___1', %v_)]->
    [State_Bob(<'rab___1_0_3_0_0', param, %v_>, 'rab_unit', n_0_2, <'rab_chan2', 'rab_'>, 'rab_empty'), Store('rab_chan', n_0_2)] 

rule Bob_guarded_skip_repeat_out___1___2_60[role="Bob"]
  : [State_Bob(<'rab___1', param, %v_>, return_var_27, 'rab_empty', 'rab_empty', 'rab_empty'), False()]
    --[Transition_(<'rab_Bob', param>, 'rab___1', %v_), Loop_Finish(<'rab_Bob', param>, 'rab___0')]->
    [State_Bob(<'rab___2', param, %v_>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty')] 

rule Bob_guarded_return_case_out_scall_out_let_intro_let_intro_let_intro_guarded_event_case_out_let_out_let_out_let_out_let_out_new_out___1_0_3_0_0___1_0_13_54[role="Bob"]
  : [State_Bob(<'rab___1_0_3_0_0', param, %v_>, return_var_8, m_0_8, <l_0_8, l_1_8>, 'rab_empty'), !Const_('rab_sym_k', sym_k_12), !ACP_(<'rab_Bob', param>, l_0_8, 'rab_recv'), Store(l_0_8, n_0_8)]
    --[Transition_(<'rab_Bob', param>, 'rab___1_0_3_0_0', %v_), Invalid(), NEq_(m_0_8, snd(dec(n_0_8, sym_k_12)))]->
    [State_Bob(<'rab___1_0_13', param, %v_>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty')] 

rule Bob_guarded_return_case_out_scall_out_let_intro_let_intro_let_intro_guarded_event_case_out_let_out_let_out_let_out_let_out_new_out___1_0_3_0_0___1_0_13_53[role="Bob"]
  : [State_Bob(<'rab___1_0_3_0_0', param, %v_>, return_var_8, m_0_8, <l_0_8, l_1_8>, 'rab_empty'), !Const_('rab_sym_k', sym_k_12), !ACP_(<'rab_Bob', param>, l_0_8, 'rab_recv'), Store(l_0_8, n_0_8)]
    --[Transition_(<'rab_Bob', param>, 'rab___1_0_3_0_0', %v_), Valid(fst(dec(n_0_8, sym_k_12)), m_0_8), Eq_(m_0_8, snd(dec(n_0_8, sym_k_12)))]->
    [State_Bob(<'rab___1_0_13', param, %v_>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty')] 

rule Bob_repeat___1_0_13___1_26[role="Bob"]
  : [State_Bob(<'rab___1_0_13', param, %v_>, return_var_26, 'rab_empty', 'rab_empty', 'rab_empty')]
    --[Transition_(<'rab_Bob', param>, 'rab___1_0_13', %v_), Loop_Back(<'rab_Bob', param>, 'rab___0')]->
    [State_Bob(<'rab___1', param, %v_ %+ %1>, return_var_26, 'rab_empty', 'rab_empty', 'rab_empty')] 

rule Bob_repeat_in___0___1_0[role="Bob"]
  : [State_Bob(<'rab___0', param, %v_>, return_var_0, 'rab_empty', 'rab_empty', 'rab_empty')]
    --[Transition_(<'rab_Bob', param>, 'rab___0', %v_), Loop_Start(<'rab_Bob', param>, 'rab___0')]->
    [State_Bob(<'rab___1', param, %v_>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty')] 

restriction Init_ : " All x #i #j . Init_(x) @ #i & Init_(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"

lemma AlwaysStarts_[reuse,use_induction]:
      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma AlwaysStartsWhenEnds_[reuse,use_induction]:
      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma TransitionOnce_[reuse,use_induction]:
      "All x p %i #j #k . Transition_(x, p, %i) @#j &
        Transition_(x, p, %i) @ #k ==> #j = #k"


lemma Correspondence : all-traces "All new_0 new_1 #time_1 . Valid(new_1, new_0)@#time_1 ==> Ex  #time_2 . Sent(new_1, new_0)@#time_2 & #time_2 < #time_1 "
lemma Invalid : exists-trace "Ex  #time_0 . Invalid()@#time_0 "
lemma Valid : exists-trace "Ex new_0 new_1 #time_0 . Valid(new_1, new_0)@#time_0 "
end

