theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: true/0, eq/2
equations: eq(loc_0, loc_0)=true()

// Initializing the gloval constants and access policy rules:




// Constants:



// Add model inits: Proc


rule Init_system[role="system"]
  : [  ]
    --[ Init_('rab_system') ]->
    [ !ACP_GEN_('rab_system_', 'rab_rab_str'), State_Proc(<'rab___0', 'rab_rab_str', %1>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty') ] 

// Model:  Proc


rule Proc_guarded_event_case_out___0___1_4[role="Proc"]
  : [ State_Proc(<'rab___0', param, %v_>, return_var_0, 'rab_empty', 'rab_empty', 'rab_empty') ]
    --[ Transition_(<'rab_Proc', param>, 'rab___0', %v_), Valid(), Eq_(eq('1', '1'), true()) ]->
    [ State_Proc(<'rab___1', param, %v_>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty') ] 

restriction Init_ : " All x #i #j . Init_(x) @ #i & Init_(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"

lemma AlwaysStarts_[reuse,use_induction]:
      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma AlwaysStartsWhenEnds_[reuse,use_induction]:
      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma TransitionOnce_[reuse,use_induction]:
      "All x p %i #j #k . Transition_(x, p, %i) @#j &
        Transition_(x, p, %i) @ #k ==> #j = #k"


lemma Reachable : exists-trace "Ex  #time_0 . Valid()@#time_0 "
end

