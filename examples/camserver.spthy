theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: true/0, pk/1, enc/2, sign/2, dec/2, fst/1, snd/1, verify/3, h/1
equations: fst(<loc_1, loc_0>)=loc_1, snd(<loc_1, loc_0>)=loc_0, dec(enc(loc_1, loc_0), loc_0)=loc_1, verify(sign(loc_1, loc_0), loc_1, pk(loc_0))=true()

// Initializing the gloval constants and access policy rules:




// Constants:



// const fresh priv_k


rule Const_priv_k
  : [ Fr(priv_k) ]
    --[ Init('Const_priv_k'),
        !Const('priv_k', priv_k) ]->
    [ !Const('priv_k', priv_k) ]


// const fresh sym_k


rule Const_sym_k
  : [ Fr(sym_k) ]
    --[ Init('Const_sym_k'),
        !Const('sym_k', sym_k) ]->
    [ !Const('sym_k', sym_k) ]


// const fresh init_data


rule Const_init_data
  : [ Fr(init_data) ]
    --[ Init('Const_init_data'),
        !Const('init_data', init_data) ]->
    [ !Const('init_data', init_data) ]


// Add model inits: Client,Server,Client_ta


rule Init_system[role="system"]
  : [  ]
    --[ Init('system') ]->
    [ !ACP_GEN_('system_', 'str:'),
      State('Client', 'idx_0', 'str:', %1, '()'),
      State('Server', 'idx_0', 'str:', %1, '()'),
      State('Client_ta', 'idx_0', 'str:', %1, '()') ]


// Access control of Client:rpc



// Fact: !ACP_(<'Client', 'str:'>, 'rpc', 'close_rpc')


rule Init_system_ACP_0[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_0') ]->
    [ !ACP_(<'Client', 'str:'>, 'rpc', 'close_rpc') ]


// Fact: !ACP_(<'Client', 'str:'>, 'rpc', 'invoke_rpc')


rule Init_system_ACP_1[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_1') ]->
    [ !ACP_(<'Client', 'str:'>, 'rpc', 'invoke_rpc') ]


// Fact: !ACP_(<'Client', 'str:'>, 'rpc', 'connect_rpc')


rule Init_system_ACP_2[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_2') ]->
    [ !ACP_(<'Client', 'str:'>, 'rpc', 'connect_rpc') ]


// Fact: !ACP_(<'Client', 'str:'>, 'rpc', 'str:')


rule Init_system_ACP_3[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_3') ]->
    [ !ACP_(<'Client', 'str:'>, 'rpc', 'str:') ]


// Access control of Client:udp



// Fact: !ACP_(<'Client', 'str:'>, 'udp', 'send')


rule Init_system_ACP_4[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_4') ]->
    [ !ACP_(<'Client', 'str:'>, 'udp', 'send') ]


// Access control of Server:udp



// Fact: !ACP_(<'Server', 'str:'>, 'udp', 'recv')


rule Init_system_ACP_5[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_5') ]->
    [ !ACP_(<'Server', 'str:'>, 'udp', 'recv') ]


// Access control of Client_ta:rpc



// Fact: !ACP_(<'Client_ta', 'str:'>, 'rpc', 'accept_rpc')


rule Init_system_ACP_6[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_6') ]->
    [ !ACP_(<'Client_ta', 'str:'>, 'rpc', 'accept_rpc') ]


// Fact: !ACP_(<'Client_ta', 'str:'>, 'rpc', 'str:')


rule Init_system_ACP_7[role="system"]
  : [ !ACP_GEN_('system_', 'str:') ]
    --[ Init('system_ACP_7') ]->
    [ !ACP_(<'Client_ta', 'str:'>, 'rpc', 'str:') ]

// Model:  Client


rule Client_init_mem_init_me_idx_0_idx_4__0_1_95[role="Client"]
  : [ State('Client', 'idx_0', param, %v_, rho_0),
      !ACP_(<'Client', param>, 'rpc', 'connect_rpc') ]
    --[ Transition_(<'Client', param>, 'idx_0', %v_) ]->
    [ State('Client', 'idx_4__0_1', param, %v_, <'()', 'rpc', 'str:', 'sign_image', '_secret_priv', '_dev_camera'>),
      Req('rpc') ]

rule Client_guarded_new_intr_idx_4__0_1_idx_4__0_1__0_2_90[role="Client"]
  : [ State('Client', 'idx_4__0_1', param, %v_, <rho_6, l_0_6, l_1_6, t_0_6, t_1_6, t_2_6>),
      Fr(n_0_7),
      !ACP_(<'Client', param>, l_0_6, 'connect_rpc'),
      !ACP_(<'Client', param>, l_0_6, 'connect_rpc'),
      Ack(l_0_6) ]
    --[ Transition_(<'Client', param>, 'idx_4__0_1', %v_) ]->
    [ State('Client', 'idx_4__0_1__0_2', param, %v_, <'()', n_0_7, l_0_6, l_1_6, t_0_6, t_1_6, t_2_6>),
      Structure(<'Client', param>, 'chid', n_0_7, l_0_6),
      Conn(l_0_6) ]

rule Client_return_new_out_c_idx_4__0_1__0_2_idx_6_88[role="Client"]
  : [ State('Client', 'idx_4__0_1__0_2', param, %v_, <rho_9, m_0_9, l_0_9, l_1_9, t_0_9, t_1_9, t_2_9>) ]
    --[ Transition_(<'Client', param>, 'idx_4__0_1__0_2', %v_),
        Loop_Start(<'Client', param>, 'idx_5') ]->
    [ State('Client', 'idx_6', param, %v_, <'()', m_0_9, t_0_9, t_1_9, t_2_9>) ]

rule Client_guarded_let_intr_idx_6_idx_6__0_2__0_1_84[role="Client"]
  : [ State('Client', 'idx_6', param, %v_, <rho_14, l_0_14, t_0_14, t_1_14, t_2_14>),
      Fr(n_0_17) ]
    --[ Transition_(<'Client', param>, 'idx_6', %v_) ]->
    [ State('Client', 'idx_6__0_2__0_1', param, %v_, <'()', n_0_17, n_0_17, l_0_14, t_0_14, t_1_14, t_2_14>),
      Out(n_0_17) ]

rule Client_guarded_skip_rep_idx_6_idx_7_83[role="Client"]
  : [ State('Client', 'idx_6', param, %v_, <rho_43, l_0_43, t_0_43, t_1_43, t_2_43>) ]
    --[ Transition_(<'Client', param>, 'idx_6', %v_),
        Loop_Finish(<'Client', param>, 'idx_5') ]->
    [ State('Client', 'idx_7', param, %v_, <'()', l_0_43, t_0_43, t_1_43, t_2_43>) ]

rule Client_scall_out_let_in_idx_6__0_2__0_1_idx_6__0_4__0_2_75[role="Client"]
  : [ State('Client', 'idx_6__0_2__0_1', param, %v_, <rho_23, l_0_23, l_1_23, l_2_23, t_0_23, t_1_23, t_2_23>),
      Structure(<'Client', param>, 'chid', l_2_23, n_0_26),
      !ACP_(<'Client', param>, n_0_26, 'invoke_rpc') ]
    --[ Transition_(<'Client', param>, 'idx_6__0_2__0_1', %v_) ]->
    [ State('Client', 'idx_6__0_4__0_2', param, %v_, <'()', n_0_26, t_1_23, l_1_23, t_0_23, l_2_23, 'str:', l_1_23, l_2_23, t_0_23, t_1_23, t_2_23>),
      Structure(<'Client', param>, 'chid', l_2_23, n_0_26),
      Invoke(n_0_26, t_0_23, l_1_23, t_1_23) ]

rule Client_guarded_return_c_idx_6__0_4__0_2_idx_6__0_5__0_1_71[role="Client"]
  : [ State('Client', 'idx_6__0_4__0_2', param, %v_, <rho_28, m_0_28, l_0_28, l_1_28, l_2_28, l_3_28, l_4_28, l_5_28, l_6_28, t_0_28, t_1_28, t_2_28>),
      !ACP_(<'Client', param>, m_0_28, 'invoke_rpc'),
      Returned(m_0_28, n_0_28) ]
    --[ Transition_(<'Client', param>, 'idx_6__0_4__0_2', %v_) ]->
    [ State('Client', 'idx_6__0_5__0_1', param, %v_, <'()', n_0_28, n_0_28, l_5_28, l_6_28, t_0_28, t_1_28, t_2_28>),
      Out(n_0_28) ]

rule Client_scall_out_event_idx_6__0_5__0_1_idx_6__0_7_65[role="Client"]
  : [ State('Client', 'idx_6__0_5__0_1', param, %v_, <rho_35, l_0_35, l_1_35, l_2_35, l_3_35, t_0_35, t_1_35, t_2_35>) ]
    --[ Transition_(<'Client', param>, 'idx_6__0_5__0_1', %v_),
        ImgSend(l_2_35) ]->
    [ State('Client', 'idx_6__0_7', param, %v_, <'()', l_1_35, l_2_35, l_3_35, t_0_35, t_1_35, t_2_35>) ]

rule Client_scall_intro_put__idx_6__0_7_idx_6__0_10_64[role="Client"]
  : [ State('Client', 'idx_6__0_7', param, %v_, <rho_37, l_0_37, l_1_37, l_2_37, t_0_37, t_1_37, t_2_37>),
      !ACP_(<'Client', param>, 'udp', 'send') ]
    --[ Transition_(<'Client', param>, 'idx_6__0_7', %v_) ]->
    [ State('Client', 'idx_6__0_10', param, %v_, <'()', l_2_37, t_0_37, t_1_37, t_2_37>),
      Store('udp', <l_0_37, l_1_37>) ]

rule Client_scall_intro_get__idx_7_idx_7__0_3_59[role="Client"]
  : [ State('Client', 'idx_7', param, %v_, <rho_46, l_0_46, t_0_46, t_1_46, t_2_46>),
      Structure(<'Client', param>, 'chid', l_0_46, n_0_47),
      !ACP_(<'Client', param>, n_0_47, 'close_rpc') ]
    --[ Transition_(<'Client', param>, 'idx_7', %v_),
        Eq_(n_0_47, n_0_48) ]->
    [ State('Client', 'idx_7__0_3', param, %v_, <'()', n_0_47, l_0_46, l_0_46, t_0_46, t_1_46, t_2_46>),
      Exit(n_0_47) ]

rule Client_get_out_scall_ou_idx_7__0_3_idx_10_56[role="Client"]
  : [ State('Client', 'idx_7__0_3', param, %v_, <rho_50, m_0_50, l_0_50, l_1_50, t_0_50, t_1_50, t_2_50>) ]
    --[ Transition_(<'Client', param>, 'idx_7__0_3', %v_),
        ClientClose() ]->
    [ State('Client', 'idx_10', param, %v_, <'()', t_0_50, t_1_50, t_2_50>) ]

rule Client_repeat_idx_6__0_10_idx_6_42[role="Client"]
  : [ State('Client', 'idx_6__0_10', param, %v_, <rho_42, l_0_42, t_0_42, t_1_42, t_2_42>) ]
    --[ Transition_(<'Client', param>, 'idx_6__0_10', %v_),
        Loop_Back(<'Client', param>, 'idx_5') ]->
    [ State('Client', 'idx_6', param, %v_ %+ %1, <rho_42, l_0_42, t_0_42, t_1_42, t_2_42>) ]


// Model:  Server


rule Server_init_mem_let_int_idx_1_idx_7_83[role="Server"]
  : [ State('Server', 'idx_1', param, %v_, rho_1),
      File_Server(param, loc_0, n_0_4),
      !ACP_(<'Server', param>, '_secret_pub', 'fopen'),
      !ACP_(<'Server', param>, '_secret_pub', 'fopen'),
      Fr(n_0_5) ]
    --[ Transition_(<'Server', param>, 'idx_1', %v_),
        Loop_Start(<'Server', param>, 'idx_6'),
        Eq_(n_0_4, n_0_13) ]->
    [ State('Server', 'idx_7', param, %v_, <'()', n_0_13, n_0_5, '_secret_pub'>),
      File_Server(param, loc_0, n_0_4),
      Structure(<'Server', param>, 'Fd', n_0_5, n_0_13) ]

rule Server_guarded_let_intr_idx_7_idx_7__0_1__0_0_67[role="Server"]
  : [ State('Server', 'idx_7', param, %v_, <rho_18, l_0_18, l_1_18, t_0_18>) ]
    --[ Transition_(<'Server', param>, 'idx_7', %v_) ]->
    [ State('Server', 'idx_7__0_1__0_0', param, %v_, <'()', 'udp', 'str:', l_0_18, l_1_18, t_0_18>) ]

rule Server_guarded_let_intr_idx_7_idx_7__0_1__1_0_66[role="Server"]
  : [ State('Server', 'idx_7', param, %v_, <rho_18, l_0_18, l_1_18, t_0_18>) ]
    --[ Transition_(<'Server', param>, 'idx_7', %v_) ]->
    [ State('Server', 'idx_7__0_1__1_0', param, %v_, <'()', 'udp', 'str:', l_0_18, l_1_18, t_0_18>) ]

rule Server_guarded_skip_rep_idx_7_idx_10_65[role="Server"]
  : [ State('Server', 'idx_7', param, %v_, <rho_40, l_0_40, l_1_40, t_0_40>),
      False() ]
    --[ Transition_(<'Server', param>, 'idx_7', %v_),
        Loop_Finish(<'Server', param>, 'idx_6') ]->
    [ State('Server', 'idx_10', param, %v_, <'()', t_0_40>) ]

rule Server_guarded_return_c_idx_7__0_1__1_0_idx_7__0_2_62[role="Server"]
  : [ State('Server', 'idx_7__0_1__1_0', param, %v_, <rho_21, l_0_21, l_1_21, l_2_21, l_3_21, t_0_21>),
      !ACP_(<'Server', param>, l_0_21, 'recv'),
      In(n_1_21),
      Store(l_0_21, n_0_21) ]
    --[ Transition_(<'Server', param>, 'idx_7__0_1__1_0', %v_) ]->
    [ State('Server', 'idx_7__0_2', param, %v_, <'()', n_1_21, l_2_21, l_3_21, t_0_21>) ]

rule Server_guarded_return_c_idx_7__0_1__0_0_idx_7__0_2_59[role="Server"]
  : [ State('Server', 'idx_7__0_1__0_0', param, %v_, <rho_26, l_0_26, l_1_26, l_2_26, l_3_26, t_0_26>),
      !ACP_(<'Server', param>, l_0_26, 'recv'),
      Store(l_0_26, n_0_26) ]
    --[ Transition_(<'Server', param>, 'idx_7__0_1__0_0', %v_) ]->
    [ State('Server', 'idx_7__0_2', param, %v_, <'()', n_0_26, l_2_26, l_3_26, t_0_26>) ]

rule Server_let_intro_guarde_idx_7__0_2_idx_7__0_6_56[role="Server"]
  : [ State('Server', 'idx_7__0_2', param, %v_, <rho_30, l_0_30, l_1_30, l_2_30, t_0_30>) ]
    --[ Transition_(<'Server', param>, 'idx_7__0_2', %v_),
        ImgRecvInvalid(snd(l_0_30)),
        NEq_(verify(fst(l_0_30), snd(l_0_30), l_1_30), true()) ]->
    [ State('Server', 'idx_7__0_6', param, %v_, <'()', l_1_30, l_2_30, t_0_30>) ]

rule Server_let_intro_guarde_idx_7__0_2_idx_7__0_6_55[role="Server"]
  : [ State('Server', 'idx_7__0_2', param, %v_, <rho_30, l_0_30, l_1_30, l_2_30, t_0_30>) ]
    --[ Transition_(<'Server', param>, 'idx_7__0_2', %v_),
        ImgRecvValid(snd(l_0_30)),
        Eq_(verify(fst(l_0_30), snd(l_0_30), l_1_30), true()) ]->
    [ State('Server', 'idx_7__0_6', param, %v_, <'()', l_1_30, l_2_30, t_0_30>) ]

rule Server_repeat_idx_7__0_6_idx_7_39[role="Server"]
  : [ State('Server', 'idx_7__0_6', param, %v_, <rho_39, l_0_39, l_1_39, t_0_39>) ]
    --[ Transition_(<'Server', param>, 'idx_7__0_6', %v_),
        Loop_Back(<'Server', param>, 'idx_6') ]->
    [ State('Server', 'idx_7', param, %v_ %+ %1, <rho_39, l_0_39, l_1_39, t_0_39>) ]

rule Server_init_filesys_idx_0_idx_1_0[role="Server"]
  : [ State('Server', 'idx_0', param, %v_, rho_0),
      !Const('priv_k', priv_k_0) ]
    --[ Transition_(<'Server', param>, 'idx_0', %v_) ]->
    [ State('Server', 'idx_1', param, %v_, '()'),
      File_Server(param, '_secret_pub', pk(priv_k_0)),
      !ACP_(<'Server', param>, '_secret_pub', 'fclose'),
      !ACP_(<'Server', param>, '_secret_pub', 'fread'),
      !ACP_(<'Server', param>, '_secret_pub', 'fopen') ]


// Model:  Client_ta


rule Client_ta_guarded_guarded__idx_4_idx_4__0_1_90[role="Client_ta"]
  : [ State('Client_ta', 'idx_4', param, %v_, <rho_8, t_0_8>),
      !ACP_(<'Client_ta', param>, 'rpc', 'str:'),
      Fr(n_0_15),
      !ACP_(<'Client_ta', param>, n_0_8, 'fopen'),
      !ACP_(<'Client_ta', param>, n_0_8, 'fopen'),
      File_Client_ta(param, loc_0, n_0_14),
      !ACP_(<'Client_ta', param>, 'rpc', 'str:'),
      Invoke('rpc', n_2_8, n_1_8, n_0_8) ]
    --[ Transition_(<'Client_ta', param>, 'idx_4', %v_),
        Eq_(n_0_23, n_0_30),
        Eq_(n_2_8, 'sign_image'),
        Eq_(n_0_14, n_0_23) ]->
    [ State('Client_ta', 'idx_4__0_1', param, %v_, <'()', n_0_8, n_1_8, n_2_8, t_0_8>),
      File_Client_ta(param, loc_0, n_0_14),
      Returned('rpc', sign(n_1_8, dec(n_0_23, t_0_8))) ]

rule Client_ta_init_filesys_ini_idx_0_idx_2__0_0_89[role="Client_ta"]
  : [ State('Client_ta', 'idx_0', param, %v_, rho_0),
      !Const('sym_k', sym_k_1),
      !Const('sym_k', sym_k_0),
      !Const('priv_k', priv_k_0) ]
    --[ Transition_(<'Client_ta', param>, 'idx_0', %v_) ]->
    [ State('Client_ta', 'idx_2__0_0', param, %v_, <'()', 'rpc', sym_k_1>),
      File_Client_ta(param, '_secret_priv', enc(priv_k_0, sym_k_0)),
      !ACP_(<'Client_ta', param>, '_secret_priv', 'fclose'),
      !ACP_(<'Client_ta', param>, '_secret_priv', 'fread'),
      !ACP_(<'Client_ta', param>, '_secret_priv', 'fopen') ]

rule Client_ta_guarded_put_idx_2__0_0_idx_2__0_0__0_1_87[role="Client_ta"]
  : [ State('Client_ta', 'idx_2__0_0', param, %v_, <rho_3, l_0_3, t_0_3>),
      !ACP_(<'Client_ta', param>, l_0_3, 'accept_rpc'),
      !ACP_(<'Client_ta', param>, l_0_3, 'accept_rpc'),
      Req(l_0_3) ]
    --[ Transition_(<'Client_ta', param>, 'idx_2__0_0', %v_) ]->
    [ State('Client_ta', 'idx_2__0_0__0_1', param, %v_, <'()', l_0_3, t_0_3>),
      Ack(l_0_3) ]

rule Client_ta_case_out_scall_o_idx_2__0_0__0_1_idx_4_86[role="Client_ta"]
  : [ State('Client_ta', 'idx_2__0_0__0_1', param, %v_, <rho_5, l_0_5, t_0_5>) ]
    --[ Transition_(<'Client_ta', param>, 'idx_2__0_0__0_1', %v_),
        Loop_Start(<'Client_ta', param>, 'idx_3') ]->
    [ State('Client_ta', 'idx_4', param, %v_, <'()', t_0_5>) ]

rule Client_ta_guarded_guarded__idx_4_idx_4__0_1_84[role="Client_ta"]
  : [ State('Client_ta', 'idx_4', param, %v_, <rho_8, t_0_8>),
      !ACP_(<'Client_ta', param>, 'rpc', 'str:'),
      Invoke('rpc', n_2_8, n_1_8, n_0_8) ]
    --[ Transition_(<'Client_ta', param>, 'idx_4', %v_),
        InValidName_Client_ta(param, n_2_8),
        NEq_(n_2_8, 'sign_image') ]->
    [ State('Client_ta', 'idx_4__0_1', param, %v_, <'()', n_0_8, n_1_8, n_2_8, t_0_8>) ]

rule Client_ta_guarded_skip_rep_idx_4_idx_5_82[role="Client_ta"]
  : [ State('Client_ta', 'idx_4', param, %v_, <rho_45, t_0_45>),
      !ACP_(<'Client_ta', param>, 'rpc', 'str:'),
      Exit('rpc') ]
    --[ Transition_(<'Client_ta', param>, 'idx_4', %v_),
        Loop_Finish(<'Client_ta', param>, 'idx_3') ]->
    [ State('Client_ta', 'idx_5', param, %v_, <'()', t_0_45>) ]

rule Client_ta_event_idx_5_idx_6_48[role="Client_ta"]
  : [ State('Client_ta', 'idx_5', param, %v_, <rho_48, t_0_48>) ]
    --[ Transition_(<'Client_ta', param>, 'idx_5', %v_),
        ClientTAClose() ]->
    [ State('Client_ta', 'idx_6', param, %v_, <'()', t_0_48>) ]

rule Client_ta_repeat_idx_4__0_1_idx_4_44[role="Client_ta"]
  : [ State('Client_ta', 'idx_4__0_1', param, %v_, <rho_44, m_0_44, m_1_44, m_2_44, t_0_44>) ]
    --[ Transition_(<'Client_ta', param>, 'idx_4__0_1', %v_),
        Loop_Back(<'Client_ta', param>, 'idx_3') ]->
    [ State('Client_ta', 'idx_4', param, %v_ %+ %1, <rho_44, t_0_44>) ]

restriction Init_ : " All x #i #j . Init(x) @ #i & Init(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"

lemma AlwaysStarts_[reuse,use_induction]:
      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma AlwaysStartsWhenEnds_[reuse,use_induction]:
      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma TransitionOnce_[reuse,use_induction]:
      "All x p %i #j #k . Transition_(x, p, %i) @ #j &
        Transition_(x, p, %i) @ #k ==> #j = #k"


lemma Correspondence : all-traces "All new_0 #time_1 . ImgRecvValid(new_0)@#time_1 ==> Ex  #time_2 . ImgSend(new_0)@#time_2 & #time_2 < #time_1 "
lemma Reachable : exists-trace "Ex new_0 #time_2  #time_1  #time_0 . ImgRecvValid(new_0)@#time_2 & ClientTAClose()@#time_1 & ClientClose()@#time_0 "
end

