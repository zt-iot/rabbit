theory rabbit

begin
builtins: natural-numbers


// The signature of our model:






// Initializing the gloval constants and access policy rules:




// Constants:



// Add model inits: Proc


rule Init_system[role="system"]
  : [  ]
    --[ Init('system') ]->
    [ !ACP_GEN_('system_', 'str:'),
      State('Proc', 'idx_0', 'str:', %1, '()') ]

// Model:  Proc


rule Proc_new_intro_new_in_idx_0_idx_2_22[role="Proc"]
  : [ State('Proc', 'idx_0', param, %v_, rho_0),
      Fr(n_0_1),
      Fr(n_0_0) ]
    --[ Transition_(<'Proc', param>, 'idx_0', %v_) ]->
    [ State('Proc', 'idx_2', param, %v_, <'()', n_0_1, n_0_0>),
      Structure(<'Proc', param>, 'S', n_0_0, <'1', '2', '3'>),
      Structure(<'Proc', param>, 'S', n_0_1, <'4', '5', '6'>) ]

rule Proc_get_intro_guarde_idx_2_idx_7_21[role="Proc"]
  : [ State('Proc', 'idx_2', param, %v_, <rho_2, m_0_2, m_1_2>),
      Structure(<'Proc', param>, 'S', m_1_2, <n_0_2, n_1_2, n_2_2>) ]
    --[ Transition_(<'Proc', param>, 'idx_2', %v_),
        Invalid(),
        Eq_(n_0_2, '4'),
        Eq_(n_1_2, '5'),
        Eq_(n_2_2, '6') ]->
    [ State('Proc', 'idx_7', param, %v_, '()'),
      Structure(<'Proc', param>, 'S', m_1_2, <n_0_2, n_1_2, n_2_2>) ]

rule Proc_get_intro_guarde_idx_2_idx_7_20[role="Proc"]
  : [ State('Proc', 'idx_2', param, %v_, <rho_2, m_0_2, m_1_2>),
      Structure(<'Proc', param>, 'S', m_1_2, <n_0_2, n_1_2, n_2_2>) ]
    --[ Transition_(<'Proc', param>, 'idx_2', %v_),
        Valid(),
        Eq_(n_0_2, '1'),
        Eq_(n_1_2, '2'),
        Eq_(n_2_2, '3') ]->
    [ State('Proc', 'idx_7', param, %v_, '()'),
      Structure(<'Proc', param>, 'S', m_1_2, <n_0_2, n_1_2, n_2_2>) ]

restriction Init_ : " All x #i #j . Init(x) @ #i & Init(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"

lemma AlwaysStarts_[reuse,use_induction]:
      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma AlwaysStartsWhenEnds_[reuse,use_induction]:
      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma TransitionOnce_[reuse,use_induction]:
      "All x p %i #j #k . Transition_(x, p, %i) @ #j &
        Transition_(x, p, %i) @ #k ==> #j = #k"


lemma Uneachable : exists-trace "Ex  #time_0 . Invalid()@#time_0 "
lemma Reachable : exists-trace "Ex  #time_0 . Valid()@#time_0 "
end

