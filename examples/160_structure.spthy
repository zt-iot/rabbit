theory rabbit

begin
builtins: natural-numbers


// The signature of our model:






// Initializing the gloval constants and access policy rules:




// Constants:



// Add model inits: Proc


rule Init_system[role="system"]
  : [  ]
    --[ Init_('rab_system') ]->
    [ !ACP_GEN_('rab_system_', 'rab_rab_str'), State_Proc(<'rab___0', 'rab_rab_str', %1>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty') ] 

// Model:  Proc


rule Proc_new_intro_new_in___0___2_22[role="Proc"]
  : [ State_Proc(<'rab___0', param, %v_>, return_var_0, 'rab_empty', 'rab_empty', 'rab_empty'), Fr(n_0_1), Fr(n_0_0) ]
    --[ Transition_(<'rab_Proc', param>, 'rab___0', %v_) ]->
    [ State_Proc(<'rab___2', param, %v_>, 'rab_unit', <n_0_1, n_0_0>, 'rab_empty', 'rab_empty'), S_Proc(param, n_0_0, <'1', '2', '3'>), S_Proc(param, n_0_1, <'4', '5', '6'>) ] 

rule Proc_get_intro_guarde___2___7_21[role="Proc"]
  : [ State_Proc(<'rab___2', param, %v_>, return_var_2, <m_0_2, m_1_2>, 'rab_empty', 'rab_empty'), S_Proc(param, m_1_2, <n_0_2, n_1_2, n_2_2>) ]
    --[ Transition_(<'rab_Proc', param>, 'rab___2', %v_), Invalid(), Eq_(n_0_2, '4'), Eq_(n_1_2, '5'), Eq_(n_2_2, '6') ]->
    [ State_Proc(<'rab___7', param, %v_>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty'), S_Proc(param, m_1_2, <n_0_2, n_1_2, n_2_2>) ] 

rule Proc_get_intro_guarde___2___7_20[role="Proc"]
  : [ State_Proc(<'rab___2', param, %v_>, return_var_2, <m_0_2, m_1_2>, 'rab_empty', 'rab_empty'), S_Proc(param, m_1_2, <n_0_2, n_1_2, n_2_2>) ]
    --[ Transition_(<'rab_Proc', param>, 'rab___2', %v_), Valid(), Eq_(n_0_2, '1'), Eq_(n_1_2, '2'), Eq_(n_2_2, '3') ]->
    [ State_Proc(<'rab___7', param, %v_>, 'rab_unit', 'rab_empty', 'rab_empty', 'rab_empty'), S_Proc(param, m_1_2, <n_0_2, n_1_2, n_2_2>) ] 

restriction Init_ : " All x #i #j . Init_(x) @ #i & Init_(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"

lemma AlwaysStarts_[reuse,use_induction]:
      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma AlwaysStartsWhenEnds_[reuse,use_induction]:
      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma TransitionOnce_[reuse,use_induction]:
      "All x p %i #j #k . Transition_(x, p, %i) @#j &
        Transition_(x, p, %i) @ #k ==> #j = #k"


lemma Uneachable : exists-trace "Ex  #time_0 . Invalid()@#time_0 "
lemma Reachable : exists-trace "Ex  #time_0 . Valid()@#time_0 "
end

