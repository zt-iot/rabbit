theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: h/1


// Initializing the gloval constants and access policy rules:




// Constants:



// Add model inits: 


rule Init_system[role="system"]
  : [  ]
    --[ Init('system') ]->
    [ !ACP_GEN_('system_', 'str:') ]


// Add model inits: Client_ta,Client


rule Init_system1[role="system1"]
  : [ Fr(param) ]
    --[ Init(<'system1', param>) ]->
    [ !ACP_GEN_('system1_', param),
      State('Client_ta', 'idx_0', param, %1, '()'),
      State('Client', 'idx_0', param, %1, '()') ]


// Access control of Client_ta:rpc



// Fact: !ACP_(<'Client_ta', param>, <'rpc', param>, 'accept_rpc')


rule Init_system1_ACP_0[role="system1"]
  : [ !ACP_GEN_('system1_', param) ]
    --[ Init(<'system1_ACP_0', param>) ]->
    [ !ACP_(<'Client_ta', param>, <'rpc', param>, 'accept_rpc') ]


// Fact: !ACP_(<'Client_ta', param>, <'rpc', param>, 'str:')


rule Init_system1_ACP_1[role="system1"]
  : [ !ACP_GEN_('system1_', param) ]
    --[ Init(<'system1_ACP_1', param>) ]->
    [ !ACP_(<'Client_ta', param>, <'rpc', param>, 'str:') ]


// Access control of Client:rpc



// Fact: !ACP_(<'Client', param>, <'rpc', param>, 'invoke_rpc')


rule Init_system1_ACP_2[role="system1"]
  : [ !ACP_GEN_('system1_', param) ]
    --[ Init(<'system1_ACP_2', param>) ]->
    [ !ACP_(<'Client', param>, <'rpc', param>, 'invoke_rpc') ]


// Fact: !ACP_(<'Client', param>, <'rpc', param>, 'connect_rpc')


rule Init_system1_ACP_3[role="system1"]
  : [ !ACP_GEN_('system1_', param) ]
    --[ Init(<'system1_ACP_3', param>) ]->
    [ !ACP_(<'Client', param>, <'rpc', param>, 'connect_rpc') ]


// Fact: !ACP_(<'Client', param>, <'rpc', param>, 'str:')


rule Init_system1_ACP_4[role="system1"]
  : [ !ACP_GEN_('system1_', param) ]
    --[ Init(<'system1_ACP_4', param>) ]->
    [ !ACP_(<'Client', param>, <'rpc', param>, 'str:') ]

// Model:  Client_ta


rule Client_ta_guarded_put_case_idx_0__0_0_idx_1_13[role="Client_ta"]
  : [ State('Client_ta', 'idx_0__0_0', param, %v_, <rho_1, l_0_1>),
      !ACP_(<'Client_ta', param>, l_0_1, 'accept_rpc'),
      !ACP_(<'Client_ta', param>, l_0_1, 'accept_rpc'),
      Req(l_0_1) ]
    --[ Transition_(<'Client_ta', param>, 'idx_0__0_0', %v_) ]->
    [ State('Client_ta', 'idx_1', param, %v_, '()'),
      Ack(l_0_1) ]

rule Client_ta_guarded_put_idx_1_idx_1__0_1_10[role="Client_ta"]
  : [ State('Client_ta', 'idx_1', param, %v_, rho_5),
      !ACP_(<'Client_ta', param>, <'rpc', param>, 'str:'),
      !ACP_(<'Client_ta', param>, <'rpc', param>, 'str:'),
      Invoke(<'rpc', param>, n_0_5) ]
    --[ Transition_(<'Client_ta', param>, 'idx_1', %v_) ]->
    [ State('Client_ta', 'idx_1__0_1', param, %v_, <'()', n_0_5>),
      Returned(<'rpc', param>, '2') ]

rule Client_ta_case_out_event_idx_1__0_1_idx_3_9[role="Client_ta"]
  : [ State('Client_ta', 'idx_1__0_1', param, %v_, <rho_7, m_0_7>) ]
    --[ Transition_(<'Client_ta', param>, 'idx_1__0_1', %v_),
        ClientTAClose() ]->
    [ State('Client_ta', 'idx_3', param, %v_, '()') ]

rule Client_ta_scall_intro_idx_0_idx_0__0_0_0[role="Client_ta"]
  : [ State('Client_ta', 'idx_0', param, %v_, rho_0) ]
    --[ Transition_(<'Client_ta', param>, 'idx_0', %v_) ]->
    [ State('Client_ta', 'idx_0__0_0', param, %v_, <'()', <'rpc', param>>) ]


// Model:  Client


rule Client_let_intro_scall__idx_0_idx_1__0_1_39[role="Client"]
  : [ State('Client', 'idx_0', param, %v_, rho_0),
      !ACP_(<'Client', param>, <'rpc', param>, 'connect_rpc') ]
    --[ Transition_(<'Client', param>, 'idx_0', %v_) ]->
    [ State('Client', 'idx_1__0_1', param, %v_, <'()', <'rpc', param>, 'str:'>),
      Req(<'rpc', param>) ]

rule Client_guarded_new_intr_idx_1__0_1_idx_1__0_1__0_2_37[role="Client"]
  : [ State('Client', 'idx_1__0_1', param, %v_, <rho_3, l_0_3, l_1_3>),
      Fr(n_0_4),
      !ACP_(<'Client', param>, l_0_3, 'connect_rpc'),
      !ACP_(<'Client', param>, l_0_3, 'connect_rpc'),
      Ack(l_0_3) ]
    --[ Transition_(<'Client', param>, 'idx_1__0_1', %v_) ]->
    [ State('Client', 'idx_1__0_1__0_2', param, %v_, <'()', n_0_4, l_0_3, l_1_3>),
      Structure(<'Client', param>, 'chid', n_0_4, l_0_3),
      Conn(l_0_3) ]

rule Client_return_new_out_c_idx_1__0_1__0_2_idx_3__0_2_35[role="Client"]
  : [ State('Client', 'idx_1__0_1__0_2', param, %v_, <rho_6, m_0_6, l_0_6, l_1_6>),
      !ACP_(<'Client', param>, n_0_12, 'invoke_rpc'),
      Structure(<'Client', param>, 'chid', m_0_6, n_0_12) ]
    --[ Transition_(<'Client', param>, 'idx_1__0_1__0_2', %v_) ]->
    [ State('Client', 'idx_3__0_2', param, %v_, <'()', n_0_12, '1', m_0_6, 'str:', m_0_6>),
      Structure(<'Client', param>, 'chid', m_0_6, n_0_12),
      Invoke(n_0_12, '1') ]

rule Client_guarded_return_c_idx_3__0_2_idx_7_28[role="Client"]
  : [ State('Client', 'idx_3__0_2', param, %v_, <rho_14, m_0_14, l_0_14, l_1_14, l_2_14, l_3_14>),
      !ACP_(<'Client', param>, m_0_14, 'invoke_rpc'),
      Returned(m_0_14, n_0_14) ]
    --[ Transition_(<'Client', param>, 'idx_3__0_2', %v_),
        ClientClose() ]->
    [ State('Client', 'idx_7', param, %v_, '()') ]

restriction Init_ : " All x #i #j . Init(x) @ #i & Init(x) @ #j ==> #i = #j "
restriction Equality_rule: "All x y #i. Eq_(x,y) @ #i ==> x = y"
restriction NEquality_rule: "All x #i. NEq_(x,x) @ #i ==> F"

lemma AlwaysStarts_[reuse,use_induction]:
      "All x p #i. Loop_Back(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma AlwaysStartsWhenEnds_[reuse,use_induction]:
      "All x p #i. Loop_Finish(x, p) @i ==> Ex #j. Loop_Start(x, p) @j & j < i"

lemma TransitionOnce_[reuse,use_induction]:
      "All x p %i #j #k . Transition_(x, p, %i) @ #j &
        Transition_(x, p, %i) @ #k ==> #j = #k"


lemma ClientTAClose : exists-trace "Ex  #time_0 . ClientTAClose()@#time_0 "
lemma ClientClose : exists-trace "Ex  #time_0 . ClientClose()@#time_0 "
end

