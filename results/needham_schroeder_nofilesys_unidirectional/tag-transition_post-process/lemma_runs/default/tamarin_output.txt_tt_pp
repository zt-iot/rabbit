maude tool: 'maude'
 checking version: 3.5. OK.
 checking installation: OK.
[Theory rabbit] Theory loaded
[Theory rabbit] Theory translated
[Theory rabbit] Derivation checks started
[Theory rabbit] Derivation checks ended
[Theory rabbit] Theory closed
[Saturating Sources] Step 1 (Max 5)
[Saturating Sources] Done
theory rabbit begin

// Function signature and definition of the equational theory E

builtins: natural-numbers
functions: adec/2, aenc/2, fst/1, pair/2, pk/1, sign/2, snd/1, true/0,
           verify/3
equations:
    adec(aenc(loc__1, pk(loc__0)), loc__0) = loc__1,
    fst(<loc__1, loc__0>) = loc__1,
    fst(<x.1, x.2>) = x.1,
    snd(<loc__1, loc__0>) = loc__0,
    snd(<x.1, x.2>) = x.2,
    verify(sign(loc__1, loc__0), loc__1, pk(loc__0)) = true







rule (modulo E) Const__nonce_a:
   [ Fr( nonce_a ) ]
  --[
  Init__( 'rab__Const__nonce_a' ),
  Init__( <'rab__Const__nonce_a', nonce_a> ),
  !Const__( 'rab__nonce_a', nonce_a )
  ]->
   [ !Const__( 'rab__nonce_a', nonce_a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Const__nonce_b:
   [ Fr( nonce_b ) ]
  --[
  Init__( 'rab__Const__nonce_b' ),
  Init__( <'rab__Const__nonce_b', nonce_b> ),
  !Const__( 'rab__nonce_b', nonce_b )
  ]->
   [ !Const__( 'rab__nonce_b', nonce_b ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Const__priv_key_alice:
   [ Fr( priv_key_alice ) ]
  --[
  Init__( 'rab__Const__priv_key_alice' ),
  Init__( <'rab__Const__priv_key_alice', priv_key_alice> ),
  !Const__( 'rab__priv_key_alice', priv_key_alice )
  ]->
   [ !Const__( 'rab__priv_key_alice', priv_key_alice ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Const__priv_key_bob:
   [ Fr( priv_key_bob ) ]
  --[
  Init__( 'rab__Const__priv_key_bob' ),
  Init__( <'rab__Const__priv_key_bob', priv_key_bob> ),
  !Const__( 'rab__priv_key_bob', priv_key_bob )
  ]->
   [ !Const__( 'rab__priv_key_bob', priv_key_bob ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system[role=system]:
   [ ]
  --[ Init__( 'rab__system' ) ]->
   [
   State__Keyprovider( <'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__',
                       'rab__', 'rab__'
   ),
   State__Alice( <'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__',
                 'rab__'
   ),
   State__Bob( <'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__',
               'rab__'
   ),
   !ACP__GEN__( 'rab__system__', 'rab__rab' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__0[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__0' ) ]->
   [ !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpba', 'rab__recv' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__1[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__1' ) ]->
   [ !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpba', 'rab__send' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__2[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__2' ) ]->
   [ !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__3[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__3' ) ]->
   [ !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__send' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__4[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__4' ) ]->
   [ !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpab', 'rab__recv' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__5[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__5' ) ]->
   [ !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpab', 'rab__send' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__6[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__6' ) ]->
   [ !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__7[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__7' ) ]->
   [ !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__send' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__8[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__8' ) ]->
   [ !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__key_chan', 'rab__recv' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__9[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__9' ) ]->
   [ !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__key_chan', 'rab__send' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__10[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__10' ) ]->
   [
   !ACP__( <'rab__Keyprovider', 'rab__rab'>, 'rab__key_chan', 'rab__recv' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init__system__ACP__11[role=system]:
   [ !ACP__GEN__( 'rab__system__', 'rab__rab' ) ]
  --[ Init__( 'rab__system__ACP__11' ) ]->
   [
   !ACP__( <'rab__Keyprovider', 'rab__rab'>, 'rab__key_chan', 'rab__send' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Keyprovider__merged_____0_____3__12[role=Keyprovider]:
   [
   State__Keyprovider( <'rab_____0', param, %v__>, return__var__0, 'rab__',
                       'rab__', 'rab__'
   ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__0 ),
   !ACP__( <'rab__Keyprovider', param>, 'rab__key_chan', 'rab__send' )
   ]
  --[ Transition__( <'rab__Keyprovider', param>, 'rab_____0', %v__ ) ]->
   [
   State__Keyprovider( <'rab_____3', param, %v__>, 'rab__', 'rab__',
                       'rab__', pk(priv_key_bob__0)
   ),
   Out( pk(priv_key_bob__0) ), Store( 'rab__key_chan', pk(priv_key_bob__0) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____0_____1__0_0__98[role=Alice]:
   [
   State__Alice( <'rab_____0', param, %v__>, return__var__0, 'rab__',
                 'rab__', 'rab__'
   )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____0', %v__ ) ]->
   [
   State__Alice( <'rab_____1__0_0', param, %v__>, 'rab__', 'rab__',
                 <'rab__key_chan', 'rab__'>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____0_____1__1_0__97[role=Alice]:
   [
   State__Alice( <'rab_____0', param, %v__>, return__var__0, 'rab__',
                 'rab__', 'rab__'
   )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____0', %v__ ) ]->
   [
   State__Alice( <'rab_____1__1_0', param, %v__>, 'rab__', 'rab__',
                 <'rab__key_chan', 'rab__'>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____1__0_0_____4__0_1__96[role=Alice]:
   [
   State__Alice( <'rab_____1__0_0', param, %v__>, return__var__2, 'rab__',
                 <l__0__2, l__1__2>, 'rab__'
   ),
   Store( l__0__2, n__0__2 ),
   !ACP__( <'rab__Alice', param>, l__0__2, 'rab__recv' ),
   !Const__( 'rab__nonce_a', nonce_a__11 ),
   !ACP__( <'rab__Alice', param>, 'rab__udpab', 'rab__send' )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____1__0_0', %v__ ) ]->
   [
   State__Alice( <'rab_____4__0_1', param, %v__>, 'rab__', 'rab__',
                 <aenc(<nonce_a__11, 'rab__Alice'>, n__0__2), 'rab__udpab', 
                  aenc(<nonce_a__11, 'rab__Alice'>, n__0__2), n__0__2>,
                 'rab__'
   ),
   Out( aenc(<nonce_a__11, 'rab__Alice'>, n__0__2) ),
   Store( 'rab__udpab', aenc(<nonce_a__11, 'rab__Alice'>, n__0__2) )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____1__1_0_____4__0_1__92[role=Alice]:
   [
   State__Alice( <'rab_____1__1_0', param, %v__>, return__var__7, 'rab__',
                 <l__0__7, l__1__7>, 'rab__'
   ),
   Store( l__0__7, n__0__7 ), In( n__1__7 ),
   !ACP__( <'rab__Alice', param>, l__0__7, 'rab__recv' ),
   !Const__( 'rab__nonce_a', nonce_a__11 ),
   !ACP__( <'rab__Alice', param>, 'rab__udpab', 'rab__send' )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____1__1_0', %v__ ) ]->
   [
   State__Alice( <'rab_____4__0_1', param, %v__>, 'rab__', 'rab__',
                 <aenc(<nonce_a__11, 'rab__Alice'>, n__1__7), 'rab__udpab', 
                  aenc(<nonce_a__11, 'rab__Alice'>, n__1__7), n__1__7>,
                 'rab__'
   ),
   Out( aenc(<nonce_a__11, 'rab__Alice'>, n__1__7) ),
   Store( 'rab__udpab', aenc(<nonce_a__11, 'rab__Alice'>, n__1__7) )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____4__0_1_____7__0_0__83[role=Alice]:
   [
   State__Alice( <'rab_____4__0_1', param, %v__>, return__var__17, 'rab__',
                 <l__0__17, l__1__17, l__2__17, l__3__17>, 'rab__'
   ),
   !Const__( 'rab__nonce_a', nonce_a__18 )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____4__0_1', %v__ ),
  AliceSendNonceATag( nonce_a__18 )
  ]->
   [
   State__Alice( <'rab_____7__0_0', param, %v__>, 'rab__', 'rab__',
                 <'rab__udpba', 'rab__', l__2__17, l__3__17>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____4__0_1_____7__1_0__82[role=Alice]:
   [
   State__Alice( <'rab_____4__0_1', param, %v__>, return__var__17, 'rab__',
                 <l__0__17, l__1__17, l__2__17, l__3__17>, 'rab__'
   ),
   !Const__( 'rab__nonce_a', nonce_a__18 )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____4__0_1', %v__ ),
  AliceSendNonceATag( nonce_a__18 )
  ]->
   [
   State__Alice( <'rab_____7__1_0', param, %v__>, 'rab__', 'rab__',
                 <'rab__udpba', 'rab__', l__2__17, l__3__17>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____7__0_0_____11__0_1__77[role=Alice]:
   [
   State__Alice( <'rab_____7__0_0', param, %v__>, return__var__21, 'rab__',
                 <l__0__21, l__1__21, l__2__21, l__3__21>, 'rab__'
   ),
   Store( l__0__21, n__0__21 ),
   !ACP__( <'rab__Alice', param>, l__0__21, 'rab__recv' ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__30 ),
   !Const__( 'rab__nonce_a', nonce_a__34 ),
   !Const__( 'rab__nonce_a', nonce_a__33 ),
   !Eq__( fst(adec(n__0__21, priv_key_alice__30)), nonce_a__33 )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____7__0_0', %v__ ),
  SecretNonceAlice( nonce_a__34 )
  ]->
   [
   State__Alice( <'rab_____11__0_1', param, %v__>, 'rab__', 'rab__',
                 <snd(adec(n__0__21, priv_key_alice__30)), 
                  fst(adec(n__0__21, priv_key_alice__30)), 
                  adec(n__0__21, priv_key_alice__30), n__0__21, l__2__21, l__3__21>,
                 'rab__'
   )
   ]

  /*
  rule (modulo AC) Alice__merged_____7__0_0_____11__0_1__77[role=Alice]:
     [
     State__Alice( <'rab_____7__0_0', param, %v__>, return__var__21, 'rab__',
                   <l__0__21, l__1__21, l__2__21, l__3__21>, 'rab__'
     ),
     Store( l__0__21, n__0__21 ),
     !ACP__( <'rab__Alice', param>, l__0__21, 'rab__recv' ),
     !Const__( 'rab__priv_key_alice', priv_key_alice__30 ),
     !Const__( 'rab__nonce_a', nonce_a__34 ),
     !Const__( 'rab__nonce_a', nonce_a__33 ), !Eq__( z, nonce_a__33 )
     ]
    --[
    Transition__( <'rab__Alice', param>, 'rab_____7__0_0', %v__ ),
    SecretNonceAlice( nonce_a__34 )
    ]->
     [
     State__Alice( <'rab_____11__0_1', param, %v__>, 'rab__', 'rab__',
                   <z.1, z, z.2, n__0__21, l__2__21, l__3__21>, 'rab__'
     )
     ]
    variants (modulo AC)
    1. n__0__21
             = n__0__21.27
       priv_key_alice__30
             = priv_key_alice__30.31
       z     = fst(adec(n__0__21.27, priv_key_alice__30.31))
       z.1   = snd(adec(n__0__21.27, priv_key_alice__30.31))
       z.2   = adec(n__0__21.27, priv_key_alice__30.31)
    
    2. n__0__21
             = aenc(z.47, pk(priv_key_alice__30.35))
       priv_key_alice__30
             = priv_key_alice__30.35
       z     = fst(z.47)
       z.1   = snd(z.47)
       z.2   = z.47
    
    3. n__0__21
             = aenc(<z.43, z.45>, pk(priv_key_alice__30.34))
       priv_key_alice__30
             = priv_key_alice__30.34
       z     = z.43
       z.1   = z.45
       z.2   = <z.43, z.45>
  */

rule (modulo E) Alice__merged_____7__1_0_____11__0_1__73[role=Alice]:
   [
   State__Alice( <'rab_____7__1_0', param, %v__>, return__var__26, 'rab__',
                 <l__0__26, l__1__26, l__2__26, l__3__26>, 'rab__'
   ),
   Store( l__0__26, n__0__26 ), In( n__1__26 ),
   !ACP__( <'rab__Alice', param>, l__0__26, 'rab__recv' ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__30 ),
   !Const__( 'rab__nonce_a', nonce_a__34 ),
   !Const__( 'rab__nonce_a', nonce_a__33 ),
   !Eq__( fst(adec(n__1__26, priv_key_alice__30)), nonce_a__33 )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____7__1_0', %v__ ),
  SecretNonceAlice( nonce_a__34 )
  ]->
   [
   State__Alice( <'rab_____11__0_1', param, %v__>, 'rab__', 'rab__',
                 <snd(adec(n__1__26, priv_key_alice__30)), 
                  fst(adec(n__1__26, priv_key_alice__30)), 
                  adec(n__1__26, priv_key_alice__30), n__1__26, l__2__26, l__3__26>,
                 'rab__'
   )
   ]

  /*
  rule (modulo AC) Alice__merged_____7__1_0_____11__0_1__73[role=Alice]:
     [
     State__Alice( <'rab_____7__1_0', param, %v__>, return__var__26, 'rab__',
                   <l__0__26, l__1__26, l__2__26, l__3__26>, 'rab__'
     ),
     Store( l__0__26, n__0__26 ), In( n__1__26 ),
     !ACP__( <'rab__Alice', param>, l__0__26, 'rab__recv' ),
     !Const__( 'rab__priv_key_alice', priv_key_alice__30 ),
     !Const__( 'rab__nonce_a', nonce_a__34 ),
     !Const__( 'rab__nonce_a', nonce_a__33 ), !Eq__( z, nonce_a__33 )
     ]
    --[
    Transition__( <'rab__Alice', param>, 'rab_____7__1_0', %v__ ),
    SecretNonceAlice( nonce_a__34 )
    ]->
     [
     State__Alice( <'rab_____11__0_1', param, %v__>, 'rab__', 'rab__',
                   <z.1, z, z.2, n__1__26, l__2__26, l__3__26>, 'rab__'
     )
     ]
    variants (modulo AC)
    1. n__1__26
             = n__1__26.28
       priv_key_alice__30
             = priv_key_alice__30.32
       z     = fst(adec(n__1__26.28, priv_key_alice__30.32))
       z.1   = snd(adec(n__1__26.28, priv_key_alice__30.32))
       z.2   = adec(n__1__26.28, priv_key_alice__30.32)
    
    2. n__1__26
             = aenc(z.48, pk(priv_key_alice__30.36))
       priv_key_alice__30
             = priv_key_alice__30.36
       z     = fst(z.48)
       z.1   = snd(z.48)
       z.2   = z.48
    
    3. n__1__26
             = aenc(<z.44, z.46>, pk(priv_key_alice__30.35))
       priv_key_alice__30
             = priv_key_alice__30.35
       z     = z.44
       z.1   = z.46
       z.2   = <z.44, z.46>
  */

rule (modulo E) Alice__merged_____11__0_1_____11__0_3__0_1__65[role=Alice]:
   [
   State__Alice( <'rab_____11__0_1', param, %v__>, return__var__35, 'rab__',
                 <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
   ),
   !ACP__( <'rab__Alice', param>, 'rab__udpab', 'rab__send' )
   ]
  --[ Transition__( <'rab__Alice', param>, 'rab_____11__0_1', %v__ ) ]->
   [
   State__Alice( <'rab_____11__0_3__0_1', param, %v__>, 'rab__', 'rab__',
                 <aenc(l__0__35, l__5__35), 'rab__udpab', aenc(l__0__35, l__5__35), 
                  l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                 'rab__'
   ),
   Out( aenc(l__0__35, l__5__35) ),
   Store( 'rab__udpab', aenc(l__0__35, l__5__35) )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____11__0_3__0_1_____11__0_5__60[role=Alice]:
   [
   State__Alice( <'rab_____11__0_3__0_1', param, %v__>, return__var__41,
                 'rab__',
                 <l__0__41, l__1__41, l__2__41, l__3__41, l__4__41, l__5__41, l__6__41, 
                  l__7__41, l__8__41>,
                 'rab__'
   )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____11__0_3__0_1', %v__ ),
  AliceSendNonceBTag( l__3__41 )
  ]->
   [
   State__Alice( <'rab_____11__0_5', param, %v__>, 'rab__', 'rab__',
                 <l__2__41, l__3__41, l__4__41, l__5__41, l__6__41, l__7__41, l__8__41>,
                 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Alice__merged_____11__0_5_____19__59[role=Alice]:
   [
   State__Alice( <'rab_____11__0_5', param, %v__>, return__var__43, 'rab__',
                 <l__0__43, l__1__43, l__2__43, l__3__43, l__4__43, l__5__43, l__6__43>,
                 'rab__'
   )
   ]
  --[
  Transition__( <'rab__Alice', param>, 'rab_____11__0_5', %v__ ),
  AliceClose( )
  ]->
   [
   State__Alice( <'rab_____19', param, %v__>, 'rab__', 'rab__', 'rab__',
                 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____0_____2__1_0__81[role=Bob]:
   [
   State__Bob( <'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__',
               'rab__'
   )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____0', %v__ ), BobOpen( )
  ]->
   [
   State__Bob( <'rab_____2__1_0', param, %v__>, 'rab__', 'rab__',
               <'rab__udpab', 'rab__'>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____0_____2__0_0__80[role=Bob]:
   [
   State__Bob( <'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__',
               'rab__'
   )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____0', %v__ ), BobOpen( )
  ]->
   [
   State__Bob( <'rab_____2__0_0', param, %v__>, 'rab__', 'rab__',
               <'rab__udpab', 'rab__'>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____2__0_0_____6__0_1__77[role=Bob]:
   [
   State__Bob( <'rab_____2__0_0', param, %v__>, return__var__3, 'rab__',
               <l__0__3, l__1__3>, 'rab__'
   ),
   Store( l__0__3, n__0__3 ),
   !ACP__( <'rab__Bob', param>, l__0__3, 'rab__recv' ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__12 ),
   !ACP__( <'rab__Bob', param>, 'rab__udpba', 'rab__send' ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__13 ),
   !Const__( 'rab__nonce_b', nonce_b__13 )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____2__0_0', %v__ ) ]->
   [
   State__Bob( <'rab_____6__0_1', param, %v__>, 'rab__', 'rab__',
               <
                aenc(<fst(adec(n__0__3, priv_key_bob__12)), nonce_b__13>,
                     pk(priv_key_alice__13)), 
                'rab__udpba', 
                aenc(<fst(adec(n__0__3, priv_key_bob__12)), nonce_b__13>,
                     pk(priv_key_alice__13)), 
                fst(adec(n__0__3, priv_key_bob__12)), n__0__3>,
               'rab__'
   ),
   Out( aenc(<fst(adec(n__0__3, priv_key_bob__12)), nonce_b__13>,
             pk(priv_key_alice__13))
   ),
   Store( 'rab__udpba',
          aenc(<fst(adec(n__0__3, priv_key_bob__12)), nonce_b__13>,
               pk(priv_key_alice__13))
   )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) Bob__merged_____2__0_0_____6__0_1__77[role=Bob]:
     [
     State__Bob( <'rab_____2__0_0', param, %v__>, return__var__3, 'rab__',
                 <l__0__3, l__1__3>, 'rab__'
     ),
     Store( l__0__3, n__0__3 ),
     !ACP__( <'rab__Bob', param>, l__0__3, 'rab__recv' ),
     !Const__( 'rab__priv_key_bob', priv_key_bob__12 ),
     !ACP__( <'rab__Bob', param>, 'rab__udpba', 'rab__send' ),
     !Const__( 'rab__priv_key_alice', priv_key_alice__13 ),
     !Const__( 'rab__nonce_b', nonce_b__13 )
     ]
    --[ Transition__( <'rab__Bob', param>, 'rab_____2__0_0', %v__ ) ]->
     [
     State__Bob( <'rab_____6__0_1', param, %v__>, 'rab__', 'rab__',
                 <aenc(<z, nonce_b__13>, pk(priv_key_alice__13)), 'rab__udpba', 
                  aenc(<z, nonce_b__13>, pk(priv_key_alice__13)), z, n__0__3>,
                 'rab__'
     ),
     Out( aenc(<z, nonce_b__13>, pk(priv_key_alice__13)) ),
     Store( 'rab__udpba', aenc(<z, nonce_b__13>, pk(priv_key_alice__13)) )
     ]
    variants (modulo AC)
    1. n__0__3
             = n__0__3.26
       priv_key_bob__12
             = priv_key_bob__12.30
       z     = fst(adec(n__0__3.26, priv_key_bob__12.30))
    
    2. n__0__3
             = aenc(x.288, pk(priv_key_bob__12.148))
       priv_key_bob__12
             = priv_key_bob__12.148
       z     = fst(x.288)
    
    3. n__0__3
             = aenc(<z.162, x.290>, pk(priv_key_bob__12.149))
       priv_key_bob__12
             = priv_key_bob__12.149
       z     = z.162
    // loop breaker: [1]
  */

rule (modulo E) Bob__merged_____2__1_0_____6__0_1__73[role=Bob]:
   [
   State__Bob( <'rab_____2__1_0', param, %v__>, return__var__8, 'rab__',
               <l__0__8, l__1__8>, 'rab__'
   ),
   Store( l__0__8, n__0__8 ), In( n__1__8 ),
   !ACP__( <'rab__Bob', param>, l__0__8, 'rab__recv' ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__12 ),
   !ACP__( <'rab__Bob', param>, 'rab__udpba', 'rab__send' ),
   !Const__( 'rab__priv_key_alice', priv_key_alice__13 ),
   !Const__( 'rab__nonce_b', nonce_b__13 )
   ]
  --[ Transition__( <'rab__Bob', param>, 'rab_____2__1_0', %v__ ) ]->
   [
   State__Bob( <'rab_____6__0_1', param, %v__>, 'rab__', 'rab__',
               <
                aenc(<fst(adec(n__1__8, priv_key_bob__12)), nonce_b__13>,
                     pk(priv_key_alice__13)), 
                'rab__udpba', 
                aenc(<fst(adec(n__1__8, priv_key_bob__12)), nonce_b__13>,
                     pk(priv_key_alice__13)), 
                fst(adec(n__1__8, priv_key_bob__12)), n__1__8>,
               'rab__'
   ),
   Out( aenc(<fst(adec(n__1__8, priv_key_bob__12)), nonce_b__13>,
             pk(priv_key_alice__13))
   ),
   Store( 'rab__udpba',
          aenc(<fst(adec(n__1__8, priv_key_bob__12)), nonce_b__13>,
               pk(priv_key_alice__13))
   )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) Bob__merged_____2__1_0_____6__0_1__73[role=Bob]:
     [
     State__Bob( <'rab_____2__1_0', param, %v__>, return__var__8, 'rab__',
                 <l__0__8, l__1__8>, 'rab__'
     ),
     Store( l__0__8, n__0__8 ), In( n__1__8 ),
     !ACP__( <'rab__Bob', param>, l__0__8, 'rab__recv' ),
     !Const__( 'rab__priv_key_bob', priv_key_bob__12 ),
     !ACP__( <'rab__Bob', param>, 'rab__udpba', 'rab__send' ),
     !Const__( 'rab__priv_key_alice', priv_key_alice__13 ),
     !Const__( 'rab__nonce_b', nonce_b__13 )
     ]
    --[ Transition__( <'rab__Bob', param>, 'rab_____2__1_0', %v__ ) ]->
     [
     State__Bob( <'rab_____6__0_1', param, %v__>, 'rab__', 'rab__',
                 <aenc(<z, nonce_b__13>, pk(priv_key_alice__13)), 'rab__udpba', 
                  aenc(<z, nonce_b__13>, pk(priv_key_alice__13)), z, n__1__8>,
                 'rab__'
     ),
     Out( aenc(<z, nonce_b__13>, pk(priv_key_alice__13)) ),
     Store( 'rab__udpba', aenc(<z, nonce_b__13>, pk(priv_key_alice__13)) )
     ]
    variants (modulo AC)
    1. n__1__8
             = n__1__8.27
       priv_key_bob__12
             = priv_key_bob__12.31
       z     = fst(adec(n__1__8.27, priv_key_bob__12.31))
    
    2. n__1__8
             = aenc(x.289, pk(priv_key_bob__12.149))
       priv_key_bob__12
             = priv_key_bob__12.149
       z     = fst(x.289)
    
    3. n__1__8
             = aenc(<z.163, x.291>, pk(priv_key_bob__12.150))
       priv_key_bob__12
             = priv_key_bob__12.150
       z     = z.163
    // loop breaker: [1]
  */

rule (modulo E) Bob__merged_____6__0_1_____9__0_0__63[role=Bob]:
   [
   State__Bob( <'rab_____6__0_1', param, %v__>, return__var__19, 'rab__',
               <l__0__19, l__1__19, l__2__19, l__3__19, l__4__19>, 'rab__'
   ),
   !Const__( 'rab__nonce_b', nonce_b__20 )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____6__0_1', %v__ ),
  BobSendNonceBTag( nonce_b__20 )
  ]->
   [
   State__Bob( <'rab_____9__0_0', param, %v__>, 'rab__', 'rab__',
               <'rab__udpab', 'rab__', l__2__19, l__3__19, l__4__19>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____6__0_1_____9__1_0__62[role=Bob]:
   [
   State__Bob( <'rab_____6__0_1', param, %v__>, return__var__19, 'rab__',
               <l__0__19, l__1__19, l__2__19, l__3__19, l__4__19>, 'rab__'
   ),
   !Const__( 'rab__nonce_b', nonce_b__20 )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____6__0_1', %v__ ),
  BobSendNonceBTag( nonce_b__20 )
  ]->
   [
   State__Bob( <'rab_____9__1_0', param, %v__>, 'rab__', 'rab__',
               <'rab__udpab', 'rab__', l__2__19, l__3__19, l__4__19>, 'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Bob__merged_____9__0_0_____11__0_1__57[role=Bob]:
   [
   State__Bob( <'rab_____9__0_0', param, %v__>, return__var__23, 'rab__',
               <l__0__23, l__1__23, l__2__23, l__3__23, l__4__23>, 'rab__'
   ),
   Store( l__0__23, n__0__23 ),
   !ACP__( <'rab__Bob', param>, l__0__23, 'rab__recv' ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__32 ),
   !Const__( 'rab__nonce_b', nonce_b__34 ),
   !Const__( 'rab__nonce_b', nonce_b__33 ),
   !Eq__( adec(n__0__23, priv_key_bob__32), nonce_b__33 )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____9__0_0', %v__ ),
  SecretNonceBob( nonce_b__34 )
  ]->
   [
   State__Bob( <'rab_____11__0_1', param, %v__>, 'rab__', 'rab__',
               <adec(n__0__23, priv_key_bob__32), n__0__23, l__2__23, l__3__23, l__4__23
               >,
               'rab__'
   )
   ]

  /*
  rule (modulo AC) Bob__merged_____9__0_0_____11__0_1__57[role=Bob]:
     [
     State__Bob( <'rab_____9__0_0', param, %v__>, return__var__23, 'rab__',
                 <l__0__23, l__1__23, l__2__23, l__3__23, l__4__23>, 'rab__'
     ),
     Store( l__0__23, n__0__23 ),
     !ACP__( <'rab__Bob', param>, l__0__23, 'rab__recv' ),
     !Const__( 'rab__priv_key_bob', priv_key_bob__32 ),
     !Const__( 'rab__nonce_b', nonce_b__34 ),
     !Const__( 'rab__nonce_b', nonce_b__33 ), !Eq__( z, nonce_b__33 )
     ]
    --[
    Transition__( <'rab__Bob', param>, 'rab_____9__0_0', %v__ ),
    SecretNonceBob( nonce_b__34 )
    ]->
     [
     State__Bob( <'rab_____11__0_1', param, %v__>, 'rab__', 'rab__',
                 <z, n__0__23, l__2__23, l__3__23, l__4__23>, 'rab__'
     )
     ]
    variants (modulo AC)
    1. n__0__23
             = n__0__23.25
       priv_key_bob__32
             = priv_key_bob__32.29
       z     = adec(n__0__23.25, priv_key_bob__32.29)
    
    2. n__0__23
             = aenc(z.39, pk(priv_key_bob__32.30))
       priv_key_bob__32
             = priv_key_bob__32.30
       z     = z.39
  */

rule (modulo E) Bob__merged_____9__1_0_____11__0_1__53[role=Bob]:
   [
   State__Bob( <'rab_____9__1_0', param, %v__>, return__var__28, 'rab__',
               <l__0__28, l__1__28, l__2__28, l__3__28, l__4__28>, 'rab__'
   ),
   Store( l__0__28, n__0__28 ), In( n__1__28 ),
   !ACP__( <'rab__Bob', param>, l__0__28, 'rab__recv' ),
   !Const__( 'rab__priv_key_bob', priv_key_bob__32 ),
   !Const__( 'rab__nonce_b', nonce_b__34 ),
   !Const__( 'rab__nonce_b', nonce_b__33 ),
   !Eq__( adec(n__1__28, priv_key_bob__32), nonce_b__33 )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____9__1_0', %v__ ),
  SecretNonceBob( nonce_b__34 )
  ]->
   [
   State__Bob( <'rab_____11__0_1', param, %v__>, 'rab__', 'rab__',
               <adec(n__1__28, priv_key_bob__32), n__1__28, l__2__28, l__3__28, l__4__28
               >,
               'rab__'
   )
   ]

  /*
  rule (modulo AC) Bob__merged_____9__1_0_____11__0_1__53[role=Bob]:
     [
     State__Bob( <'rab_____9__1_0', param, %v__>, return__var__28, 'rab__',
                 <l__0__28, l__1__28, l__2__28, l__3__28, l__4__28>, 'rab__'
     ),
     Store( l__0__28, n__0__28 ), In( n__1__28 ),
     !ACP__( <'rab__Bob', param>, l__0__28, 'rab__recv' ),
     !Const__( 'rab__priv_key_bob', priv_key_bob__32 ),
     !Const__( 'rab__nonce_b', nonce_b__34 ),
     !Const__( 'rab__nonce_b', nonce_b__33 ), !Eq__( z, nonce_b__33 )
     ]
    --[
    Transition__( <'rab__Bob', param>, 'rab_____9__1_0', %v__ ),
    SecretNonceBob( nonce_b__34 )
    ]->
     [
     State__Bob( <'rab_____11__0_1', param, %v__>, 'rab__', 'rab__',
                 <z, n__1__28, l__2__28, l__3__28, l__4__28>, 'rab__'
     )
     ]
    variants (modulo AC)
    1. n__1__28
             = n__1__28.26
       priv_key_bob__32
             = priv_key_bob__32.30
       z     = adec(n__1__28.26, priv_key_bob__32.30)
    
    2. n__1__28
             = aenc(z.40, pk(priv_key_bob__32.31))
       priv_key_bob__32
             = priv_key_bob__32.31
       z     = z.40
  */

rule (modulo E) Bob__merged_____11__0_1_____18__47[role=Bob]:
   [
   State__Bob( <'rab_____11__0_1', param, %v__>, return__var__35, 'rab__',
               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35>, 'rab__'
   )
   ]
  --[
  Transition__( <'rab__Bob', param>, 'rab_____11__0_1', %v__ ), BobClose( )
  ]->
   [
   State__Bob( <'rab_____18', param, %v__>, 'rab__', 'rab__', 'rab__',
               'rab__'
   )
   ]

  /* has exactly the trivial AC variant */

restriction Init__:
  "∀ x #i #j. ((Init__( x ) @ #i) ∧ (Init__( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) Equality_gen:
   [ ] --> [ !Eq__( x, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) NEquality_gen:
   [ ] --[ NEq___( x, y ) ]-> [ !NEq__( x, y ) ]

  /* has exactly the trivial AC variant */

restriction NEquality_rule:
  "∀ x #i. (NEq___( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

lemma AlwaysStarts__ [reuse, use_induction]:
  all-traces
  "∀ x p #i.
    (Loop__Back( x, p ) @ #i) ⇒
    (∃ #j. (Loop__Start( x, p ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x p #i.
  (Loop__Back( x, p ) @ #i)
 ∧
  ∀ #j. (Loop__Start( x, p ) @ #j) ⇒ ¬(#j < #i)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (Loop__Start( x, p ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    by solve( Loop__Back( x, p ) @ #i )
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma AlwaysStartsWhenEnds__ [reuse, use_induction]:
  all-traces
  "∀ x p #i.
    (Loop__Finish( x, p ) @ #i) ⇒
    (∃ #j. (Loop__Start( x, p ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x p #i.
  (Loop__Finish( x, p ) @ #i)
 ∧
  ∀ #j. (Loop__Start( x, p ) @ #j) ⇒ ¬(#j < #i)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (Loop__Start( x, p ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    by solve( Loop__Finish( x, p ) @ #i )
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma TransitionOnce__ [reuse, use_induction]:
  all-traces
  "∀ x p %i #j #k.
    ((Transition__( x, p, %i ) @ #j) ∧ (Transition__( x, p, %i ) @ #k)) ⇒
    (#j = #k)"
/*
guarded formula characterizing all counter-examples:
"∃ x p %i #j #k.
  (Transition__( x, p, %i ) @ #j) ∧ (Transition__( x, p, %i ) @ #k)
 ∧
  ¬(#j = #k)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (#j < #k)  ∥ (#k < #j) )
    case case_1
    solve( Transition__( x, p, %i ) @ #j )
      case Alice__merged_____0_____1__0_0__98
      solve( State__Alice( <'rab_____0', param, %i>, return__var__0, 'rab__',
                           'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
          case Alice__merged_____0_____1__0_0__98
          solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                               'rab__', 'rab__', 'rab__'
                 ) ▶₀ #k )
            case Init__system
            by contradiction /* cyclic */
          qed
        next
          case Alice__merged_____0_____1__1_0__97
          by solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                  'rab__', 'rab__', 'rab__'
                    ) ▶₀ #k )
        qed
      qed
    next
      case Alice__merged_____0_____1__1_0__97
      solve( State__Alice( <'rab_____0', param, %i>, return__var__0, 'rab__',
                           'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
          case Alice__merged_____0_____1__0_0__98
          by solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                  'rab__', 'rab__', 'rab__'
                    ) ▶₀ #k )
        next
          case Alice__merged_____0_____1__1_0__97
          solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                               'rab__', 'rab__', 'rab__'
                 ) ▶₀ #k )
            case Init__system
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Alice__merged_____11__0_1_____11__0_3__0_1__65
      solve( !ACP__( <'rab__Alice', param>, 'rab__udpab', 'rab__send' ) ▶₁ #j )
        case Init__system__ACP__5
        solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____11__0_1', %i
               ) @ #k )
          case Alice__merged_____11__0_1_____11__0_3__0_1__65
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpab', 'rab__send'
                 ) ▶₁ #k )
            case Init__system__ACP__5
            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %i>,
                                 return__var__35, 'rab__',
                                 <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                   ) ▶₀ #j )
              case Alice__merged_____7__0_0_____11__0_1__77_case_1
              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                   return__var__35, 'rab__',
                                   <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                     ) ▶₀ #k )
                case Alice__merged_____7__0_0_____11__0_1__77
                by contradiction /* cyclic */
              qed
            next
              case Alice__merged_____7__0_0_____11__0_1__77_case_2
              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                   return__var__35, 'rab__',
                                   <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                     ) ▶₀ #k )
                case Alice__merged_____7__0_0_____11__0_1__77
                by contradiction /* cyclic */
              qed
            next
              case Alice__merged_____7__0_0_____11__0_1__77_case_3
              solve( !KU( aenc(<~z, x>, pk(~n.1)) ) @ #vk )
                case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                     return__var__35, 'rab__',
                                     <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_0_____11__0_1__77
                  by contradiction /* cyclic */
                qed
              next
                case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                     return__var__35, 'rab__',
                                     <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_0_____11__0_1__77
                  by contradiction /* cyclic */
                qed
              next
                case Alice__merged_____1__0_0_____4__0_1__96
                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                     return__var__35, 'rab__',
                                     <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_0_____11__0_1__77
                  by contradiction /* cyclic */
                qed
              next
                case Bob__merged_____2__1_0_____6__0_1__73_case_1
                by contradiction /* cyclic */
              next
                case Bob__merged_____2__1_0_____6__0_1__73_case_2
                by contradiction /* cyclic */
              next
                case c_aenc
                solve( !KU( ~z ) @ #vk.3 )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65
                  solve( !KU( pk(~n.1) ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case Keyprovider__merged_____0_____3__12
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.6 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__0_0_____11__0_1__77
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96_case_1
                  solve( !KU( pk(~n.1) ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case Keyprovider__merged_____0_____3__12
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.6 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__0_0_____11__0_1__77
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96_case_2
                  solve( !KU( pk(~n.1) ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case Keyprovider__merged_____0_____3__12
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.6 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__0_0_____11__0_1__77
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_1
                  by contradiction /* cyclic */
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_2
                  by contradiction /* cyclic */
                qed
              qed
            next
              case Alice__merged_____7__0_0_____11__0_1__77_case_4
              solve( !KU( aenc(<~z, x>, pk(~n.1)) ) @ #vk )
                case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                     return__var__35, 'rab__',
                                     <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_0_____11__0_1__77
                  by contradiction /* cyclic */
                qed
              next
                case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                     return__var__35, 'rab__',
                                     <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_0_____11__0_1__77
                  by contradiction /* cyclic */
                qed
              next
                case Alice__merged_____1__1_0_____4__0_1__92
                solve( !KU( pk(~n.1) ) @ #vk.1 )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__0_0_____11__0_1__77
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_1
                  by contradiction /* cyclic */
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_2
                  by contradiction /* cyclic */
                next
                  case Keyprovider__merged_____0_____3__12
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__0_0_____11__0_1__77
                    by contradiction /* cyclic */
                  qed
                next
                  case c_pk
                  solve( !KU( ~n.1 ) @ #vk.2 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Bob__merged_____2__1_0_____6__0_1__73_case_1
                by contradiction /* cyclic */
              next
                case Bob__merged_____2__1_0_____6__0_1__73_case_2
                by contradiction /* cyclic */
              next
                case c_aenc
                solve( !KU( ~z ) @ #vk.4 )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65
                  solve( !KU( pk(~n.1) ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case Keyprovider__merged_____0_____3__12
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.7 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__0_0_____11__0_1__77
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92_case_1
                  solve( !KU( pk(~n.1) ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case Keyprovider__merged_____0_____3__12
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.7 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__0_0_____11__0_1__77
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92_case_2
                  solve( !KU( pk(~n.1) ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case Keyprovider__merged_____0_____3__12
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.7 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__0_0_____11__0_1__77
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_1
                  by contradiction /* cyclic */
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_2
                  by contradiction /* cyclic */
                qed
              qed
            next
              case Alice__merged_____7__1_0_____11__0_1__73_case_1
              solve( splitEqs(2) )
                case split_case_1
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__0_0_____6__0_1__77_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__0_0_____6__0_1__77_case_2
                  solve( !KU( ~n.1 ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__0_0_____6__0_1__77_case_3
                  solve( !KU( ~n.1 ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_1
                    solve( !KU( ~n.1 ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_2
                    solve( !KU( ~n.1 ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case Alice__merged_____7__1_0_____11__0_1__73_case_2
              solve( splitEqs(2) )
                case split_case_1
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92
                  solve( !KU( pk(~n.1) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92
                  solve( !KU( pk(~n.1) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92
                  solve( !KU( pk(~n.1) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_1
                    solve( !KU( ~n.1 ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_2
                    solve( !KU( ~n.1 ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Bob__merged_____2__0_0_____6__0_1__77_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__0_0_____6__0_1__77_case_2
                  solve( !KU( ~n.1 ) @ #vk.2 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__0_0_____6__0_1__77_case_3
                  solve( !KU( ~n.1 ) @ #vk.2 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_1
                    solve( !KU( ~n.1 ) @ #vk.6 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_2
                    solve( !KU( ~n.1 ) @ #vk.6 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case Alice__merged_____7__1_0_____11__0_1__73_case_3
              solve( splitEqs(2) )
                case split_case_1
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96
                    by contradiction /* non-normal terms */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96
                    by contradiction /* non-normal terms */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96
                  solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      by contradiction /* non-normal terms */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.11 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35.1>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_1
                    solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      by contradiction /* non-normal terms */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.11 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_2
                    solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      by contradiction /* non-normal terms */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.11 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96
                  solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_1
                  solve( !KU( aenc(<~n.1, x>, pk(~n.3)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( ~n.1 ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.3) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.3 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96_case_1
                      solve( !KU( pk(~n.3) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.3 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96_case_2
                      solve( !KU( pk(~n.3) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.3 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_2
                  solve( !KU( ~n.1 ) @ #vk.2 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      by contradiction /* impossible chain */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_3
                  solve( !KU( ~n.1 ) @ #vk.2 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      by contradiction /* impossible chain */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* impossible chain */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* impossible chain */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.12 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.11 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.13 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35.1>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_1
                    solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      solve( !KU( ~n.2 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.1) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.1 ) @ #vk.8 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.12 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.11 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.13 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_2
                    solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      solve( !KU( ~n.2 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.1) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.1 ) @ #vk.8 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.12 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.11 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.13 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    solve( !KU( ~n.1 ) @ #vk.6 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                        solve( !KU( pk(~n.1) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                        solve( !KU( pk(~n.1) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____1__0_0_____4__0_1__96
                        solve( (#vr.18, 0) ~~> (#vk.1, 0) )
                          case Var_fresh_n
                          solve( !KU( pk(~n.1) ) @ #vk.5 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* impossible chain */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* impossible chain */
                          next
                            case c_pk
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_aenc
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    solve( !KU( ~n.1 ) @ #vk.6 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                        solve( !KU( pk(~n.1) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                        solve( !KU( pk(~n.1) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____1__0_0_____4__0_1__96
                        solve( (#vr.18, 0) ~~> (#vk.1, 0) )
                          case Var_fresh_n
                          solve( !KU( pk(~n.1) ) @ #vk.5 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* impossible chain */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* impossible chain */
                          next
                            case c_pk
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_aenc
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case Alice__merged_____7__1_0_____11__0_1__73_case_4
              solve( splitEqs(2) )
                case split_case_1
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92
                  solve( !KU( pk(~n.1) ) @ #vk.2 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.5 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.8 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.8 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.8 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92
                    by contradiction /* non-normal terms */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92
                    by contradiction /* non-normal terms */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92
                  solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.3 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case c_aenc
                    solve( !KU( pk(~n.1) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.2) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.2 ) @ #vk.6 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.7 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.5 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      by contradiction /* non-normal terms */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.11 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.10 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.12 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35.1>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_1
                    solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      by contradiction /* non-normal terms */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.11 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.10 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.12 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_2
                    solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      by contradiction /* non-normal terms */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.11 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.10 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.12 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92
                    solve( !KU( pk(~n.2) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.3 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92
                    solve( !KU( pk(~n.2) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.8 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92
                  solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      solve( !KU( ~n.1 ) @ #vk.3 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      solve( !KU( ~n.1 ) @ #vk.3 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.3 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      solve( !KU( ~n.1 ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      solve( !KU( ~n.1 ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.1) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.2) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.2 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_1
                  solve( !KU( aenc(<~n.1, x>, pk(~n.3)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92
                    solve( !KU( pk(~n.3) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.3 ) @ #vk.3 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( ~n.1 ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.3) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.3 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92_case_1
                      solve( !KU( pk(~n.3) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.3 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92_case_2
                      solve( !KU( pk(~n.3) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.3 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_2
                  solve( !KU( ~n.1 ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      by contradiction /* impossible chain */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_3
                  solve( !KU( ~n.1 ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      by contradiction /* impossible chain */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.5 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* impossible chain */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* impossible chain */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.6 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.10 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.13 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.12 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.14 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35.1>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_1
                    solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      solve( !KU( ~n.2 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.1) ) @ #vk.6 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.6 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.1 ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( !KU( pk(~n.2) ) @ #vk.7 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Keyprovider__merged_____0_____3__12
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_pk
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.13 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.12 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.14 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_2
                    solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      solve( !KU( ~n.2 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.1) ) @ #vk.6 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.6 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.1 ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( !KU( pk(~n.2) ) @ #vk.7 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Keyprovider__merged_____0_____3__12
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_pk
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.13 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.12 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.14 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    solve( !KU( ~n.1 ) @ #vk.7 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                        solve( !KU( pk(~n.1) ) @ #vk.6 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                        solve( !KU( pk(~n.1) ) @ #vk.6 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____1__1_0_____4__0_1__92
                        solve( (#vr.18, 0) ~~> (#vk.1, 0) )
                          case Var_fresh_n
                          solve( !KU( pk(~n.1) ) @ #vk.6 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( !KU( pk(~n.2) ) @ #vk.6 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            next
                              case Keyprovider__merged_____0_____3__12
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_pk
                              solve( !KU( ~n.2 ) @ #vk.10 )
                                case Alice__merged_____11__0_1_____11__0_3__0_1__65
                                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                     return__var__35, 'rab__',
                                                     <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                      l__5__35>,
                                                     'rab__'
                                       ) ▶₀ #k )
                                  case Alice__merged_____7__1_0_____11__0_1__73
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_1
                                by contradiction /* cyclic */
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* impossible chain */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* impossible chain */
                          next
                            case c_pk
                            solve( !KU( pk(~n.2) ) @ #vk.6 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            next
                              case Keyprovider__merged_____0_____3__12
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_pk
                              solve( !KU( ~n.2 ) @ #vk.9 )
                                case Alice__merged_____11__0_1_____11__0_3__0_1__65
                                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                     return__var__35, 'rab__',
                                                     <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                      l__5__35>,
                                                     'rab__'
                                       ) ▶₀ #k )
                                  case Alice__merged_____7__1_0_____11__0_1__73
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_1
                                by contradiction /* cyclic */
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_aenc
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    solve( !KU( ~n.1 ) @ #vk.7 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                        solve( !KU( pk(~n.1) ) @ #vk.6 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                        solve( !KU( pk(~n.1) ) @ #vk.6 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____1__1_0_____4__0_1__92
                        solve( (#vr.18, 0) ~~> (#vk.1, 0) )
                          case Var_fresh_n
                          solve( !KU( pk(~n.1) ) @ #vk.6 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( !KU( pk(~n.2) ) @ #vk.6 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            next
                              case Keyprovider__merged_____0_____3__12
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_pk
                              solve( !KU( ~n.2 ) @ #vk.10 )
                                case Alice__merged_____11__0_1_____11__0_3__0_1__65
                                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                     return__var__35, 'rab__',
                                                     <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                      l__5__35>,
                                                     'rab__'
                                       ) ▶₀ #k )
                                  case Alice__merged_____7__1_0_____11__0_1__73
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_1
                                by contradiction /* cyclic */
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* impossible chain */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* impossible chain */
                          next
                            case c_pk
                            solve( !KU( pk(~n.2) ) @ #vk.6 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            next
                              case Keyprovider__merged_____0_____3__12
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_pk
                              solve( !KU( ~n.2 ) @ #vk.9 )
                                case Alice__merged_____11__0_1_____11__0_3__0_1__65
                                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                     return__var__35, 'rab__',
                                                     <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                      l__5__35>,
                                                     'rab__'
                                       ) ▶₀ #k )
                                  case Alice__merged_____7__1_0_____11__0_1__73
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_1
                                by contradiction /* cyclic */
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_aenc
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____11__0_3__0_1_____11__0_5__60
      solve( State__Alice( <'rab_____11__0_3__0_1', param, %i>,
                           return__var__41, 'rab__',
                           <l__0__41, l__1__41, l__2__41, l__3__41, l__4__41, l__5__41, l__6__41, 
                            l__7__41, l__8__41>,
                           'rab__'
             ) ▶₀ #j )
        case Alice__merged_____11__0_1_____11__0_3__0_1__65
        solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____11__0_3__0_1',
                             %i
               ) @ #k )
          case Alice__merged_____11__0_3__0_1_____11__0_5__60
          solve( State__Alice( <'rab_____11__0_3__0_1', 'rab__rab', %i>,
                               return__var__41, 'rab__',
                               <l__0__41, l__1__41, l__2__41, l__3__41.1, l__4__41.1, l__5__41.1, 
                                l__6__41.1, l__7__41.1, l__8__41.1>,
                               'rab__'
                 ) ▶₀ #k )
            case Alice__merged_____11__0_1_____11__0_3__0_1__65
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Alice__merged_____11__0_5_____19__59
      solve( State__Alice( <'rab_____11__0_5', param, %i>, return__var__43,
                           'rab__',
                           <l__0__43, l__1__43, l__2__43, l__3__43, l__4__43, l__5__43, l__6__43>,
                           'rab__'
             ) ▶₀ #j )
        case Alice__merged_____11__0_3__0_1_____11__0_5__60
        solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____11__0_5', %i
               ) @ #k )
          case Alice__merged_____11__0_5_____19__59
          solve( State__Alice( <'rab_____11__0_5', 'rab__rab', %i>,
                               return__var__43, 'rab__',
                               <l__0__43, l__1__43.1, l__2__43.1, l__3__43.1, l__4__43.1, l__5__43.1, 
                                l__6__43.1>,
                               'rab__'
                 ) ▶₀ #k )
            case Alice__merged_____11__0_3__0_1_____11__0_5__60
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Alice__merged_____1__0_0_____4__0_1__96
      solve( State__Alice( <'rab_____1__0_0', param, %i>, return__var__2,
                           'rab__', <l__0__2, l__1__2>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____0_____1__0_0__98
        solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__key_chan', 'rab__recv'
               ) ▶₂ #j )
          case Init__system__ACP__8
          solve( !Const__( 'rab__nonce_a', nonce_a__11 ) ▶₃ #j )
            case Const__nonce_a
            solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpab', 'rab__send'
                   ) ▶₄ #j )
              case Init__system__ACP__5
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____1__0_0', %1
                     ) @ #k )
                case Alice__merged_____1__0_0_____4__0_1__96
                solve( State__Alice( <'rab_____1__0_0', 'rab__rab', %1>, return__var__2,
                                     'rab__', <l__0__2, l__1__2>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____0_____1__0_0__98
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____1__1_0_____4__0_1__92
      solve( State__Alice( <'rab_____1__1_0', param, %i>, return__var__7,
                           'rab__', <l__0__7, l__1__7>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____0_____1__1_0__97
        solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__key_chan', 'rab__recv'
               ) ▶₃ #j )
          case Init__system__ACP__8
          solve( !Const__( 'rab__nonce_a', nonce_a__11 ) ▶₄ #j )
            case Const__nonce_a
            solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpab', 'rab__send'
                   ) ▶₅ #j )
              case Init__system__ACP__5
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____1__1_0', %1
                     ) @ #k )
                case Alice__merged_____1__1_0_____4__0_1__92
                solve( State__Alice( <'rab_____1__1_0', 'rab__rab', %1>, return__var__7,
                                     'rab__', <l__0__7, l__1__7>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____0_____1__1_0__97
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____4__0_1_____7__0_0__83
      solve( State__Alice( <'rab_____4__0_1', param, %i>, return__var__17,
                           'rab__', <l__0__17, l__1__17, l__2__17, l__3__17>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____1__0_0_____4__0_1__96
        solve( !Const__( 'rab__nonce_a', nonce_a__18 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____4__0_1', %1
                 ) @ #k )
            case Alice__merged_____4__0_1_____7__0_0__83
            solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>, return__var__17,
                                 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____1__0_0_____4__0_1__96
              by contradiction /* cyclic */
            qed
          next
            case Alice__merged_____4__0_1_____7__1_0__82
            by solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>,
                                    return__var__17, 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>,
                                    'rab__'
                      ) ▶₀ #k )
          qed
        qed
      next
        case Alice__merged_____1__1_0_____4__0_1__92
        solve( !Const__( 'rab__nonce_a', nonce_a__18 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____4__0_1', %1
                 ) @ #k )
            case Alice__merged_____4__0_1_____7__0_0__83
            solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>, return__var__17,
                                 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____1__1_0_____4__0_1__92
              by contradiction /* cyclic */
            qed
          next
            case Alice__merged_____4__0_1_____7__1_0__82
            by solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>,
                                    return__var__17, 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>,
                                    'rab__'
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Alice__merged_____4__0_1_____7__1_0__82
      solve( State__Alice( <'rab_____4__0_1', param, %i>, return__var__17,
                           'rab__', <l__0__17, l__1__17, l__2__17, l__3__17>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____1__0_0_____4__0_1__96
        solve( !Const__( 'rab__nonce_a', nonce_a__18 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____4__0_1', %1
                 ) @ #k )
            case Alice__merged_____4__0_1_____7__0_0__83
            by solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>,
                                    return__var__17, 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>,
                                    'rab__'
                      ) ▶₀ #k )
          next
            case Alice__merged_____4__0_1_____7__1_0__82
            solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>, return__var__17,
                                 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____1__0_0_____4__0_1__96
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case Alice__merged_____1__1_0_____4__0_1__92
        solve( !Const__( 'rab__nonce_a', nonce_a__18 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____4__0_1', %1
                 ) @ #k )
            case Alice__merged_____4__0_1_____7__0_0__83
            by solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>,
                                    return__var__17, 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>,
                                    'rab__'
                      ) ▶₀ #k )
          next
            case Alice__merged_____4__0_1_____7__1_0__82
            solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>, return__var__17,
                                 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____1__1_0_____4__0_1__92
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____7__0_0_____11__0_1__77
      solve( State__Alice( <'rab_____7__0_0', param, %i>, return__var__21,
                           'rab__', <l__0__21, l__1__21, l__2__21, l__3__21>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____4__0_1_____7__0_0__83_case_1
        solve( Store( 'rab__udpba', n__0__21 ) ▶₁ #j )
          case Bob__merged_____2__0_0_____6__0_1__77
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₄ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₅ #j )
                  case Const__nonce_a
                  solve( !Eq__( z, ~n ) ▶₆ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_0', %1
                           ) @ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      solve( State__Alice( <'rab_____7__0_0', 'rab__rab', %1>, return__var__21,
                                           'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__0_0__83
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____2__1_0_____6__0_1__73
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₄ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₅ #j )
                  case Const__nonce_a
                  solve( !Eq__( z, ~n ) ▶₆ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_0', %1
                           ) @ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      solve( State__Alice( <'rab_____7__0_0', 'rab__rab', %1>, return__var__21,
                                           'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__0_0__83
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Alice__merged_____4__0_1_____7__0_0__83_case_2
        solve( Store( 'rab__udpba', n__0__21 ) ▶₁ #j )
          case Bob__merged_____2__0_0_____6__0_1__77
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₄ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₅ #j )
                  case Const__nonce_a
                  solve( !Eq__( z, ~n ) ▶₆ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_0', %1
                           ) @ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      solve( State__Alice( <'rab_____7__0_0', 'rab__rab', %1>, return__var__21,
                                           'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__0_0__83
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____2__1_0_____6__0_1__73
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₄ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₅ #j )
                  case Const__nonce_a
                  solve( !Eq__( z, ~n ) ▶₆ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_0', %1
                           ) @ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      solve( State__Alice( <'rab_____7__0_0', 'rab__rab', %1>, return__var__21,
                                           'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__0_0__83
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____7__1_0_____11__0_1__73
      solve( State__Alice( <'rab_____7__1_0', param, %i>, return__var__26,
                           'rab__', <l__0__26, l__1__26, l__2__26, l__3__26>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____4__0_1_____7__1_0__82_case_1
        solve( Store( 'rab__udpba', n__0__26 ) ▶₁ #j )
          case Bob__merged_____2__0_0_____6__0_1__77
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₅ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₆ #j )
                  case Const__nonce_a
                  solve( !Eq__( z.1, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__1_0', %1
                           ) @ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      solve( State__Alice( <'rab_____7__1_0', 'rab__rab', %1>, return__var__26,
                                           'rab__', <l__0__26, l__1__26, l__2__26, l__3__26.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__1_0__82
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____2__1_0_____6__0_1__73
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₅ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₆ #j )
                  case Const__nonce_a
                  solve( !Eq__( z.1, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__1_0', %1
                           ) @ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      solve( State__Alice( <'rab_____7__1_0', 'rab__rab', %1>, return__var__26,
                                           'rab__', <l__0__26, l__1__26, l__2__26, l__3__26.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__1_0__82
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Alice__merged_____4__0_1_____7__1_0__82_case_2
        solve( Store( 'rab__udpba', n__0__26 ) ▶₁ #j )
          case Bob__merged_____2__0_0_____6__0_1__77
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₅ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₆ #j )
                  case Const__nonce_a
                  solve( !Eq__( z.1, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__1_0', %1
                           ) @ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      solve( State__Alice( <'rab_____7__1_0', 'rab__rab', %1>, return__var__26,
                                           'rab__', <l__0__26, l__1__26, l__2__26, l__3__26.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__1_0__82
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____2__1_0_____6__0_1__73
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₅ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₆ #j )
                  case Const__nonce_a
                  solve( !Eq__( z.1, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__1_0', %1
                           ) @ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      solve( State__Alice( <'rab_____7__1_0', 'rab__rab', %1>, return__var__26,
                                           'rab__', <l__0__26, l__1__26, l__2__26, l__3__26.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__1_0__82
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____0_____2__0_0__80
      solve( State__Bob( <'rab_____0', param, %i>, return__var__0, 'rab__',
                         'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
          case Bob__merged_____0_____2__0_0__80
          solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                             'rab__', 'rab__', 'rab__'
                 ) ▶₀ #k )
            case Init__system
            by contradiction /* cyclic */
          qed
        next
          case Bob__merged_____0_____2__1_0__81
          by solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                'rab__', 'rab__', 'rab__'
                    ) ▶₀ #k )
        qed
      qed
    next
      case Bob__merged_____0_____2__1_0__81
      solve( State__Bob( <'rab_____0', param, %i>, return__var__0, 'rab__',
                         'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
          case Bob__merged_____0_____2__0_0__80
          by solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                'rab__', 'rab__', 'rab__'
                    ) ▶₀ #k )
        next
          case Bob__merged_____0_____2__1_0__81
          solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                             'rab__', 'rab__', 'rab__'
                 ) ▶₀ #k )
            case Init__system
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Bob__merged_____11__0_1_____18__47
      solve( State__Bob( <'rab_____11__0_1', param, %i>, return__var__35,
                         'rab__', <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35>, 'rab__'
             ) ▶₀ #j )
        case Bob__merged_____9__0_0_____11__0_1__57_case_1
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35.1, l__1__35, l__2__35, l__3__35.1, l__4__35.1>,
                             'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__0_0_____11__0_1__57
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____9__0_0_____11__0_1__57_case_2
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35.1, l__1__35, l__2__35, l__3__35.1, l__4__35.1>,
                             'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__0_0_____11__0_1__57
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____9__1_0_____11__0_1__53_case_1
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35, l__1__35, l__2__35, l__3__35.1, l__4__35.1>, 'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__1_0_____11__0_1__53
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____9__1_0_____11__0_1__53_case_2
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35, l__1__35, l__2__35, l__3__35.1, l__4__35.1>, 'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__1_0_____11__0_1__53
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____9__1_0_____11__0_1__53_case_3
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35, l__1__35, l__2__35, l__3__35.1, l__4__35.1>, 'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__1_0_____11__0_1__53
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____9__1_0_____11__0_1__53_case_4
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35, l__1__35, l__2__35, l__3__35.1, l__4__35.1>, 'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__1_0_____11__0_1__53
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____9__1_0_____11__0_1__53_case_5
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35, l__1__35, l__2__35, l__3__35.1, l__4__35.1>, 'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__1_0_____11__0_1__53
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____9__1_0_____11__0_1__53_case_6
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35, l__1__35, l__2__35, l__3__35.1, l__4__35.1>, 'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__1_0_____11__0_1__53
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Bob__merged_____2__0_0_____6__0_1__77
      solve( State__Bob( <'rab_____2__0_0', param, %i>, return__var__3,
                         'rab__', <l__0__3, l__1__3>, 'rab__'
             ) ▶₀ #j )
        case Bob__merged_____0_____2__0_0__80
        solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
               ) ▶₂ #j )
          case Init__system__ACP__2
          solve( !Const__( 'rab__priv_key_bob', priv_key_bob__12 ) ▶₃ #j )
            case Const__priv_key_bob
            solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpba', 'rab__send'
                   ) ▶₄ #j )
              case Init__system__ACP__1
              solve( !Const__( 'rab__priv_key_alice', priv_key_alice__13 ) ▶₅ #j )
                case Const__priv_key_alice
                solve( !Const__( 'rab__nonce_b', nonce_b__13 ) ▶₆ #j )
                  case Const__nonce_b
                  solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____2__0_0', %1
                         ) @ #k )
                    case Bob__merged_____2__0_0_____6__0_1__77
                    solve( State__Bob( <'rab_____2__0_0', 'rab__rab', %1>, return__var__3,
                                       'rab__', <l__0__3, l__1__3>, 'rab__'
                           ) ▶₀ #k )
                      case Bob__merged_____0_____2__0_0__80
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____2__1_0_____6__0_1__73
      solve( State__Bob( <'rab_____2__1_0', param, %i>, return__var__8,
                         'rab__', <l__0__8, l__1__8>, 'rab__'
             ) ▶₀ #j )
        case Bob__merged_____0_____2__1_0__81
        solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
               ) ▶₃ #j )
          case Init__system__ACP__2
          solve( !Const__( 'rab__priv_key_bob', priv_key_bob__12 ) ▶₄ #j )
            case Const__priv_key_bob
            solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpba', 'rab__send'
                   ) ▶₅ #j )
              case Init__system__ACP__1
              solve( !Const__( 'rab__priv_key_alice', priv_key_alice__13 ) ▶₆ #j )
                case Const__priv_key_alice
                solve( !Const__( 'rab__nonce_b', nonce_b__13 ) ▶₇ #j )
                  case Const__nonce_b
                  solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____2__1_0', %1
                         ) @ #k )
                    case Bob__merged_____2__1_0_____6__0_1__73
                    solve( State__Bob( <'rab_____2__1_0', 'rab__rab', %1>, return__var__8,
                                       'rab__', <l__0__8, l__1__8>, 'rab__'
                           ) ▶₀ #k )
                      case Bob__merged_____0_____2__1_0__81
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____6__0_1_____9__0_0__63
      solve( State__Bob( <'rab_____6__0_1', param, %i>, return__var__19,
                         'rab__', <l__0__19, l__1__19, l__2__19, l__3__19, l__4__19>, 'rab__'
             ) ▶₀ #j )
        case Bob__merged_____2__0_0_____6__0_1__77
        solve( !Const__( 'rab__nonce_b', nonce_b__20 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____6__0_1', %1
                 ) @ #k )
            case Bob__merged_____6__0_1_____9__0_0__63
            solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>, return__var__19,
                               'rab__', <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                   ) ▶₀ #k )
              case Bob__merged_____2__0_0_____6__0_1__77
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____6__0_1_____9__1_0__62
            by solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>,
                                  return__var__19, 'rab__',
                                  <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                      ) ▶₀ #k )
          qed
        qed
      next
        case Bob__merged_____2__1_0_____6__0_1__73
        solve( !Const__( 'rab__nonce_b', nonce_b__20 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____6__0_1', %1
                 ) @ #k )
            case Bob__merged_____6__0_1_____9__0_0__63
            solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>, return__var__19,
                               'rab__', <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                   ) ▶₀ #k )
              case Bob__merged_____2__1_0_____6__0_1__73
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____6__0_1_____9__1_0__62
            by solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>,
                                  return__var__19, 'rab__',
                                  <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Bob__merged_____6__0_1_____9__1_0__62
      solve( State__Bob( <'rab_____6__0_1', param, %i>, return__var__19,
                         'rab__', <l__0__19, l__1__19, l__2__19, l__3__19, l__4__19>, 'rab__'
             ) ▶₀ #j )
        case Bob__merged_____2__0_0_____6__0_1__77
        solve( !Const__( 'rab__nonce_b', nonce_b__20 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____6__0_1', %1
                 ) @ #k )
            case Bob__merged_____6__0_1_____9__0_0__63
            by solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>,
                                  return__var__19, 'rab__',
                                  <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                      ) ▶₀ #k )
          next
            case Bob__merged_____6__0_1_____9__1_0__62
            solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>, return__var__19,
                               'rab__', <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                   ) ▶₀ #k )
              case Bob__merged_____2__0_0_____6__0_1__77
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case Bob__merged_____2__1_0_____6__0_1__73
        solve( !Const__( 'rab__nonce_b', nonce_b__20 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____6__0_1', %1
                 ) @ #k )
            case Bob__merged_____6__0_1_____9__0_0__63
            by solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>,
                                  return__var__19, 'rab__',
                                  <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                      ) ▶₀ #k )
          next
            case Bob__merged_____6__0_1_____9__1_0__62
            solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>, return__var__19,
                               'rab__', <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                   ) ▶₀ #k )
              case Bob__merged_____2__1_0_____6__0_1__73
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____9__0_0_____11__0_1__57
      solve( State__Bob( <'rab_____9__0_0', param, %i>, return__var__23,
                         'rab__', <l__0__23, l__1__23, l__2__23, l__3__23, l__4__23>, 'rab__'
             ) ▶₀ #j )
        case Bob__merged_____6__0_1_____9__0_0__63_case_1
        solve( Store( 'rab__udpab', n__0__23 ) ▶₁ #j )
          case Alice__merged_____11__0_1_____11__0_3__0_1__65
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₄ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₅ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₆ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__0_0', %1
                           ) @ #k )
                      case Bob__merged_____9__0_0_____11__0_1__57
                      solve( State__Bob( <'rab_____9__0_0', 'rab__rab', %1>, return__var__23,
                                         'rab__', <l__0__23, l__1__23, l__2__23, l__3__23.1, l__4__23.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__0_0__63
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__0_0_____4__0_1__96
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₄ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₅ #j )
                  case Const__nonce_b
                  by solve( !Eq__( z, ~n ) ▶₆ #j )
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__1_0_____4__0_1__92
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₄ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₅ #j )
                  case Const__nonce_b
                  by solve( !Eq__( z, ~n ) ▶₆ #j )
                qed
              qed
            qed
          qed
        qed
      next
        case Bob__merged_____6__0_1_____9__0_0__63_case_2
        solve( Store( 'rab__udpab', n__0__23 ) ▶₁ #j )
          case Alice__merged_____11__0_1_____11__0_3__0_1__65
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₄ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₅ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₆ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__0_0', %1
                           ) @ #k )
                      case Bob__merged_____9__0_0_____11__0_1__57
                      solve( State__Bob( <'rab_____9__0_0', 'rab__rab', %1>, return__var__23,
                                         'rab__', <l__0__23, l__1__23, l__2__23, l__3__23.1, l__4__23.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__0_0__63
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__0_0_____4__0_1__96
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₄ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₅ #j )
                  case Const__nonce_b
                  by solve( !Eq__( z, ~n ) ▶₆ #j )
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__1_0_____4__0_1__92
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₄ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₅ #j )
                  case Const__nonce_b
                  by solve( !Eq__( z, ~n ) ▶₆ #j )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____9__1_0_____11__0_1__53
      solve( State__Bob( <'rab_____9__1_0', param, %i>, return__var__28,
                         'rab__', <l__0__28, l__1__28, l__2__28, l__3__28, l__4__28>, 'rab__'
             ) ▶₀ #j )
        case Bob__merged_____6__0_1_____9__1_0__62_case_1
        solve( Store( 'rab__udpab', n__0__28 ) ▶₁ #j )
          case Alice__merged_____11__0_1_____11__0_3__0_1__65
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₅ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₆ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__1_0', %1
                           ) @ #k )
                      case Bob__merged_____9__1_0_____11__0_1__53
                      solve( State__Bob( <'rab_____9__1_0', 'rab__rab', %1>, return__var__28,
                                         'rab__', <l__0__28, l__1__28, l__2__28, l__3__28.1, l__4__28.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__1_0__62
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__0_0_____4__0_1__96
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₅ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₆ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__1_0', %1
                           ) @ #k )
                      case Bob__merged_____9__1_0_____11__0_1__53
                      solve( State__Bob( <'rab_____9__1_0', 'rab__rab', %1>, return__var__28,
                                         'rab__', <l__0__28, l__1__28, l__2__28, l__3__28.1, l__4__28.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__1_0__62
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__1_0_____4__0_1__92
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₅ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₆ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__1_0', %1
                           ) @ #k )
                      case Bob__merged_____9__1_0_____11__0_1__53
                      solve( State__Bob( <'rab_____9__1_0', 'rab__rab', %1>, return__var__28,
                                         'rab__', <l__0__28, l__1__28, l__2__28, l__3__28.1, l__4__28.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__1_0__62
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Bob__merged_____6__0_1_____9__1_0__62_case_2
        solve( Store( 'rab__udpab', n__0__28 ) ▶₁ #j )
          case Alice__merged_____11__0_1_____11__0_3__0_1__65
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₅ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₆ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__1_0', %1
                           ) @ #k )
                      case Bob__merged_____9__1_0_____11__0_1__53
                      solve( State__Bob( <'rab_____9__1_0', 'rab__rab', %1>, return__var__28,
                                         'rab__', <l__0__28, l__1__28, l__2__28, l__3__28.1, l__4__28.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__1_0__62
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__0_0_____4__0_1__96
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₅ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₆ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__1_0', %1
                           ) @ #k )
                      case Bob__merged_____9__1_0_____11__0_1__53
                      solve( State__Bob( <'rab_____9__1_0', 'rab__rab', %1>, return__var__28,
                                         'rab__', <l__0__28, l__1__28, l__2__28, l__3__28.1, l__4__28.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__1_0__62
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__1_0_____4__0_1__92
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₅ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₆ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__1_0', %1
                           ) @ #k )
                      case Bob__merged_____9__1_0_____11__0_1__53
                      solve( State__Bob( <'rab_____9__1_0', 'rab__rab', %1>, return__var__28,
                                         'rab__', <l__0__28, l__1__28, l__2__28, l__3__28.1, l__4__28.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__1_0__62
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Keyprovider__merged_____0_____3__12
      solve( State__Keyprovider( <'rab_____0', param, %i>, return__var__0,
                                 'rab__', 'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_bob', priv_key_bob__0 ) ▶₁ #j )
          case Const__priv_key_bob
          solve( !ACP__( <'rab__Keyprovider', 'rab__rab'>, 'rab__key_chan',
                         'rab__send'
                 ) ▶₂ #j )
            case Init__system__ACP__11
            solve( Transition__( <'rab__Keyprovider', 'rab__rab'>, 'rab_____0', %1
                   ) @ #k )
              case Keyprovider__merged_____0_____3__12
              solve( State__Keyprovider( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                         'rab__', 'rab__', 'rab__'
                     ) ▶₀ #k )
                case Init__system
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Transition__( x, p, %i ) @ #j )
      case Alice__merged_____0_____1__0_0__98
      solve( State__Alice( <'rab_____0', param, %i>, return__var__0, 'rab__',
                           'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
          case Alice__merged_____0_____1__0_0__98
          solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                               'rab__', 'rab__', 'rab__'
                 ) ▶₀ #k )
            case Init__system
            by contradiction /* cyclic */
          qed
        next
          case Alice__merged_____0_____1__1_0__97
          by solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                  'rab__', 'rab__', 'rab__'
                    ) ▶₀ #k )
        qed
      qed
    next
      case Alice__merged_____0_____1__1_0__97
      solve( State__Alice( <'rab_____0', param, %i>, return__var__0, 'rab__',
                           'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
          case Alice__merged_____0_____1__0_0__98
          by solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                  'rab__', 'rab__', 'rab__'
                    ) ▶₀ #k )
        next
          case Alice__merged_____0_____1__1_0__97
          solve( State__Alice( <'rab_____0', 'rab__rab', %1>, return__var__0,
                               'rab__', 'rab__', 'rab__'
                 ) ▶₀ #k )
            case Init__system
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Alice__merged_____11__0_1_____11__0_3__0_1__65
      solve( !ACP__( <'rab__Alice', param>, 'rab__udpab', 'rab__send' ) ▶₁ #j )
        case Init__system__ACP__5
        solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____11__0_1', %i
               ) @ #k )
          case Alice__merged_____11__0_1_____11__0_3__0_1__65
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpab', 'rab__send'
                 ) ▶₁ #k )
            case Init__system__ACP__5
            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %i>,
                                 return__var__35, 'rab__',
                                 <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                   ) ▶₀ #j )
              case Alice__merged_____7__0_0_____11__0_1__77_case_1
              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                   return__var__35, 'rab__',
                                   <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                     ) ▶₀ #k )
                case Alice__merged_____7__0_0_____11__0_1__77
                by contradiction /* cyclic */
              qed
            next
              case Alice__merged_____7__0_0_____11__0_1__77_case_2
              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                   return__var__35, 'rab__',
                                   <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                     ) ▶₀ #k )
                case Alice__merged_____7__0_0_____11__0_1__77
                by contradiction /* cyclic */
              qed
            next
              case Alice__merged_____7__0_0_____11__0_1__77_case_3
              solve( !KU( aenc(<~z, x>, pk(~n.1)) ) @ #vk )
                case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                     return__var__35, 'rab__',
                                     <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_0_____11__0_1__77
                  by contradiction /* cyclic */
                qed
              next
                case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                     return__var__35, 'rab__',
                                     <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_0_____11__0_1__77
                  by contradiction /* cyclic */
                qed
              next
                case Alice__merged_____1__0_0_____4__0_1__96
                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                     return__var__35, 'rab__',
                                     <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_0_____11__0_1__77
                  by contradiction /* cyclic */
                qed
              next
                case Bob__merged_____2__1_0_____6__0_1__73_case_1
                by contradiction /* cyclic */
              next
                case Bob__merged_____2__1_0_____6__0_1__73_case_2
                by contradiction /* cyclic */
              next
                case c_aenc
                solve( !KU( ~z ) @ #vk.3 )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65
                  solve( !KU( pk(~n.1) ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case Keyprovider__merged_____0_____3__12
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.6 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__0_0_____11__0_1__77
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96_case_1
                  solve( !KU( pk(~n.1) ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case Keyprovider__merged_____0_____3__12
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.6 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__0_0_____11__0_1__77
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96_case_2
                  solve( !KU( pk(~n.1) ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case Keyprovider__merged_____0_____3__12
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.6 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__0_0_____11__0_1__77
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_1
                  by contradiction /* cyclic */
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_2
                  by contradiction /* cyclic */
                qed
              qed
            next
              case Alice__merged_____7__0_0_____11__0_1__77_case_4
              solve( !KU( aenc(<~z, x>, pk(~n.1)) ) @ #vk )
                case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                     return__var__35, 'rab__',
                                     <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_0_____11__0_1__77
                  by contradiction /* cyclic */
                qed
              next
                case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                     return__var__35, 'rab__',
                                     <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____7__0_0_____11__0_1__77
                  by contradiction /* cyclic */
                qed
              next
                case Alice__merged_____1__1_0_____4__0_1__92
                solve( !KU( pk(~n.1) ) @ #vk.1 )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__0_0_____11__0_1__77
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_1
                  by contradiction /* cyclic */
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_2
                  by contradiction /* cyclic */
                next
                  case Keyprovider__merged_____0_____3__12
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__0_0_____11__0_1__77
                    by contradiction /* cyclic */
                  qed
                next
                  case c_pk
                  solve( !KU( ~n.1 ) @ #vk.2 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Bob__merged_____2__1_0_____6__0_1__73_case_1
                by contradiction /* cyclic */
              next
                case Bob__merged_____2__1_0_____6__0_1__73_case_2
                by contradiction /* cyclic */
              next
                case c_aenc
                solve( !KU( ~z ) @ #vk.4 )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65
                  solve( !KU( pk(~n.1) ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case Keyprovider__merged_____0_____3__12
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.7 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__0_0_____11__0_1__77
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92_case_1
                  solve( !KU( pk(~n.1) ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case Keyprovider__merged_____0_____3__12
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.7 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__0_0_____11__0_1__77
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92_case_2
                  solve( !KU( pk(~n.1) ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case Keyprovider__merged_____0_____3__12
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.7 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__0_0_____11__0_1__77
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_1
                  by contradiction /* cyclic */
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_2
                  by contradiction /* cyclic */
                qed
              qed
            next
              case Alice__merged_____7__1_0_____11__0_1__73_case_1
              solve( splitEqs(2) )
                case split_case_1
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__0_0_____6__0_1__77_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__0_0_____6__0_1__77_case_2
                  solve( !KU( ~n.1 ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__0_0_____6__0_1__77_case_3
                  solve( !KU( ~n.1 ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_1
                    solve( !KU( ~n.1 ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_2
                    solve( !KU( ~n.1 ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case Alice__merged_____7__1_0_____11__0_1__73_case_2
              solve( splitEqs(2) )
                case split_case_1
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92
                  solve( !KU( pk(~n.1) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92
                  solve( !KU( pk(~n.1) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92
                  solve( !KU( pk(~n.1) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_1
                    solve( !KU( ~n.1 ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_2
                    solve( !KU( ~n.1 ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Bob__merged_____2__0_0_____6__0_1__77_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__0_0_____6__0_1__77_case_2
                  solve( !KU( ~n.1 ) @ #vk.2 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__0_0_____6__0_1__77_case_3
                  solve( !KU( ~n.1 ) @ #vk.2 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_1
                    solve( !KU( ~n.1 ) @ #vk.6 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__0_0_____6__0_1__77_case_2
                    solve( !KU( ~n.1 ) @ #vk.6 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_1
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__0_0_____6__0_1__77_case_2
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__0_0_____6__0_1__77_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case Alice__merged_____7__1_0_____11__0_1__73_case_3
              solve( splitEqs(2) )
                case split_case_1
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96
                    by contradiction /* non-normal terms */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96
                    by contradiction /* non-normal terms */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96
                  solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      by contradiction /* non-normal terms */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.11 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35.1>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_1
                    solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      by contradiction /* non-normal terms */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.11 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_2
                    solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      by contradiction /* non-normal terms */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.11 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____1__0_0_____4__0_1__96
                  solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_1
                  solve( !KU( aenc(<~n.1, x>, pk(~n.3)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( ~n.1 ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.3) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.3 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96_case_1
                      solve( !KU( pk(~n.3) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.3 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96_case_2
                      solve( !KU( pk(~n.3) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.3 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_2
                  solve( !KU( ~n.1 ) @ #vk.2 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      by contradiction /* impossible chain */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_3
                  solve( !KU( ~n.1 ) @ #vk.2 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      by contradiction /* impossible chain */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.4 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* impossible chain */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* impossible chain */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.12 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.11 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.13 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35.1>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_1
                    solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      solve( !KU( ~n.2 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.1) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.1 ) @ #vk.8 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.12 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.11 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.13 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__0_0_____4__0_1__96_case_2
                    solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.7 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__0_0_____4__0_1__96
                      solve( !KU( ~n.2 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.1) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.1 ) @ #vk.8 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.12 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.11 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.13 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    solve( !KU( ~n.1 ) @ #vk.6 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                        solve( !KU( pk(~n.1) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                        solve( !KU( pk(~n.1) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____1__0_0_____4__0_1__96
                        solve( (#vr.18, 0) ~~> (#vk.1, 0) )
                          case Var_fresh_n
                          solve( !KU( pk(~n.1) ) @ #vk.5 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* impossible chain */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* impossible chain */
                          next
                            case c_pk
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_aenc
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    solve( !KU( ~n.1 ) @ #vk.6 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                        solve( !KU( pk(~n.1) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                        solve( !KU( pk(~n.1) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____1__0_0_____4__0_1__96
                        solve( (#vr.18, 0) ~~> (#vk.1, 0) )
                          case Var_fresh_n
                          solve( !KU( pk(~n.1) ) @ #vk.5 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* impossible chain */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* impossible chain */
                          next
                            case c_pk
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_aenc
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case Alice__merged_____7__1_0_____11__0_1__73_case_4
              solve( splitEqs(2) )
                case split_case_1
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                       return__var__35, 'rab__',
                                       <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                       'rab__'
                         ) ▶₀ #k )
                    case Alice__merged_____7__1_0_____11__0_1__73
                    by contradiction /* cyclic */
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92
                  solve( !KU( pk(~n.1) ) @ #vk.2 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>, 'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_pk
                    solve( !KU( ~n.1 ) @ #vk.3 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.5 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( pk(~n.1) ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.8 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.8 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.8 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92
                    by contradiction /* non-normal terms */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92
                    by contradiction /* non-normal terms */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.6 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92
                  solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.3 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case c_aenc
                    solve( !KU( pk(~n.1) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.2) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.2 ) @ #vk.6 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.7 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.5 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      by contradiction /* non-normal terms */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.11 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.10 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.12 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35.1>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_1
                    solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      by contradiction /* non-normal terms */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.11 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.10 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.12 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_2
                    solve( !KU( aenc(x, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      by contradiction /* non-normal terms */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.11 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.10 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.12 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( aenc(<~n, l__0__35>, pk(~n.1)) ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                  solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92
                    solve( !KU( pk(~n.2) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.3 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.4 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                  solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92
                    solve( !KU( pk(~n.2) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.2) ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.2 ) @ #vk.8 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Alice__merged_____1__1_0_____4__0_1__92
                  solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( !KU( pk(~n.1) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      solve( !KU( ~n.1 ) @ #vk.3 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      solve( !KU( ~n.1 ) @ #vk.3 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.3 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( !KU( pk(~n.1) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      solve( !KU( ~n.1 ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      solve( !KU( ~n.1 ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( pk(~n.1) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.2) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.2 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_pk
                      solve( !KU( ~n.1 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_1
                  solve( !KU( aenc(<~n.1, x>, pk(~n.3)) ) @ #vk.1 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                         return__var__35, 'rab__',
                                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                         'rab__'
                           ) ▶₀ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      by contradiction /* cyclic */
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92
                    solve( !KU( pk(~n.3) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case Keyprovider__merged_____0_____3__12
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_pk
                      solve( !KU( ~n.3 ) @ #vk.3 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  next
                    case c_aenc
                    solve( !KU( ~n.1 ) @ #vk.5 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( pk(~n.3) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.3 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92_case_1
                      solve( !KU( pk(~n.3) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.3 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92_case_2
                      solve( !KU( pk(~n.3) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Keyprovider__merged_____0_____3__12
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.3 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_2
                  solve( !KU( ~n.1 ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      by contradiction /* impossible chain */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case Bob__merged_____2__1_0_____6__0_1__73_case_3
                  solve( !KU( ~n.1 ) @ #vk.3 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                           return__var__35, 'rab__',
                                           <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                           'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____7__1_0_____11__0_1__73
                        by contradiction /* cyclic */
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      by contradiction /* impossible chain */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    by contradiction /* cyclic */
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_aenc
                  solve( !KU( ~n ) @ #vk.5 )
                    case Alice__merged_____11__0_1_____11__0_3__0_1__65
                    solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.5 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* impossible chain */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* impossible chain */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.6 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.10 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.13 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.12 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                  l__5__35.1>,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.14 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35.1>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_1
                    solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      solve( !KU( ~n.2 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.1) ) @ #vk.6 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.6 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.1 ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( !KU( pk(~n.2) ) @ #vk.7 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Keyprovider__merged_____0_____3__12
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_pk
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.13 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.12 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.14 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Alice__merged_____1__1_0_____4__0_1__92_case_2
                    solve( !KU( aenc(<z, x>, pk(~n.2)) ) @ #vk.2 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.8 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                             return__var__35, 'rab__',
                                             <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                             'rab__'
                               ) ▶₀ #k )
                          case Alice__merged_____7__1_0_____11__0_1__73
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case Alice__merged_____1__1_0_____4__0_1__92
                      solve( !KU( ~n.2 ) @ #vk.7 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.1) ) @ #vk.6 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.6 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.1 ) @ #vk.9 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( !KU( pk(~n.2) ) @ #vk.7 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Keyprovider__merged_____0_____3__12
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_pk
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    next
                      case c_aenc
                      solve( !KU( pk(~n.1) ) @ #vk.5 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65
                        solve( !KU( pk(~n.2) ) @ #vk.9 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        next
                          case Keyprovider__merged_____0_____3__12
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( !KU( ~n.2 ) @ #vk.13 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_pk
                        solve( !KU( ~n.1 ) @ #vk.12 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( !KU( pk(~n.2) ) @ #vk.10 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* cyclic */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* cyclic */
                          next
                            case Keyprovider__merged_____0_____3__12
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35
                                                 >,
                                                 'rab__'
                                   ) ▶₀ #k )
                              case Alice__merged_____7__1_0_____11__0_1__73
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_pk
                            solve( !KU( ~n.2 ) @ #vk.14 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          by contradiction /* cyclic */
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_1
                    solve( !KU( ~n.1 ) @ #vk.7 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                        solve( !KU( pk(~n.1) ) @ #vk.6 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                        solve( !KU( pk(~n.1) ) @ #vk.6 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____1__1_0_____4__0_1__92
                        solve( (#vr.18, 0) ~~> (#vk.1, 0) )
                          case Var_fresh_n
                          solve( !KU( pk(~n.1) ) @ #vk.6 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( !KU( pk(~n.2) ) @ #vk.6 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            next
                              case Keyprovider__merged_____0_____3__12
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_pk
                              solve( !KU( ~n.2 ) @ #vk.10 )
                                case Alice__merged_____11__0_1_____11__0_3__0_1__65
                                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                     return__var__35, 'rab__',
                                                     <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                      l__5__35>,
                                                     'rab__'
                                       ) ▶₀ #k )
                                  case Alice__merged_____7__1_0_____11__0_1__73
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_1
                                by contradiction /* cyclic */
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* impossible chain */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* impossible chain */
                          next
                            case c_pk
                            solve( !KU( pk(~n.2) ) @ #vk.6 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            next
                              case Keyprovider__merged_____0_____3__12
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_pk
                              solve( !KU( ~n.2 ) @ #vk.9 )
                                case Alice__merged_____11__0_1_____11__0_3__0_1__65
                                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                     return__var__35, 'rab__',
                                                     <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                      l__5__35>,
                                                     'rab__'
                                       ) ▶₀ #k )
                                  case Alice__merged_____7__1_0_____11__0_1__73
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_1
                                by contradiction /* cyclic */
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_aenc
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case Bob__merged_____2__1_0_____6__0_1__73_case_2
                    solve( !KU( ~n.1 ) @ #vk.7 )
                      case Alice__merged_____11__0_1_____11__0_3__0_1__65
                      solve( !KU( aenc(<z, x>, pk(~n.3)) ) @ #vk.4 )
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_1
                        solve( !KU( pk(~n.1) ) @ #vk.6 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____11__0_1_____11__0_3__0_1__65_case_2
                        solve( !KU( pk(~n.1) ) @ #vk.6 )
                          case Alice__merged_____11__0_1_____11__0_3__0_1__65
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_1
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case Bob__merged_____2__1_0_____6__0_1__73_case_2
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_pk
                          solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                               return__var__35, 'rab__',
                                               <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35.1
                                               >,
                                               'rab__'
                                 ) ▶₀ #k )
                            case Alice__merged_____7__1_0_____11__0_1__73
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Alice__merged_____1__1_0_____4__0_1__92
                        solve( (#vr.18, 0) ~~> (#vk.1, 0) )
                          case Var_fresh_n
                          solve( !KU( pk(~n.1) ) @ #vk.6 )
                            case Alice__merged_____11__0_1_____11__0_3__0_1__65
                            solve( !KU( pk(~n.2) ) @ #vk.6 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            next
                              case Keyprovider__merged_____0_____3__12
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_pk
                              solve( !KU( ~n.2 ) @ #vk.10 )
                                case Alice__merged_____11__0_1_____11__0_3__0_1__65
                                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                     return__var__35, 'rab__',
                                                     <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                      l__5__35>,
                                                     'rab__'
                                       ) ▶₀ #k )
                                  case Alice__merged_____7__1_0_____11__0_1__73
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_1
                                by contradiction /* cyclic */
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_1
                            by contradiction /* impossible chain */
                          next
                            case Bob__merged_____2__1_0_____6__0_1__73_case_2
                            by contradiction /* impossible chain */
                          next
                            case c_pk
                            solve( !KU( pk(~n.2) ) @ #vk.6 )
                              case Alice__merged_____11__0_1_____11__0_3__0_1__65
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_1
                              by contradiction /* cyclic */
                            next
                              case Bob__merged_____2__1_0_____6__0_1__73_case_2
                              by contradiction /* cyclic */
                            next
                              case Keyprovider__merged_____0_____3__12
                              solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                   return__var__35, 'rab__',
                                                   <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                    l__5__35>,
                                                   'rab__'
                                     ) ▶₀ #k )
                                case Alice__merged_____7__1_0_____11__0_1__73
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_pk
                              solve( !KU( ~n.2 ) @ #vk.9 )
                                case Alice__merged_____11__0_1_____11__0_3__0_1__65
                                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %1>,
                                                     return__var__35, 'rab__',
                                                     <l__0__35.1, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                      l__5__35>,
                                                     'rab__'
                                       ) ▶₀ #k )
                                  case Alice__merged_____7__1_0_____11__0_1__73
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_1
                                by contradiction /* cyclic */
                              next
                                case Bob__merged_____2__1_0_____6__0_1__73_case_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_1
                        by contradiction /* cyclic */
                      next
                        case Bob__merged_____2__1_0_____6__0_1__73_case_2
                        by contradiction /* cyclic */
                      next
                        case c_aenc
                        by contradiction /* cyclic */
                      qed
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_1
                      by contradiction /* cyclic */
                    next
                      case Bob__merged_____2__1_0_____6__0_1__73_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____11__0_3__0_1_____11__0_5__60
      solve( State__Alice( <'rab_____11__0_3__0_1', param, %i>,
                           return__var__41, 'rab__',
                           <l__0__41, l__1__41, l__2__41, l__3__41, l__4__41, l__5__41, l__6__41, 
                            l__7__41, l__8__41>,
                           'rab__'
             ) ▶₀ #j )
        case Alice__merged_____11__0_1_____11__0_3__0_1__65
        solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____11__0_3__0_1',
                             %i
               ) @ #k )
          case Alice__merged_____11__0_3__0_1_____11__0_5__60
          solve( State__Alice( <'rab_____11__0_3__0_1', 'rab__rab', %i>,
                               return__var__41, 'rab__',
                               <l__0__41, l__1__41, l__2__41, l__3__41.1, l__4__41.1, l__5__41.1, 
                                l__6__41.1, l__7__41.1, l__8__41.1>,
                               'rab__'
                 ) ▶₀ #k )
            case Alice__merged_____11__0_1_____11__0_3__0_1__65
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Alice__merged_____11__0_5_____19__59
      solve( State__Alice( <'rab_____11__0_5', param, %i>, return__var__43,
                           'rab__',
                           <l__0__43, l__1__43, l__2__43, l__3__43, l__4__43, l__5__43, l__6__43>,
                           'rab__'
             ) ▶₀ #j )
        case Alice__merged_____11__0_3__0_1_____11__0_5__60
        solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____11__0_5', %i
               ) @ #k )
          case Alice__merged_____11__0_5_____19__59
          solve( State__Alice( <'rab_____11__0_5', 'rab__rab', %i>,
                               return__var__43, 'rab__',
                               <l__0__43, l__1__43.1, l__2__43.1, l__3__43.1, l__4__43.1, l__5__43.1, 
                                l__6__43.1>,
                               'rab__'
                 ) ▶₀ #k )
            case Alice__merged_____11__0_3__0_1_____11__0_5__60
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Alice__merged_____1__0_0_____4__0_1__96
      solve( State__Alice( <'rab_____1__0_0', param, %i>, return__var__2,
                           'rab__', <l__0__2, l__1__2>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____0_____1__0_0__98
        solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__key_chan', 'rab__recv'
               ) ▶₂ #j )
          case Init__system__ACP__8
          solve( !Const__( 'rab__nonce_a', nonce_a__11 ) ▶₃ #j )
            case Const__nonce_a
            solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpab', 'rab__send'
                   ) ▶₄ #j )
              case Init__system__ACP__5
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____1__0_0', %1
                     ) @ #k )
                case Alice__merged_____1__0_0_____4__0_1__96
                solve( State__Alice( <'rab_____1__0_0', 'rab__rab', %1>, return__var__2,
                                     'rab__', <l__0__2, l__1__2>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____0_____1__0_0__98
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____1__1_0_____4__0_1__92
      solve( State__Alice( <'rab_____1__1_0', param, %i>, return__var__7,
                           'rab__', <l__0__7, l__1__7>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____0_____1__1_0__97
        solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__key_chan', 'rab__recv'
               ) ▶₃ #j )
          case Init__system__ACP__8
          solve( !Const__( 'rab__nonce_a', nonce_a__11 ) ▶₄ #j )
            case Const__nonce_a
            solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpab', 'rab__send'
                   ) ▶₅ #j )
              case Init__system__ACP__5
              solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____1__1_0', %1
                     ) @ #k )
                case Alice__merged_____1__1_0_____4__0_1__92
                solve( State__Alice( <'rab_____1__1_0', 'rab__rab', %1>, return__var__7,
                                     'rab__', <l__0__7, l__1__7>, 'rab__'
                       ) ▶₀ #k )
                  case Alice__merged_____0_____1__1_0__97
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____4__0_1_____7__0_0__83
      solve( State__Alice( <'rab_____4__0_1', param, %i>, return__var__17,
                           'rab__', <l__0__17, l__1__17, l__2__17, l__3__17>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____1__0_0_____4__0_1__96
        solve( !Const__( 'rab__nonce_a', nonce_a__18 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____4__0_1', %1
                 ) @ #k )
            case Alice__merged_____4__0_1_____7__0_0__83
            solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>, return__var__17,
                                 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____1__0_0_____4__0_1__96
              by contradiction /* cyclic */
            qed
          next
            case Alice__merged_____4__0_1_____7__1_0__82
            by solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>,
                                    return__var__17, 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>,
                                    'rab__'
                      ) ▶₀ #k )
          qed
        qed
      next
        case Alice__merged_____1__1_0_____4__0_1__92
        solve( !Const__( 'rab__nonce_a', nonce_a__18 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____4__0_1', %1
                 ) @ #k )
            case Alice__merged_____4__0_1_____7__0_0__83
            solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>, return__var__17,
                                 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____1__1_0_____4__0_1__92
              by contradiction /* cyclic */
            qed
          next
            case Alice__merged_____4__0_1_____7__1_0__82
            by solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>,
                                    return__var__17, 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>,
                                    'rab__'
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Alice__merged_____4__0_1_____7__1_0__82
      solve( State__Alice( <'rab_____4__0_1', param, %i>, return__var__17,
                           'rab__', <l__0__17, l__1__17, l__2__17, l__3__17>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____1__0_0_____4__0_1__96
        solve( !Const__( 'rab__nonce_a', nonce_a__18 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____4__0_1', %1
                 ) @ #k )
            case Alice__merged_____4__0_1_____7__0_0__83
            by solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>,
                                    return__var__17, 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>,
                                    'rab__'
                      ) ▶₀ #k )
          next
            case Alice__merged_____4__0_1_____7__1_0__82
            solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>, return__var__17,
                                 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____1__0_0_____4__0_1__96
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case Alice__merged_____1__1_0_____4__0_1__92
        solve( !Const__( 'rab__nonce_a', nonce_a__18 ) ▶₁ #j )
          case Const__nonce_a
          solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____4__0_1', %1
                 ) @ #k )
            case Alice__merged_____4__0_1_____7__0_0__83
            by solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>,
                                    return__var__17, 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>,
                                    'rab__'
                      ) ▶₀ #k )
          next
            case Alice__merged_____4__0_1_____7__1_0__82
            solve( State__Alice( <'rab_____4__0_1', 'rab__rab', %1>, return__var__17,
                                 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17.1>, 'rab__'
                   ) ▶₀ #k )
              case Alice__merged_____1__1_0_____4__0_1__92
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____7__0_0_____11__0_1__77
      solve( State__Alice( <'rab_____7__0_0', param, %i>, return__var__21,
                           'rab__', <l__0__21, l__1__21, l__2__21, l__3__21>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____4__0_1_____7__0_0__83_case_1
        solve( Store( 'rab__udpba', n__0__21 ) ▶₁ #j )
          case Bob__merged_____2__0_0_____6__0_1__77
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₄ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₅ #j )
                  case Const__nonce_a
                  solve( !Eq__( z, ~n ) ▶₆ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_0', %1
                           ) @ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      solve( State__Alice( <'rab_____7__0_0', 'rab__rab', %1>, return__var__21,
                                           'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__0_0__83
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____2__1_0_____6__0_1__73
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₄ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₅ #j )
                  case Const__nonce_a
                  solve( !Eq__( z, ~n ) ▶₆ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_0', %1
                           ) @ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      solve( State__Alice( <'rab_____7__0_0', 'rab__rab', %1>, return__var__21,
                                           'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__0_0__83
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Alice__merged_____4__0_1_____7__0_0__83_case_2
        solve( Store( 'rab__udpba', n__0__21 ) ▶₁ #j )
          case Bob__merged_____2__0_0_____6__0_1__77
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₄ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₅ #j )
                  case Const__nonce_a
                  solve( !Eq__( z, ~n ) ▶₆ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_0', %1
                           ) @ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      solve( State__Alice( <'rab_____7__0_0', 'rab__rab', %1>, return__var__21,
                                           'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__0_0__83
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____2__1_0_____6__0_1__73
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₃ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₄ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₅ #j )
                  case Const__nonce_a
                  solve( !Eq__( z, ~n ) ▶₆ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__0_0', %1
                           ) @ #k )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      solve( State__Alice( <'rab_____7__0_0', 'rab__rab', %1>, return__var__21,
                                           'rab__', <l__0__21, l__1__21, l__2__21, l__3__21.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__0_0__83
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Alice__merged_____7__1_0_____11__0_1__73
      solve( State__Alice( <'rab_____7__1_0', param, %i>, return__var__26,
                           'rab__', <l__0__26, l__1__26, l__2__26, l__3__26>, 'rab__'
             ) ▶₀ #j )
        case Alice__merged_____4__0_1_____7__1_0__82_case_1
        solve( Store( 'rab__udpba', n__0__26 ) ▶₁ #j )
          case Bob__merged_____2__0_0_____6__0_1__77
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₅ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₆ #j )
                  case Const__nonce_a
                  solve( !Eq__( z.1, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__1_0', %1
                           ) @ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      solve( State__Alice( <'rab_____7__1_0', 'rab__rab', %1>, return__var__26,
                                           'rab__', <l__0__26, l__1__26, l__2__26, l__3__26.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__1_0__82
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____2__1_0_____6__0_1__73
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₅ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₆ #j )
                  case Const__nonce_a
                  solve( !Eq__( z.1, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__1_0', %1
                           ) @ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      solve( State__Alice( <'rab_____7__1_0', 'rab__rab', %1>, return__var__26,
                                           'rab__', <l__0__26, l__1__26, l__2__26, l__3__26.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__1_0__82
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Alice__merged_____4__0_1_____7__1_0__82_case_2
        solve( Store( 'rab__udpba', n__0__26 ) ▶₁ #j )
          case Bob__merged_____2__0_0_____6__0_1__77
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₅ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₆ #j )
                  case Const__nonce_a
                  solve( !Eq__( z.1, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__1_0', %1
                           ) @ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      solve( State__Alice( <'rab_____7__1_0', 'rab__rab', %1>, return__var__26,
                                           'rab__', <l__0__26, l__1__26, l__2__26, l__3__26.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__1_0__82
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Bob__merged_____2__1_0_____6__0_1__73
          solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__6
            solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30 ) ▶₄ #j )
              case Const__priv_key_alice
              solve( !Const__( 'rab__nonce_a', nonce_a__34 ) ▶₅ #j )
                case Const__nonce_a
                solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₆ #j )
                  case Const__nonce_a
                  solve( !Eq__( z.1, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Alice', 'rab__rab'>, 'rab_____7__1_0', %1
                           ) @ #k )
                      case Alice__merged_____7__1_0_____11__0_1__73
                      solve( State__Alice( <'rab_____7__1_0', 'rab__rab', %1>, return__var__26,
                                           'rab__', <l__0__26, l__1__26, l__2__26, l__3__26.1>, 'rab__'
                             ) ▶₀ #k )
                        case Alice__merged_____4__0_1_____7__1_0__82
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____0_____2__0_0__80
      solve( State__Bob( <'rab_____0', param, %i>, return__var__0, 'rab__',
                         'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
          case Bob__merged_____0_____2__0_0__80
          solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                             'rab__', 'rab__', 'rab__'
                 ) ▶₀ #k )
            case Init__system
            by contradiction /* cyclic */
          qed
        next
          case Bob__merged_____0_____2__1_0__81
          by solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                'rab__', 'rab__', 'rab__'
                    ) ▶₀ #k )
        qed
      qed
    next
      case Bob__merged_____0_____2__1_0__81
      solve( State__Bob( <'rab_____0', param, %i>, return__var__0, 'rab__',
                         'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____0', %1 ) @ #k )
          case Bob__merged_____0_____2__0_0__80
          by solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                'rab__', 'rab__', 'rab__'
                    ) ▶₀ #k )
        next
          case Bob__merged_____0_____2__1_0__81
          solve( State__Bob( <'rab_____0', 'rab__rab', %1>, return__var__0,
                             'rab__', 'rab__', 'rab__'
                 ) ▶₀ #k )
            case Init__system
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Bob__merged_____11__0_1_____18__47
      solve( State__Bob( <'rab_____11__0_1', param, %i>, return__var__35,
                         'rab__', <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35>, 'rab__'
             ) ▶₀ #j )
        case Bob__merged_____9__0_0_____11__0_1__57_case_1
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35.1, l__1__35, l__2__35, l__3__35.1, l__4__35.1>,
                             'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__0_0_____11__0_1__57
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____9__0_0_____11__0_1__57_case_2
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35.1, l__1__35, l__2__35, l__3__35.1, l__4__35.1>,
                             'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__0_0_____11__0_1__57
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____9__1_0_____11__0_1__53_case_1
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35, l__1__35, l__2__35, l__3__35.1, l__4__35.1>, 'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__1_0_____11__0_1__53
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____9__1_0_____11__0_1__53_case_2
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35, l__1__35, l__2__35, l__3__35.1, l__4__35.1>, 'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__1_0_____11__0_1__53
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____9__1_0_____11__0_1__53_case_3
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35, l__1__35, l__2__35, l__3__35.1, l__4__35.1>, 'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__1_0_____11__0_1__53
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____9__1_0_____11__0_1__53_case_4
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35, l__1__35, l__2__35, l__3__35.1, l__4__35.1>, 'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__1_0_____11__0_1__53
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____9__1_0_____11__0_1__53_case_5
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35, l__1__35, l__2__35, l__3__35.1, l__4__35.1>, 'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__1_0_____11__0_1__53
            by contradiction /* cyclic */
          qed
        qed
      next
        case Bob__merged_____9__1_0_____11__0_1__53_case_6
        solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____11__0_1', %1
               ) @ #k )
          case Bob__merged_____11__0_1_____18__47
          solve( State__Bob( <'rab_____11__0_1', 'rab__rab', %1>, return__var__35,
                             'rab__', <l__0__35, l__1__35, l__2__35, l__3__35.1, l__4__35.1>, 'rab__'
                 ) ▶₀ #k )
            case Bob__merged_____9__1_0_____11__0_1__53
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Bob__merged_____2__0_0_____6__0_1__77
      solve( State__Bob( <'rab_____2__0_0', param, %i>, return__var__3,
                         'rab__', <l__0__3, l__1__3>, 'rab__'
             ) ▶₀ #j )
        case Bob__merged_____0_____2__0_0__80
        solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
               ) ▶₂ #j )
          case Init__system__ACP__2
          solve( !Const__( 'rab__priv_key_bob', priv_key_bob__12 ) ▶₃ #j )
            case Const__priv_key_bob
            solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpba', 'rab__send'
                   ) ▶₄ #j )
              case Init__system__ACP__1
              solve( !Const__( 'rab__priv_key_alice', priv_key_alice__13 ) ▶₅ #j )
                case Const__priv_key_alice
                solve( !Const__( 'rab__nonce_b', nonce_b__13 ) ▶₆ #j )
                  case Const__nonce_b
                  solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____2__0_0', %1
                         ) @ #k )
                    case Bob__merged_____2__0_0_____6__0_1__77
                    solve( State__Bob( <'rab_____2__0_0', 'rab__rab', %1>, return__var__3,
                                       'rab__', <l__0__3, l__1__3>, 'rab__'
                           ) ▶₀ #k )
                      case Bob__merged_____0_____2__0_0__80
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____2__1_0_____6__0_1__73
      solve( State__Bob( <'rab_____2__1_0', param, %i>, return__var__8,
                         'rab__', <l__0__8, l__1__8>, 'rab__'
             ) ▶₀ #j )
        case Bob__merged_____0_____2__1_0__81
        solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
               ) ▶₃ #j )
          case Init__system__ACP__2
          solve( !Const__( 'rab__priv_key_bob', priv_key_bob__12 ) ▶₄ #j )
            case Const__priv_key_bob
            solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpba', 'rab__send'
                   ) ▶₅ #j )
              case Init__system__ACP__1
              solve( !Const__( 'rab__priv_key_alice', priv_key_alice__13 ) ▶₆ #j )
                case Const__priv_key_alice
                solve( !Const__( 'rab__nonce_b', nonce_b__13 ) ▶₇ #j )
                  case Const__nonce_b
                  solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____2__1_0', %1
                         ) @ #k )
                    case Bob__merged_____2__1_0_____6__0_1__73
                    solve( State__Bob( <'rab_____2__1_0', 'rab__rab', %1>, return__var__8,
                                       'rab__', <l__0__8, l__1__8>, 'rab__'
                           ) ▶₀ #k )
                      case Bob__merged_____0_____2__1_0__81
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____6__0_1_____9__0_0__63
      solve( State__Bob( <'rab_____6__0_1', param, %i>, return__var__19,
                         'rab__', <l__0__19, l__1__19, l__2__19, l__3__19, l__4__19>, 'rab__'
             ) ▶₀ #j )
        case Bob__merged_____2__0_0_____6__0_1__77
        solve( !Const__( 'rab__nonce_b', nonce_b__20 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____6__0_1', %1
                 ) @ #k )
            case Bob__merged_____6__0_1_____9__0_0__63
            solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>, return__var__19,
                               'rab__', <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                   ) ▶₀ #k )
              case Bob__merged_____2__0_0_____6__0_1__77
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____6__0_1_____9__1_0__62
            by solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>,
                                  return__var__19, 'rab__',
                                  <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                      ) ▶₀ #k )
          qed
        qed
      next
        case Bob__merged_____2__1_0_____6__0_1__73
        solve( !Const__( 'rab__nonce_b', nonce_b__20 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____6__0_1', %1
                 ) @ #k )
            case Bob__merged_____6__0_1_____9__0_0__63
            solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>, return__var__19,
                               'rab__', <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                   ) ▶₀ #k )
              case Bob__merged_____2__1_0_____6__0_1__73
              by contradiction /* cyclic */
            qed
          next
            case Bob__merged_____6__0_1_____9__1_0__62
            by solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>,
                                  return__var__19, 'rab__',
                                  <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                      ) ▶₀ #k )
          qed
        qed
      qed
    next
      case Bob__merged_____6__0_1_____9__1_0__62
      solve( State__Bob( <'rab_____6__0_1', param, %i>, return__var__19,
                         'rab__', <l__0__19, l__1__19, l__2__19, l__3__19, l__4__19>, 'rab__'
             ) ▶₀ #j )
        case Bob__merged_____2__0_0_____6__0_1__77
        solve( !Const__( 'rab__nonce_b', nonce_b__20 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____6__0_1', %1
                 ) @ #k )
            case Bob__merged_____6__0_1_____9__0_0__63
            by solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>,
                                  return__var__19, 'rab__',
                                  <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                      ) ▶₀ #k )
          next
            case Bob__merged_____6__0_1_____9__1_0__62
            solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>, return__var__19,
                               'rab__', <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                   ) ▶₀ #k )
              case Bob__merged_____2__0_0_____6__0_1__77
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case Bob__merged_____2__1_0_____6__0_1__73
        solve( !Const__( 'rab__nonce_b', nonce_b__20 ) ▶₁ #j )
          case Const__nonce_b
          solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____6__0_1', %1
                 ) @ #k )
            case Bob__merged_____6__0_1_____9__0_0__63
            by solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>,
                                  return__var__19, 'rab__',
                                  <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                      ) ▶₀ #k )
          next
            case Bob__merged_____6__0_1_____9__1_0__62
            solve( State__Bob( <'rab_____6__0_1', 'rab__rab', %1>, return__var__19,
                               'rab__', <l__0__19, l__1__19, l__2__19, l__3__19.1, l__4__19.1>, 'rab__'
                   ) ▶₀ #k )
              case Bob__merged_____2__1_0_____6__0_1__73
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____9__0_0_____11__0_1__57
      solve( State__Bob( <'rab_____9__0_0', param, %i>, return__var__23,
                         'rab__', <l__0__23, l__1__23, l__2__23, l__3__23, l__4__23>, 'rab__'
             ) ▶₀ #j )
        case Bob__merged_____6__0_1_____9__0_0__63_case_1
        solve( Store( 'rab__udpab', n__0__23 ) ▶₁ #j )
          case Alice__merged_____11__0_1_____11__0_3__0_1__65
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₄ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₅ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₆ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__0_0', %1
                           ) @ #k )
                      case Bob__merged_____9__0_0_____11__0_1__57
                      solve( State__Bob( <'rab_____9__0_0', 'rab__rab', %1>, return__var__23,
                                         'rab__', <l__0__23, l__1__23, l__2__23, l__3__23.1, l__4__23.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__0_0__63
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__0_0_____4__0_1__96
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₄ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₅ #j )
                  case Const__nonce_b
                  by solve( !Eq__( z, ~n ) ▶₆ #j )
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__1_0_____4__0_1__92
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₄ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₅ #j )
                  case Const__nonce_b
                  by solve( !Eq__( z, ~n ) ▶₆ #j )
                qed
              qed
            qed
          qed
        qed
      next
        case Bob__merged_____6__0_1_____9__0_0__63_case_2
        solve( Store( 'rab__udpab', n__0__23 ) ▶₁ #j )
          case Alice__merged_____11__0_1_____11__0_3__0_1__65
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₄ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₅ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₆ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__0_0', %1
                           ) @ #k )
                      case Bob__merged_____9__0_0_____11__0_1__57
                      solve( State__Bob( <'rab_____9__0_0', 'rab__rab', %1>, return__var__23,
                                         'rab__', <l__0__23, l__1__23, l__2__23, l__3__23.1, l__4__23.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__0_0__63
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__0_0_____4__0_1__96
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₄ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₅ #j )
                  case Const__nonce_b
                  by solve( !Eq__( z, ~n ) ▶₆ #j )
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__1_0_____4__0_1__92
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₂ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₃ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₄ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₅ #j )
                  case Const__nonce_b
                  by solve( !Eq__( z, ~n ) ▶₆ #j )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Bob__merged_____9__1_0_____11__0_1__53
      solve( State__Bob( <'rab_____9__1_0', param, %i>, return__var__28,
                         'rab__', <l__0__28, l__1__28, l__2__28, l__3__28, l__4__28>, 'rab__'
             ) ▶₀ #j )
        case Bob__merged_____6__0_1_____9__1_0__62_case_1
        solve( Store( 'rab__udpab', n__0__28 ) ▶₁ #j )
          case Alice__merged_____11__0_1_____11__0_3__0_1__65
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₅ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₆ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__1_0', %1
                           ) @ #k )
                      case Bob__merged_____9__1_0_____11__0_1__53
                      solve( State__Bob( <'rab_____9__1_0', 'rab__rab', %1>, return__var__28,
                                         'rab__', <l__0__28, l__1__28, l__2__28, l__3__28.1, l__4__28.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__1_0__62
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__0_0_____4__0_1__96
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₅ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₆ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__1_0', %1
                           ) @ #k )
                      case Bob__merged_____9__1_0_____11__0_1__53
                      solve( State__Bob( <'rab_____9__1_0', 'rab__rab', %1>, return__var__28,
                                         'rab__', <l__0__28, l__1__28, l__2__28, l__3__28.1, l__4__28.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__1_0__62
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__1_0_____4__0_1__92
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₅ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₆ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__1_0', %1
                           ) @ #k )
                      case Bob__merged_____9__1_0_____11__0_1__53
                      solve( State__Bob( <'rab_____9__1_0', 'rab__rab', %1>, return__var__28,
                                         'rab__', <l__0__28, l__1__28, l__2__28, l__3__28.1, l__4__28.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__1_0__62
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Bob__merged_____6__0_1_____9__1_0__62_case_2
        solve( Store( 'rab__udpab', n__0__28 ) ▶₁ #j )
          case Alice__merged_____11__0_1_____11__0_3__0_1__65
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₅ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₆ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__1_0', %1
                           ) @ #k )
                      case Bob__merged_____9__1_0_____11__0_1__53
                      solve( State__Bob( <'rab_____9__1_0', 'rab__rab', %1>, return__var__28,
                                         'rab__', <l__0__28, l__1__28, l__2__28, l__3__28.1, l__4__28.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__1_0__62
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__0_0_____4__0_1__96
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₅ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₆ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__1_0', %1
                           ) @ #k )
                      case Bob__merged_____9__1_0_____11__0_1__53
                      solve( State__Bob( <'rab_____9__1_0', 'rab__rab', %1>, return__var__28,
                                         'rab__', <l__0__28, l__1__28, l__2__28, l__3__28.1, l__4__28.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__1_0__62
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Alice__merged_____1__1_0_____4__0_1__92
          solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
                 ) ▶₃ #j )
            case Init__system__ACP__2
            solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₄ #j )
              case Const__priv_key_bob
              solve( !Const__( 'rab__nonce_b', nonce_b__34 ) ▶₅ #j )
                case Const__nonce_b
                solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₆ #j )
                  case Const__nonce_b
                  solve( !Eq__( z, ~n ) ▶₇ #j )
                    case Equality_gen
                    solve( Transition__( <'rab__Bob', 'rab__rab'>, 'rab_____9__1_0', %1
                           ) @ #k )
                      case Bob__merged_____9__1_0_____11__0_1__53
                      solve( State__Bob( <'rab_____9__1_0', 'rab__rab', %1>, return__var__28,
                                         'rab__', <l__0__28, l__1__28, l__2__28, l__3__28.1, l__4__28.1>,
                                         'rab__'
                             ) ▶₀ #k )
                        case Bob__merged_____6__0_1_____9__1_0__62
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Keyprovider__merged_____0_____3__12
      solve( State__Keyprovider( <'rab_____0', param, %i>, return__var__0,
                                 'rab__', 'rab__', 'rab__'
             ) ▶₀ #j )
        case Init__system
        solve( !Const__( 'rab__priv_key_bob', priv_key_bob__0 ) ▶₁ #j )
          case Const__priv_key_bob
          solve( !ACP__( <'rab__Keyprovider', 'rab__rab'>, 'rab__key_chan',
                         'rab__send'
                 ) ▶₂ #j )
            case Init__system__ACP__11
            solve( Transition__( <'rab__Keyprovider', 'rab__rab'>, 'rab_____0', %1
                   ) @ #k )
              case Keyprovider__merged_____0_____3__12
              solve( State__Keyprovider( <'rab_____0', 'rab__rab', %1>, return__var__0,
                                         'rab__', 'rab__', 'rab__'
                     ) ▶₀ #k )
                case Init__system
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secret_nonce_B_broken_upon_agreement:
  exists-trace
  "∃ new__0 #time__1 #time__0.
    (SecretNonceBob( new__0 ) @ #time__1) ∧ (K( new__0 ) @ #time__0)"
/*
guarded formula characterizing all satisfying traces:
"∃ new__0 #time__1 #time__0.
  (SecretNonceBob( new__0 ) @ #time__1) ∧ (K( new__0 ) @ #time__0)"
*/
simplify
solve( SecretNonceBob( new__0 ) @ #time__1 )
  case Bob__merged_____9__1_0_____11__0_1__53
  solve( State__Bob( <'rab_____9__1_0', param, %v__>, return__var__28,
                     'rab__', <l__0__28, l__1__28, l__2__28, l__3__28, l__4__28>, 'rab__'
         ) ▶₀ #time__1 )
    case Bob__merged_____6__0_1_____9__1_0__62_case_2
    solve( Store( 'rab__udpab', n__0__28 ) ▶₁ #time__1 )
      case Alice__merged_____11__0_1_____11__0_3__0_1__65
      solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
             ) ▶₃ #time__1 )
        case Init__system__ACP__2
        solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₄ #time__1 )
          case Const__priv_key_bob
          solve( !Const__( 'rab__nonce_b', new__0 ) ▶₅ #time__1 )
            case Const__nonce_b
            solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₆ #time__1 )
              case Const__nonce_b
              solve( !Eq__( z, ~n ) ▶₇ #time__1 )
                case Equality_gen
                solve( !KU( ~n ) @ #vk )
                  case Alice__merged_____11__0_1_____11__0_3__0_1__65
                  solve( splitEqs(1) )
                    case split_case_1
                    solve( !KU( aenc(~n, pk(~n.2)) ) @ #vk.1 )
                      case c_aenc
                      solve( !KU( aenc(<l__3__28, x>, pk(~n.2)) ) @ #vk.2 )
                        case c_aenc
                        solve( !KU( pk(~n.2) ) @ #vk.4 )
                          case Keyprovider__merged_____0_____3__12
                          solve( Store( 'rab__udpab', n__0__8 ) ▶₁ #vr.1 )
                            case Alice__merged_____1__1_0_____4__0_1__92
                            solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %v__>,
                                                 return__var__35, 'rab__',
                                                 <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, l__5__35>,
                                                 'rab__'
                                   ) ▶₀ #vr.9 )
                              case Alice__merged_____7__0_0_____11__0_1__77
                              solve( !KU( ~n.1 ) @ #vk.6 )
                                case Alice__merged_____1__1_0_____4__0_1__92_case_1
                                solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %v__>,
                                                     return__var__35, 'rab__',
                                                     <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, 
                                                      pk(loc__0.1)>,
                                                     'rab__'
                                       ) ▶₀ #vr.12 )
                                  case Alice__merged_____7__0_0_____11__0_1__77
                                  solve( (#vr.12, 0) ~~> (#vk, 0) )
                                    case Var_fresh_n
                                    solve( Store( 'rab__key_chan', n__0__7 ) ▶₁ #vr.15 )
                                      case Keyprovider__merged_____0_____3__12
                                      solve( !KU( pk(loc__0) ) @ #vk.8 )
                                        case c_pk
                                        SOLVED // trace found
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secret_nonce_A_broken_upon_agreement:
  exists-trace
  "∃ new__0 #time__1 #time__0.
    (SecretNonceAlice( new__0 ) @ #time__1) ∧ (K( new__0 ) @ #time__0)"
/*
guarded formula characterizing all satisfying traces:
"∃ new__0 #time__1 #time__0.
  (SecretNonceAlice( new__0 ) @ #time__1) ∧ (K( new__0 ) @ #time__0)"
*/
simplify
solve( SecretNonceAlice( new__0 ) @ #time__1 )
  case Alice__merged_____7__0_0_____11__0_1__77
  solve( State__Alice( <'rab_____7__0_0', param, %v__>, return__var__21,
                       'rab__', <l__0__21, l__1__21, l__2__21, l__3__21>, 'rab__'
         ) ▶₀ #time__1 )
    case Alice__merged_____4__0_1_____7__0_0__83_case_2
    solve( Store( 'rab__udpba', n__0__21 ) ▶₁ #time__1 )
      case Bob__merged_____2__1_0_____6__0_1__73
      solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
             ) ▶₂ #time__1 )
        case Init__system__ACP__6
        solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30
               ) ▶₃ #time__1 )
          case Const__priv_key_alice
          solve( !Const__( 'rab__nonce_a', new__0 ) ▶₄ #time__1 )
            case Const__nonce_a
            solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₅ #time__1 )
              case Const__nonce_a
              solve( !Eq__( z, ~n ) ▶₆ #time__1 )
                case Equality_gen
                solve( !KU( ~n ) @ #vk )
                  case Alice__merged_____1__1_0_____4__0_1__92_case_1
                  solve( !KU( aenc(<~n, x>, pk(~n.3)) ) @ #vk.2 )
                    case c_aenc
                    solve( !KU( pk(~n.3) ) @ #vk.5 )
                      case Keyprovider__merged_____0_____3__12
                      solve( Store( 'rab__key_chan', n__0__7 ) ▶₁ #vr.1 )
                        case Keyprovider__merged_____0_____3__12
                        solve( Store( 'rab__udpab', n__0__8 ) ▶₁ #vr.7 )
                          case Alice__merged_____1__1_0_____4__0_1__92
                          solve( !KU( pk(loc__0) ) @ #vk.4 )
                            case c_pk
                            SOLVED // trace found
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secret_nonce_B_broken:
  exists-trace
  "∃ nonce_b #time__0 #label_time__0.
    (!Const__( 'rab__nonce_b', nonce_b ) @ #label_time__0) ∧
    (K( nonce_b ) @ #time__0)"
/*
guarded formula characterizing all satisfying traces:
"∃ nonce_b #time__0 #label_time__0.
  (!Const__( 'rab__nonce_b', nonce_b ) @ #label_time__0) ∧
  (K( nonce_b ) @ #time__0)"
*/
simplify
solve( !Const__( 'rab__nonce_b', nonce_b ) @ #label_time__0 )
  case Const__nonce_b
  solve( !KU( ~n ) @ #vk )
    case Alice__merged_____11__0_1_____11__0_3__0_1__65
    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %v__>,
                         return__var__35, 'rab__',
                         <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35, pk(loc__0)>, 'rab__'
           ) ▶₀ #vr )
      case Alice__merged_____7__0_0_____11__0_1__77_case_4
      solve( (#vr.1, 0) ~~> (#vk, 0) )
        case Var_fresh_n
        solve( !KU( aenc(<~z, x>, pk(~n.1)) ) @ #vk.2 )
          case c_aenc
          solve( !KU( ~z ) @ #vk.6 )
            case Alice__merged_____1__1_0_____4__0_1__92_case_1
            solve( !KU( pk(~n.1) ) @ #vk.6 )
              case Keyprovider__merged_____0_____3__12
              solve( Store( 'rab__udpab', n__0__8 ) ▶₁ #vr.6 )
                case Alice__merged_____1__1_0_____4__0_1__92
                solve( Store( 'rab__key_chan', n__0__7 ) ▶₁ #vr.11 )
                  case Keyprovider__merged_____0_____3__12
                  solve( !KU( pk(loc__0) ) @ #vk.6 )
                    case c_pk
                    SOLVED // trace found
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secret_nonce_A_broken:
  exists-trace
  "∃ nonce_a #time__0 #label_time__0.
    (!Const__( 'rab__nonce_a', nonce_a ) @ #label_time__0) ∧
    (K( nonce_a ) @ #time__0)"
/*
guarded formula characterizing all satisfying traces:
"∃ nonce_a #time__0 #label_time__0.
  (!Const__( 'rab__nonce_a', nonce_a ) @ #label_time__0) ∧
  (K( nonce_a ) @ #time__0)"
*/
simplify
solve( !Const__( 'rab__nonce_a', nonce_a ) @ #label_time__0 )
  case Const__nonce_a
  solve( !KU( ~n ) @ #vk )
    case Alice__merged_____1__1_0_____4__0_1__92_case_1
    solve( Store( 'rab__key_chan', n__0__7 ) ▶₁ #vr )
      case Keyprovider__merged_____0_____3__12
      solve( !KU( pk(loc__0) ) @ #vk.1 )
        case c_pk
        SOLVED // trace found
      qed
    qed
  qed
qed

lemma agreement_B:
  exists-trace "∃ new__0 #time__0. SecretNonceBob( new__0 ) @ #time__0"
/*
guarded formula characterizing all satisfying traces:
"∃ new__0 #time__0. (SecretNonceBob( new__0 ) @ #time__0)"
*/
simplify
solve( SecretNonceBob( new__0 ) @ #time__0 )
  case Bob__merged_____9__0_0_____11__0_1__57
  solve( State__Bob( <'rab_____9__0_0', param, %v__>, return__var__23,
                     'rab__', <l__0__23, l__1__23, l__2__23, l__3__23, l__4__23>, 'rab__'
         ) ▶₀ #time__0 )
    case Bob__merged_____6__0_1_____9__0_0__63_case_1
    solve( Store( 'rab__udpab', n__0__23 ) ▶₁ #time__0 )
      case Alice__merged_____11__0_1_____11__0_3__0_1__65
      solve( !ACP__( <'rab__Bob', 'rab__rab'>, 'rab__udpab', 'rab__recv'
             ) ▶₂ #time__0 )
        case Init__system__ACP__2
        solve( !Const__( 'rab__priv_key_bob', priv_key_bob__32 ) ▶₃ #time__0 )
          case Const__priv_key_bob
          solve( !Const__( 'rab__nonce_b', new__0 ) ▶₄ #time__0 )
            case Const__nonce_b
            solve( !Const__( 'rab__nonce_b', nonce_b__33 ) ▶₅ #time__0 )
              case Const__nonce_b
              solve( !Eq__( z, ~n ) ▶₆ #time__0 )
                case Equality_gen
                solve( splitEqs(1) )
                  case split_case_1
                  solve( Store( 'rab__udpab', aenc(<l__3__23, x>, pk(~n.2)) ) ▶₁ #vr.1 )
                    case Alice__merged_____1__0_0_____4__0_1__96
                    solve( State__Alice( <'rab_____11__0_1', 'rab__rab', %v__>,
                                         return__var__35, 'rab__',
                                         <~n.1, l__1__35, l__2__35, l__3__35, l__4__35, pk(~n.3)>, 'rab__'
                           ) ▶₀ #vr.9 )
                      case Alice__merged_____7__0_0_____11__0_1__77
                      solve( Store( 'rab__key_chan', pk(~n.3) ) ▶₁ #vr.12 )
                        case Keyprovider__merged_____0_____3__12
                        SOLVED // trace found
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma agreement_A:
  exists-trace "∃ new__0 #time__0. SecretNonceAlice( new__0 ) @ #time__0"
/*
guarded formula characterizing all satisfying traces:
"∃ new__0 #time__0. (SecretNonceAlice( new__0 ) @ #time__0)"
*/
simplify
solve( SecretNonceAlice( new__0 ) @ #time__0 )
  case Alice__merged_____7__0_0_____11__0_1__77
  solve( State__Alice( <'rab_____7__0_0', param, %v__>, return__var__21,
                       'rab__', <l__0__21, l__1__21, l__2__21, l__3__21>, 'rab__'
         ) ▶₀ #time__0 )
    case Alice__merged_____4__0_1_____7__0_0__83_case_1
    solve( Store( 'rab__udpba', n__0__21 ) ▶₁ #time__0 )
      case Bob__merged_____2__0_0_____6__0_1__77
      solve( !ACP__( <'rab__Alice', 'rab__rab'>, 'rab__udpba', 'rab__recv'
             ) ▶₂ #time__0 )
        case Init__system__ACP__6
        solve( !Const__( 'rab__priv_key_alice', priv_key_alice__30
               ) ▶₃ #time__0 )
          case Const__priv_key_alice
          solve( !Const__( 'rab__nonce_a', new__0 ) ▶₄ #time__0 )
            case Const__nonce_a
            solve( !Const__( 'rab__nonce_a', nonce_a__33 ) ▶₅ #time__0 )
              case Const__nonce_a
              solve( !Eq__( z, ~n ) ▶₆ #time__0 )
                case Equality_gen
                solve( Store( 'rab__key_chan', l__3__21 ) ▶₁ #vr.1 )
                  case Keyprovider__merged_____0_____3__12
                  solve( Store( 'rab__udpab', aenc(<~n, x>, pk(~n.1)) ) ▶₁ #vr.7 )
                    case Alice__merged_____1__0_0_____4__0_1__96
                    SOLVED // trace found
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed



















/*
WARNING: the following wellformedness checks failed!

Unbound variables
=================

  rule `Equality_gen' has unbound variables: 
    x
  
  rule `NEquality_gen' has unbound variables: 
    x, y

Inexistant lemma actions
========================

  lemma `AlwaysStarts__' references action 
    fact "Loop__Back" (arity 2, Linear) 
  but no rule has such an action.
  
  lemma `AlwaysStarts__' references action 
    fact "Loop__Start" (arity 2, Linear) 
  but no rule has such an action.
  
  lemma `AlwaysStartsWhenEnds__' references action 
    fact "Loop__Finish" (arity 2, Linear) 
  but no rule has such an action.
  
  lemma `AlwaysStartsWhenEnds__' references action 
    fact "Loop__Start" (arity 2, Linear) 
  but no rule has such an action.

Derivation Checks
=================

  Derivation checks timed out.
  Use --derivcheck-timeout=INT to configure timeout.
  Set to 0 to deactivate for no timeout.
*/

/*
Generated from:
Tamarin version 1.10.0
Maude version 3.5
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2025-08-17 18:54:16.78386799 UTC
*/

end

==============================================================================
summary of summaries:

analyzed: results/needham_schroeder_nofilesys_unidirectional/tag-transition_post-process/compiled.spthy

  processing time: 2464.65s
  
  WARNING: 7 wellformedness check failed!
           The analysis results might be wrong!
  
  AlwaysStarts__ (all-traces): verified (6 steps)
  AlwaysStartsWhenEnds__ (all-traces): verified (6 steps)
  TransitionOnce__ (all-traces): verified (4168 steps)
  secret_nonce_B_broken_upon_agreement (exists-trace): verified (22 steps)
  secret_nonce_A_broken_upon_agreement (exists-trace): verified (16 steps)
  secret_nonce_B_broken (exists-trace): verified (12 steps)
  secret_nonce_A_broken (exists-trace): verified (6 steps)
  agreement_B (exists-trace): verified (14 steps)
  agreement_A (exists-trace): verified (12 steps)

==============================================================================
