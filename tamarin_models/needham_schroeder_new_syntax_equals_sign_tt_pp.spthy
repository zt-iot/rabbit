theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: true/0, verify/3, snd/1, fst/1, dec/2, sign/2, enc/2, pk/1
equations: verify(sign(loc__1, loc__0), loc__1, pk(loc__0))=true(), dec(enc(loc__1, pk(loc__0)), loc__0)=loc__1, snd(<loc__1, loc__0>)=loc__0, fst(<loc__1, loc__0>)=loc__1

// Initializing the gloval constants and access policy rules:




// Global Constants:


rule Const__nonce_a : [Fr(nonce_a)]--[Init__('rab__Const__nonce_a'), Init__(<'rab__Const__nonce_a', nonce_a>), !Const__('rab__nonce_a', nonce_a)]->[!Const__('rab__nonce_a', nonce_a)] 

rule Const__nonce_b : [Fr(nonce_b)]--[Init__('rab__Const__nonce_b'), Init__(<'rab__Const__nonce_b', nonce_b>), !Const__('rab__nonce_b', nonce_b)]->[!Const__('rab__nonce_b', nonce_b)] 

rule Const__priv_key_alice : [Fr(priv_key_alice)]--[Init__('rab__Const__priv_key_alice'), Init__(<'rab__Const__priv_key_alice', priv_key_alice>), !Const__('rab__priv_key_alice', priv_key_alice)]->[!Const__('rab__priv_key_alice', priv_key_alice)] 

rule Const__priv_key_bob : [Fr(priv_key_bob)]--[Init__('rab__Const__priv_key_bob'), Init__(<'rab__Const__priv_key_bob', priv_key_bob>), !Const__('rab__priv_key_bob', priv_key_bob)]->[!Const__('rab__priv_key_bob', priv_key_bob)] 


// Parametric global Constants:



// Access control:


rule Init__system[role="system"] : []--[Init__('rab__system')]->[State__Alice(<'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__', 'rab__'), State__Bob(<'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__', 'rab__'), !ACP__GEN__('rab__system__', 'rab__rab')] 

rule Init__system__ACP__0[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__0')]->[!ACP__(<'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv')] 

rule Init__system__ACP__1[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__1')]->[!ACP__(<'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__send')] 

rule Init__system__ACP__2[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__2')]->[!ACP__(<'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv')] 

rule Init__system__ACP__3[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__3')]->[!ACP__(<'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__send')] 

// Model:  Alice



rule Alice__merged_____0_____2__1_0__133[role="Alice"] : [State__Alice(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__priv_key_bob', priv_key_bob__0)]--[Transition__(<'rab__Alice', param>, 'rab_____0', %v__)]->[State__Alice(<'rab_____2__1_0', param, %v__>, 'rab__', 'rab__', <'rab____secret__pub_bob', 'rab__'>, 'rab__'), File__Alice(param, 'rab____secret__pub_bob', pk(priv_key_bob__0)), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fclose'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fread'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen')] 

rule Alice__merged_____1_____9__131[role="Alice"] : [State__Alice(<'rab_____1', param, %v__>, return__var__1, 'rab__', 'rab__', 'rab__'), File__Alice(param, loc__0, n__0__3), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen'), !ACP__(<'rab__Alice', param>, 'rab__udp', 'rab__send'), !Const__('rab__nonce_a', nonce_a__31), !Const__('rab__nonce_a', nonce_a__24), !Eq__(n__0__3, n__0__20), Fr(n__0__4)]--[Transition__(<'rab__Alice', param>, 'rab_____1', %v__)]->[State__Alice(<'rab_____9', param, %v__>, 'rab__', 'rab__', <enc(<nonce_a__24, 'rab__Alice'>, n__0__20), n__0__20, n__0__4>, 'rab__'), File__Alice(param, loc__0, n__0__3), Fd__Alice(param, n__0__4, n__0__20), Out(enc(<nonce_a__24, 'rab__Alice'>, n__0__20)), Store('rab__udp', enc(<nonce_a__24, 'rab__Alice'>, n__0__20)), AliceSendNonceA(nonce_a__31)] 

rule Alice__merged_____2__1_0_____9__122[role="Alice"] : [State__Alice(<'rab_____2__1_0', param, %v__>, return__var__11, 'rab__', <l__0__11, l__1__11>, 'rab__'), File__Alice(param, loc__0, n__0__11), In(n__1__11), !ACP__(<'rab__Alice', param>, l__0__11, 'rab__fopen'), !ACP__(<'rab__Alice', param>, l__0__11, 'rab__fopen'), !ACP__(<'rab__Alice', param>, 'rab__udp', 'rab__send'), !Const__('rab__nonce_a', nonce_a__31), !Const__('rab__nonce_a', nonce_a__24), !Eq__(n__1__11, n__0__20), Fr(n__0__12)]--[Transition__(<'rab__Alice', param>, 'rab_____2__1_0', %v__)]->[State__Alice(<'rab_____9', param, %v__>, 'rab__', 'rab__', <enc(<nonce_a__24, 'rab__Alice'>, n__0__20), n__0__20, n__0__12>, 'rab__'), File__Alice(param, loc__0, n__1__11), Fd__Alice(param, n__0__12, n__0__20), Out(enc(<nonce_a__24, 'rab__Alice'>, n__0__20)), Store('rab__udp', enc(<nonce_a__24, 'rab__Alice'>, n__0__20)), AliceSendNonceA(nonce_a__31)] 

rule Alice__merged_____9_____11__1_0__102[role="Alice"] : [State__Alice(<'rab_____9', param, %v__>, return__var__32, 'rab__', <l__0__32, l__1__32, l__2__32>, 'rab__'), !Const__('rab__nonce_a', nonce_a__32)]--[Transition__(<'rab__Alice', param>, 'rab_____9', %v__), AliceSendNonceATag(nonce_a__32)]->[State__Alice(<'rab_____11__1_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', l__0__32, l__1__32, l__2__32>, 'rab__')] 

rule Alice__merged_____9_____11__0_0__101[role="Alice"] : [State__Alice(<'rab_____9', param, %v__>, return__var__32, 'rab__', <l__0__32, l__1__32, l__2__32>, 'rab__'), !Const__('rab__nonce_a', nonce_a__32)]--[Transition__(<'rab__Alice', param>, 'rab_____9', %v__), AliceSendNonceATag(nonce_a__32)]->[State__Alice(<'rab_____11__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', l__0__32, l__1__32, l__2__32>, 'rab__')] 

rule Alice__merged_____11__0_0_____15__0_1__98[role="Alice"] : [State__Alice(<'rab_____11__0_0', param, %v__>, return__var__35, 'rab__', <l__0__35, l__1__35, l__2__35, l__3__35, l__4__35>, 'rab__'), Store(l__0__35, n__0__35), !ACP__(<'rab__Alice', param>, l__0__35, 'rab__recv'), !Const__('rab__priv_key_alice', priv_key_alice__44), !Const__('rab__nonce_a', nonce_a__48), !Const__('rab__nonce_a', nonce_a__47), !Eq__(fst(dec(n__0__35, priv_key_alice__44)), nonce_a__47)]--[Transition__(<'rab__Alice', param>, 'rab_____11__0_0', %v__), SecretNonceAlice(nonce_a__48)]->[State__Alice(<'rab_____15__0_1', param, %v__>, 'rab__', 'rab__', <snd(dec(n__0__35, priv_key_alice__44)), fst(dec(n__0__35, priv_key_alice__44)), dec(n__0__35, priv_key_alice__44), n__0__35, l__2__35, l__3__35, l__4__35>, 'rab__')] 

rule Alice__merged_____11__1_0_____15__0_1__94[role="Alice"] : [State__Alice(<'rab_____11__1_0', param, %v__>, return__var__40, 'rab__', <l__0__40, l__1__40, l__2__40, l__3__40, l__4__40>, 'rab__'), Store(l__0__40, n__0__40), In(n__1__40), !ACP__(<'rab__Alice', param>, l__0__40, 'rab__recv'), !Const__('rab__priv_key_alice', priv_key_alice__44), !Const__('rab__nonce_a', nonce_a__48), !Const__('rab__nonce_a', nonce_a__47), !Eq__(fst(dec(n__1__40, priv_key_alice__44)), nonce_a__47)]--[Transition__(<'rab__Alice', param>, 'rab_____11__1_0', %v__), SecretNonceAlice(nonce_a__48)]->[State__Alice(<'rab_____15__0_1', param, %v__>, 'rab__', 'rab__', <snd(dec(n__1__40, priv_key_alice__44)), fst(dec(n__1__40, priv_key_alice__44)), dec(n__1__40, priv_key_alice__44), n__1__40, l__2__40, l__3__40, l__4__40>, 'rab__')] 

rule Alice__merged_____15__0_1_____15__0_3__0_1__86[role="Alice"] : [State__Alice(<'rab_____15__0_1', param, %v__>, return__var__49, 'rab__', <l__0__49, l__1__49, l__2__49, l__3__49, l__4__49, l__5__49, l__6__49>, 'rab__'), !Const__('rab__nonce_b', nonce_b__49), !ACP__(<'rab__Alice', param>, 'rab__udp', 'rab__send')]--[Transition__(<'rab__Alice', param>, 'rab_____15__0_1', %v__)]->[State__Alice(<'rab_____15__0_3__0_1', param, %v__>, 'rab__', 'rab__', <enc(nonce_b__49, l__5__49), 'rab__udp', enc(nonce_b__49, l__5__49), l__0__49, l__1__49, l__2__49, l__3__49, l__4__49, l__5__49, l__6__49>, 'rab__'), Out(enc(nonce_b__49, l__5__49)), Store('rab__udp', enc(nonce_b__49, l__5__49))] 

rule Alice__merged_____15__0_3__0_1_____25__81[role="Alice"] : [State__Alice(<'rab_____15__0_3__0_1', param, %v__>, return__var__55, 'rab__', <l__0__55, l__1__55, l__2__55, l__3__55, l__4__55, l__5__55, l__6__55, l__7__55, l__8__55, l__9__55>, 'rab__'), Fd__Alice(param, l__9__55, n__0__59)]--[Transition__(<'rab__Alice', param>, 'rab_____15__0_3__0_1', %v__), AliceClose()]->[State__Alice(<'rab_____25', param, %v__>, 'rab__', 'rab__', 'rab__', 'rab__')] 

rule Alice__init_filesys_____0_____1__0[role="Alice"] : [State__Alice(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__priv_key_bob', priv_key_bob__0)]--[Transition__(<'rab__Alice', param>, 'rab_____0', %v__)]->[State__Alice(<'rab_____1', param, %v__>, 'rab__', 'rab__', 'rab__', 'rab__'), File__Alice(param, 'rab____secret__pub_bob', pk(priv_key_bob__0)), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fclose'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fread'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen')] 


// Model:  Bob



rule Bob__merged_____0_____3__0_0__85[role="Bob"] : [State__Bob(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__priv_key_alice', priv_key_alice__0)]--[Transition__(<'rab__Bob', param>, 'rab_____0', %v__), BobOpen()]->[State__Bob(<'rab_____3__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__'>, pk(priv_key_alice__0))] 

rule Bob__merged_____0_____3__1_0__84[role="Bob"] : [State__Bob(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__priv_key_alice', priv_key_alice__0)]--[Transition__(<'rab__Bob', param>, 'rab_____0', %v__), BobOpen()]->[State__Bob(<'rab_____3__1_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__'>, pk(priv_key_alice__0))] 

rule Bob__merged_____3__0_0_____9__79[role="Bob"] : [State__Bob(<'rab_____3__0_0', param, %v__>, return__var__4, 'rab__', <l__0__4, l__1__4>, t__0__4), Store(l__0__4, n__0__4), !ACP__(<'rab__Bob', param>, l__0__4, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__13), !ACP__(<'rab__Bob', param>, 'rab__udp', 'rab__send'), !Const__('rab__nonce_b', nonce_b__21), !Const__('rab__priv_key_alice', priv_key_alice__14), !Const__('rab__nonce_b', nonce_b__14), !Const__('rab__nonce_a', nonce_a__14)]--[Transition__(<'rab__Bob', param>, 'rab_____3__0_0', %v__)]->[State__Bob(<'rab_____9', param, %v__>, 'rab__', 'rab__', <enc(<nonce_a__14, nonce_b__14>, pk(priv_key_alice__14)), fst(dec(n__0__4, priv_key_bob__13)), n__0__4>, t__0__4), Out(enc(<nonce_a__14, nonce_b__14>, pk(priv_key_alice__14))), Store('rab__udp', enc(<nonce_a__14, nonce_b__14>, pk(priv_key_alice__14))), BobSendNonceB(nonce_b__21)] 

rule Bob__merged_____3__1_0_____9__75[role="Bob"] : [State__Bob(<'rab_____3__1_0', param, %v__>, return__var__9, 'rab__', <l__0__9, l__1__9>, t__0__9), Store(l__0__9, n__0__9), In(n__1__9), !ACP__(<'rab__Bob', param>, l__0__9, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__13), !ACP__(<'rab__Bob', param>, 'rab__udp', 'rab__send'), !Const__('rab__nonce_b', nonce_b__21), !Const__('rab__priv_key_alice', priv_key_alice__14), !Const__('rab__nonce_b', nonce_b__14), !Const__('rab__nonce_a', nonce_a__14)]--[Transition__(<'rab__Bob', param>, 'rab_____3__1_0', %v__)]->[State__Bob(<'rab_____9', param, %v__>, 'rab__', 'rab__', <enc(<nonce_a__14, nonce_b__14>, pk(priv_key_alice__14)), fst(dec(n__1__9, priv_key_bob__13)), n__1__9>, t__0__9), Out(enc(<nonce_a__14, nonce_b__14>, pk(priv_key_alice__14))), Store('rab__udp', enc(<nonce_a__14, nonce_b__14>, pk(priv_key_alice__14))), BobSendNonceB(nonce_b__21)] 

rule Bob__merged_____9_____11__1_0__63[role="Bob"] : [State__Bob(<'rab_____9', param, %v__>, return__var__22, 'rab__', <l__0__22, l__1__22, l__2__22>, t__0__22), !Const__('rab__nonce_b', nonce_b__22)]--[Transition__(<'rab__Bob', param>, 'rab_____9', %v__), BobSendNonceBTag(nonce_b__22)]->[State__Bob(<'rab_____11__1_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', l__0__22, l__1__22, l__2__22>, t__0__22)] 

rule Bob__merged_____9_____11__0_0__62[role="Bob"] : [State__Bob(<'rab_____9', param, %v__>, return__var__22, 'rab__', <l__0__22, l__1__22, l__2__22>, t__0__22), !Const__('rab__nonce_b', nonce_b__22)]--[Transition__(<'rab__Bob', param>, 'rab_____9', %v__), BobSendNonceBTag(nonce_b__22)]->[State__Bob(<'rab_____11__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', l__0__22, l__1__22, l__2__22>, t__0__22)] 

rule Bob__merged_____11__0_0_____13__0_1__59[role="Bob"] : [State__Bob(<'rab_____11__0_0', param, %v__>, return__var__25, 'rab__', <l__0__25, l__1__25, l__2__25, l__3__25, l__4__25>, t__0__25), Store(l__0__25, n__0__25), !ACP__(<'rab__Bob', param>, l__0__25, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__34), !Const__('rab__nonce_b', nonce_b__36), !Const__('rab__nonce_b', nonce_b__35), !Eq__(dec(n__0__25, priv_key_bob__34), nonce_b__35)]--[Transition__(<'rab__Bob', param>, 'rab_____11__0_0', %v__), SecretNonceBob(nonce_b__36)]->[State__Bob(<'rab_____13__0_1', param, %v__>, 'rab__', 'rab__', <dec(n__0__25, priv_key_bob__34), n__0__25, l__2__25, l__3__25, l__4__25>, t__0__25)] 

rule Bob__merged_____11__1_0_____13__0_1__55[role="Bob"] : [State__Bob(<'rab_____11__1_0', param, %v__>, return__var__30, 'rab__', <l__0__30, l__1__30, l__2__30, l__3__30, l__4__30>, t__0__30), Store(l__0__30, n__0__30), In(n__1__30), !ACP__(<'rab__Bob', param>, l__0__30, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__34), !Const__('rab__nonce_b', nonce_b__36), !Const__('rab__nonce_b', nonce_b__35), !Eq__(dec(n__1__30, priv_key_bob__34), nonce_b__35)]--[Transition__(<'rab__Bob', param>, 'rab_____11__1_0', %v__), SecretNonceBob(nonce_b__36)]->[State__Bob(<'rab_____13__0_1', param, %v__>, 'rab__', 'rab__', <dec(n__1__30, priv_key_bob__34), n__1__30, l__2__30, l__3__30, l__4__30>, t__0__30)] 

rule Bob__merged_____13__0_1_____20__49[role="Bob"] : [State__Bob(<'rab_____13__0_1', param, %v__>, return__var__37, 'rab__', <l__0__37, l__1__37, l__2__37, l__3__37, l__4__37>, t__0__37)]--[Transition__(<'rab__Bob', param>, 'rab_____13__0_1', %v__), BobClose()]->[State__Bob(<'rab_____20', param, %v__>, 'rab__', 'rab__', 'rab__', t__0__37)] 

restriction Init__ : " All x #i #j . Init__(x) @ #i & Init__(x) @ #j ==> #i = #j "
rule Equality_gen: [] --> [!Eq__(x,x)]
rule NEquality_gen: [] --[NEq___(x,y)]-> [!NEq__(x,y)]
restriction NEquality_rule: "All x #i. NEq___(x,x) @ #i ==> F"
lemma AlwaysStarts__[reuse,use_induction]:

      "All x p #i. Loop__Back(x, p) @i ==> Ex #j. Loop__Start(x, p) @j & j < i"
lemma AlwaysStartsWhenEnds__[reuse,use_induction]:

      "All x p #i. Loop__Finish(x, p) @i ==> Ex #j. Loop__Start(x, p) @j & j < i"
lemma TransitionOnce__[reuse,use_induction]:

      "All x p %i #j #k . Transition__(x, p, %i) @#j &
        Transition__(x, p, %i) @ #k ==> #j = #k"

lemma NonceSecrecyB_tmrn : all-traces "not(Ex nb #i #j . SecretNonceBob(nb) @ i & K(nb) @ j)"
lemma NonceSecrecyA_tmrn : all-traces "not(Ex na #i #j . SecretNonceAlice(na) @ i & K(na) @ j)"
lemma NonceSecrecyB : all-traces "All nb #j . SecretNonceBob(nb) @ #j ==> not(Ex #m . K(nb) @ #m)"
lemma NonceSecrecyA : all-traces "All na #i . SecretNonceAlice(na) @ i ==> not(Ex #l . K(na) @ l)"
lemma SecrecyCanBeEstablishedB_tmrn : exists-trace "Ex nb #j . SecretNonceBob(nb) @ j"
lemma SecrecyCanBeEstablishedB : exists-trace "Ex nonce_b #time__0 #label_time__0 . !Const__('rab__nonce_b', nonce_b)@#label_time__0 & SecretNonceBob(nonce_b)@#time__0 "
lemma SecrecyCanBeEstablishedA_tmrn : exists-trace "Ex na #i  . SecretNonceAlice(na) @ i"
lemma SecrecyCanBeEstablishedA : exists-trace "Ex nonce_a #time__0 #label_time__0 . !Const__('rab__nonce_a', nonce_a)@#label_time__0 & SecretNonceAlice(nonce_a)@#time__0 "
lemma NonceBIsSent_tmrn : exists-trace "Ex nb #j . BobSendNonceBTag(nb) @ j"
lemma NonceBIsSent : exists-trace "Ex nonce_b #time__0 #label_time__0 . !Const__('rab__nonce_b', nonce_b)@#label_time__0 & BobSendNonceBTag(nonce_b)@#time__0 "
lemma NonceAIsSent_tmrn : exists-trace "Ex na #i . AliceSendNonceATag(na) @ i"
lemma NonceAIsSent : exists-trace "Ex nonce_a #time__0 #label_time__0 . !Const__('rab__nonce_a', nonce_a)@#label_time__0 & AliceSendNonceATag(nonce_a)@#time__0 "
lemma BobOpenReachable_tmrn : exists-trace "Ex #i . BobOpen() @ #i "
lemma BobOpenReachable : exists-trace "Ex  #time__0 . BobOpen()@#time__0 "
lemma tautology : all-traces "All #j  . BobClose() @ #j ==> BobClose() @ #j"
end

