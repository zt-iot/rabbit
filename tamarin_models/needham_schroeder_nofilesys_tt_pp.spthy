theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: true/0, verify/3, snd/1, fst/1, dec/2, sign/2, enc/2, pk/1
equations: verify(sign(loc__1, loc__0), loc__1, pk(loc__0))=true(), dec(enc(loc__1, pk(loc__0)), loc__0)=loc__1, snd(<loc__1, loc__0>)=loc__0, fst(<loc__1, loc__0>)=loc__1

// Initializing the gloval constants and access policy rules:




// Global Constants:


rule Const__nonce_a : [Fr(nonce_a)]--[Init__('rab__Const__nonce_a'), Init__(<'rab__Const__nonce_a', nonce_a>), !Const__('rab__nonce_a', nonce_a)]->[!Const__('rab__nonce_a', nonce_a)] 

rule Const__nonce_b : [Fr(nonce_b)]--[Init__('rab__Const__nonce_b'), Init__(<'rab__Const__nonce_b', nonce_b>), !Const__('rab__nonce_b', nonce_b)]->[!Const__('rab__nonce_b', nonce_b)] 

rule Const__priv_key_alice : [Fr(priv_key_alice)]--[Init__('rab__Const__priv_key_alice'), Init__(<'rab__Const__priv_key_alice', priv_key_alice>), !Const__('rab__priv_key_alice', priv_key_alice)]->[!Const__('rab__priv_key_alice', priv_key_alice)] 

rule Const__priv_key_bob : [Fr(priv_key_bob)]--[Init__('rab__Const__priv_key_bob'), Init__(<'rab__Const__priv_key_bob', priv_key_bob>), !Const__('rab__priv_key_bob', priv_key_bob)]->[!Const__('rab__priv_key_bob', priv_key_bob)] 


// Parametric global Constants:



// Access control:


rule Init__system[role="system"] : []--[Init__('rab__system')]->[State__Keyprovider(<'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__', 'rab__'), State__Alice(<'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__', 'rab__'), State__Bob(<'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__', 'rab__'), !ACP__GEN__('rab__system__', 'rab__rab')] 

rule Init__system__ACP__0[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__0')]->[!ACP__(<'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv')] 

rule Init__system__ACP__1[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__1')]->[!ACP__(<'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__send')] 

rule Init__system__ACP__2[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__2')]->[!ACP__(<'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv')] 

rule Init__system__ACP__3[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__3')]->[!ACP__(<'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__send')] 

rule Init__system__ACP__4[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__4')]->[!ACP__(<'rab__Alice', 'rab__rab'>, 'rab__key_chan', 'rab__recv')] 

rule Init__system__ACP__5[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__5')]->[!ACP__(<'rab__Alice', 'rab__rab'>, 'rab__key_chan', 'rab__send')] 

rule Init__system__ACP__6[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__6')]->[!ACP__(<'rab__Keyprovider', 'rab__rab'>, 'rab__key_chan', 'rab__recv')] 

rule Init__system__ACP__7[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__7')]->[!ACP__(<'rab__Keyprovider', 'rab__rab'>, 'rab__key_chan', 'rab__send')] 

// Model:  Keyprovider



rule Keyprovider__merged_____0_____2__6[role="Keyprovider"] : [State__Keyprovider(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__priv_key_bob', priv_key_bob__0), !ACP__(<'rab__Keyprovider', param>, 'rab__key_chan', 'rab__send')]--[Transition__(<'rab__Keyprovider', param>, 'rab_____0', %v__)]->[State__Keyprovider(<'rab_____2', param, %v__>, 'rab__', 'rab__', 'rab__', pk(priv_key_bob__0)), Store('rab__key_chan', pk(priv_key_bob__0))] 


// Model:  Alice



rule Alice__merged_____0_____1__0_0__99[role="Alice"] : [State__Alice(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__')]--[Transition__(<'rab__Alice', param>, 'rab_____0', %v__)]->[State__Alice(<'rab_____1__0_0', param, %v__>, 'rab__', 'rab__', <'rab__key_chan', 'rab__'>, 'rab__')] 

rule Alice__merged_____0_____1__1_0__98[role="Alice"] : [State__Alice(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__')]--[Transition__(<'rab__Alice', param>, 'rab_____0', %v__)]->[State__Alice(<'rab_____1__1_0', param, %v__>, 'rab__', 'rab__', <'rab__key_chan', 'rab__'>, 'rab__')] 

rule Alice__merged_____1__0_0_____6__97[role="Alice"] : [State__Alice(<'rab_____1__0_0', param, %v__>, return__var__2, 'rab__', <l__0__2, l__1__2>, 'rab__'), Store(l__0__2, n__0__2), !ACP__(<'rab__Alice', param>, l__0__2, 'rab__recv'), !Const__('rab__nonce_a', nonce_a__11), !Const__('rab__nonce_a', nonce_a__18), !ACP__(<'rab__Alice', param>, 'rab__udp', 'rab__send')]--[Transition__(<'rab__Alice', param>, 'rab_____1__0_0', %v__)]->[State__Alice(<'rab_____6', param, %v__>, 'rab__', 'rab__', <enc(<nonce_a__11, 'rab__Alice'>, n__0__2), n__0__2>, 'rab__'), Out(enc(<nonce_a__11, 'rab__Alice'>, n__0__2)), Store('rab__udp', enc(<nonce_a__11, 'rab__Alice'>, n__0__2)), AliceSendNonceA(nonce_a__18)] 

rule Alice__merged_____1__1_0_____6__93[role="Alice"] : [State__Alice(<'rab_____1__1_0', param, %v__>, return__var__7, 'rab__', <l__0__7, l__1__7>, 'rab__'), Store(l__0__7, n__0__7), In(n__1__7), !ACP__(<'rab__Alice', param>, l__0__7, 'rab__recv'), !Const__('rab__nonce_a', nonce_a__11), !Const__('rab__nonce_a', nonce_a__18), !ACP__(<'rab__Alice', param>, 'rab__udp', 'rab__send')]--[Transition__(<'rab__Alice', param>, 'rab_____1__1_0', %v__)]->[State__Alice(<'rab_____6', param, %v__>, 'rab__', 'rab__', <enc(<nonce_a__11, 'rab__Alice'>, n__1__7), n__1__7>, 'rab__'), Out(enc(<nonce_a__11, 'rab__Alice'>, n__1__7)), Store('rab__udp', enc(<nonce_a__11, 'rab__Alice'>, n__1__7)), AliceSendNonceA(nonce_a__18)] 

rule Alice__merged_____6_____8__1_0__82[role="Alice"] : [State__Alice(<'rab_____6', param, %v__>, return__var__19, 'rab__', <l__0__19, l__1__19>, 'rab__'), !Const__('rab__nonce_a', nonce_a__19)]--[Transition__(<'rab__Alice', param>, 'rab_____6', %v__), AliceSendNonceATag(nonce_a__19)]->[State__Alice(<'rab_____8__1_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', l__0__19, l__1__19>, 'rab__')] 

rule Alice__merged_____6_____8__0_0__81[role="Alice"] : [State__Alice(<'rab_____6', param, %v__>, return__var__19, 'rab__', <l__0__19, l__1__19>, 'rab__'), !Const__('rab__nonce_a', nonce_a__19)]--[Transition__(<'rab__Alice', param>, 'rab_____6', %v__), AliceSendNonceATag(nonce_a__19)]->[State__Alice(<'rab_____8__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', l__0__19, l__1__19>, 'rab__')] 

rule Alice__merged_____8__0_0_____12__0_1__78[role="Alice"] : [State__Alice(<'rab_____8__0_0', param, %v__>, return__var__22, 'rab__', <l__0__22, l__1__22, l__2__22, l__3__22>, 'rab__'), Store(l__0__22, n__0__22), !ACP__(<'rab__Alice', param>, l__0__22, 'rab__recv'), !Const__('rab__priv_key_alice', priv_key_alice__31), !Const__('rab__nonce_a', nonce_a__35), !Const__('rab__nonce_a', nonce_a__34), !Eq__(fst(dec(n__0__22, priv_key_alice__31)), nonce_a__34)]--[Transition__(<'rab__Alice', param>, 'rab_____8__0_0', %v__), SecretNonceAlice(nonce_a__35)]->[State__Alice(<'rab_____12__0_1', param, %v__>, 'rab__', 'rab__', <snd(dec(n__0__22, priv_key_alice__31)), fst(dec(n__0__22, priv_key_alice__31)), dec(n__0__22, priv_key_alice__31), n__0__22, l__2__22, l__3__22>, 'rab__')] 

rule Alice__merged_____8__1_0_____12__0_1__74[role="Alice"] : [State__Alice(<'rab_____8__1_0', param, %v__>, return__var__27, 'rab__', <l__0__27, l__1__27, l__2__27, l__3__27>, 'rab__'), Store(l__0__27, n__0__27), In(n__1__27), !ACP__(<'rab__Alice', param>, l__0__27, 'rab__recv'), !Const__('rab__priv_key_alice', priv_key_alice__31), !Const__('rab__nonce_a', nonce_a__35), !Const__('rab__nonce_a', nonce_a__34), !Eq__(fst(dec(n__1__27, priv_key_alice__31)), nonce_a__34)]--[Transition__(<'rab__Alice', param>, 'rab_____8__1_0', %v__), SecretNonceAlice(nonce_a__35)]->[State__Alice(<'rab_____12__0_1', param, %v__>, 'rab__', 'rab__', <snd(dec(n__1__27, priv_key_alice__31)), fst(dec(n__1__27, priv_key_alice__31)), dec(n__1__27, priv_key_alice__31), n__1__27, l__2__27, l__3__27>, 'rab__')] 

rule Alice__merged_____12__0_1_____12__0_3__0_1__66[role="Alice"] : [State__Alice(<'rab_____12__0_1', param, %v__>, return__var__36, 'rab__', <l__0__36, l__1__36, l__2__36, l__3__36, l__4__36, l__5__36>, 'rab__'), !ACP__(<'rab__Alice', param>, 'rab__udp', 'rab__send')]--[Transition__(<'rab__Alice', param>, 'rab_____12__0_1', %v__)]->[State__Alice(<'rab_____12__0_3__0_1', param, %v__>, 'rab__', 'rab__', <enc(l__0__36, l__5__36), 'rab__udp', enc(l__0__36, l__5__36), l__0__36, l__1__36, l__2__36, l__3__36, l__4__36, l__5__36>, 'rab__'), Out(enc(l__0__36, l__5__36)), Store('rab__udp', enc(l__0__36, l__5__36))] 

rule Alice__merged_____12__0_3__0_1_____12__0_5__61[role="Alice"] : [State__Alice(<'rab_____12__0_3__0_1', param, %v__>, return__var__42, 'rab__', <l__0__42, l__1__42, l__2__42, l__3__42, l__4__42, l__5__42, l__6__42, l__7__42, l__8__42>, 'rab__')]--[Transition__(<'rab__Alice', param>, 'rab_____12__0_3__0_1', %v__), AliceSendNonceBTag(l__3__42)]->[State__Alice(<'rab_____12__0_5', param, %v__>, 'rab__', 'rab__', <l__2__42, l__3__42, l__4__42, l__5__42, l__6__42, l__7__42, l__8__42>, 'rab__')] 

rule Alice__merged_____12__0_5_____20__60[role="Alice"] : [State__Alice(<'rab_____12__0_5', param, %v__>, return__var__44, 'rab__', <l__0__44, l__1__44, l__2__44, l__3__44, l__4__44, l__5__44, l__6__44>, 'rab__')]--[Transition__(<'rab__Alice', param>, 'rab_____12__0_5', %v__), AliceClose()]->[State__Alice(<'rab_____20', param, %v__>, 'rab__', 'rab__', 'rab__', 'rab__')] 


// Model:  Bob



rule Bob__merged_____0_____2__1_0__82[role="Bob"] : [State__Bob(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__')]--[Transition__(<'rab__Bob', param>, 'rab_____0', %v__), BobOpen()]->[State__Bob(<'rab_____2__1_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__'>, 'rab__')] 

rule Bob__merged_____0_____2__0_0__81[role="Bob"] : [State__Bob(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__')]--[Transition__(<'rab__Bob', param>, 'rab_____0', %v__), BobOpen()]->[State__Bob(<'rab_____2__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__'>, 'rab__')] 

rule Bob__merged_____2__0_0_____8__78[role="Bob"] : [State__Bob(<'rab_____2__0_0', param, %v__>, return__var__3, 'rab__', <l__0__3, l__1__3>, 'rab__'), Store(l__0__3, n__0__3), !ACP__(<'rab__Bob', param>, l__0__3, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__12), !ACP__(<'rab__Bob', param>, 'rab__udp', 'rab__send'), !Const__('rab__nonce_b', nonce_b__20), !Const__('rab__priv_key_alice', priv_key_alice__13), !Const__('rab__nonce_b', nonce_b__13)]--[Transition__(<'rab__Bob', param>, 'rab_____2__0_0', %v__)]->[State__Bob(<'rab_____8', param, %v__>, 'rab__', 'rab__', <enc(<fst(dec(n__0__3, priv_key_bob__12)), nonce_b__13>, pk(priv_key_alice__13)), fst(dec(n__0__3, priv_key_bob__12)), n__0__3>, 'rab__'), Out(enc(<fst(dec(n__0__3, priv_key_bob__12)), nonce_b__13>, pk(priv_key_alice__13))), Store('rab__udp', enc(<fst(dec(n__0__3, priv_key_bob__12)), nonce_b__13>, pk(priv_key_alice__13))), BobSendNonceB(nonce_b__20)] 

rule Bob__merged_____2__1_0_____8__74[role="Bob"] : [State__Bob(<'rab_____2__1_0', param, %v__>, return__var__8, 'rab__', <l__0__8, l__1__8>, 'rab__'), Store(l__0__8, n__0__8), In(n__1__8), !ACP__(<'rab__Bob', param>, l__0__8, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__12), !ACP__(<'rab__Bob', param>, 'rab__udp', 'rab__send'), !Const__('rab__nonce_b', nonce_b__20), !Const__('rab__priv_key_alice', priv_key_alice__13), !Const__('rab__nonce_b', nonce_b__13)]--[Transition__(<'rab__Bob', param>, 'rab_____2__1_0', %v__)]->[State__Bob(<'rab_____8', param, %v__>, 'rab__', 'rab__', <enc(<fst(dec(n__1__8, priv_key_bob__12)), nonce_b__13>, pk(priv_key_alice__13)), fst(dec(n__1__8, priv_key_bob__12)), n__1__8>, 'rab__'), Out(enc(<fst(dec(n__1__8, priv_key_bob__12)), nonce_b__13>, pk(priv_key_alice__13))), Store('rab__udp', enc(<fst(dec(n__1__8, priv_key_bob__12)), nonce_b__13>, pk(priv_key_alice__13))), BobSendNonceB(nonce_b__20)] 

rule Bob__merged_____8_____10__1_0__62[role="Bob"] : [State__Bob(<'rab_____8', param, %v__>, return__var__21, 'rab__', <l__0__21, l__1__21, l__2__21>, 'rab__'), !Const__('rab__nonce_b', nonce_b__21)]--[Transition__(<'rab__Bob', param>, 'rab_____8', %v__), BobSendNonceBTag(nonce_b__21)]->[State__Bob(<'rab_____10__1_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', l__0__21, l__1__21, l__2__21>, 'rab__')] 

rule Bob__merged_____8_____10__0_0__61[role="Bob"] : [State__Bob(<'rab_____8', param, %v__>, return__var__21, 'rab__', <l__0__21, l__1__21, l__2__21>, 'rab__'), !Const__('rab__nonce_b', nonce_b__21)]--[Transition__(<'rab__Bob', param>, 'rab_____8', %v__), BobSendNonceBTag(nonce_b__21)]->[State__Bob(<'rab_____10__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', l__0__21, l__1__21, l__2__21>, 'rab__')] 

rule Bob__merged_____10__0_0_____12__0_1__58[role="Bob"] : [State__Bob(<'rab_____10__0_0', param, %v__>, return__var__24, 'rab__', <l__0__24, l__1__24, l__2__24, l__3__24, l__4__24>, 'rab__'), Store(l__0__24, n__0__24), !ACP__(<'rab__Bob', param>, l__0__24, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__33), !Const__('rab__nonce_b', nonce_b__35), !Const__('rab__nonce_b', nonce_b__34), !Eq__(dec(n__0__24, priv_key_bob__33), nonce_b__34)]--[Transition__(<'rab__Bob', param>, 'rab_____10__0_0', %v__), SecretNonceBob(nonce_b__35)]->[State__Bob(<'rab_____12__0_1', param, %v__>, 'rab__', 'rab__', <dec(n__0__24, priv_key_bob__33), n__0__24, l__2__24, l__3__24, l__4__24>, 'rab__')] 

rule Bob__merged_____10__1_0_____12__0_1__54[role="Bob"] : [State__Bob(<'rab_____10__1_0', param, %v__>, return__var__29, 'rab__', <l__0__29, l__1__29, l__2__29, l__3__29, l__4__29>, 'rab__'), Store(l__0__29, n__0__29), In(n__1__29), !ACP__(<'rab__Bob', param>, l__0__29, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__33), !Const__('rab__nonce_b', nonce_b__35), !Const__('rab__nonce_b', nonce_b__34), !Eq__(dec(n__1__29, priv_key_bob__33), nonce_b__34)]--[Transition__(<'rab__Bob', param>, 'rab_____10__1_0', %v__), SecretNonceBob(nonce_b__35)]->[State__Bob(<'rab_____12__0_1', param, %v__>, 'rab__', 'rab__', <dec(n__1__29, priv_key_bob__33), n__1__29, l__2__29, l__3__29, l__4__29>, 'rab__')] 

rule Bob__merged_____12__0_1_____19__48[role="Bob"] : [State__Bob(<'rab_____12__0_1', param, %v__>, return__var__36, 'rab__', <l__0__36, l__1__36, l__2__36, l__3__36, l__4__36>, 'rab__')]--[Transition__(<'rab__Bob', param>, 'rab_____12__0_1', %v__), BobClose()]->[State__Bob(<'rab_____19', param, %v__>, 'rab__', 'rab__', 'rab__', 'rab__')] 

restriction Init__ : " All x #i #j . Init__(x) @ #i & Init__(x) @ #j ==> #i = #j "
rule Equality_gen: [] --> [!Eq__(x,x)]
rule NEquality_gen: [] --[NEq___(x,y)]-> [!NEq__(x,y)]
restriction NEquality_rule: "All x #i. NEq___(x,x) @ #i ==> F"
lemma AlwaysStarts__[reuse,use_induction]:

      "All x p #i. Loop__Back(x, p) @i ==> Ex #j. Loop__Start(x, p) @j & j < i"
lemma AlwaysStartsWhenEnds__[reuse,use_induction]:

      "All x p #i. Loop__Finish(x, p) @i ==> Ex #j. Loop__Start(x, p) @j & j < i"
lemma TransitionOnce__[reuse,use_induction]:

      "All x p %i #j #k . Transition__(x, p, %i) @#j &
        Transition__(x, p, %i) @ #k ==> #j = #k"

lemma SecrecyCanBeEstablishedB_tmrn : exists-trace "Ex nb #j . SecretNonceBob(nb) @ j"
lemma SecrecyCanBeEstablishedA_tmrn : exists-trace "Ex na #i  . SecretNonceAlice(na) @ i"
lemma NonceBIsSent_tmrn : exists-trace "Ex nb #j . BobSendNonceBTag(nb) @ j"
lemma NonceAIsSent_tmrn : exists-trace "Ex na #i . AliceSendNonceATag(na) @ i"
lemma BobOpenReachable_tmrn : exists-trace "Ex #i . BobOpen() @ #i "
lemma NonceSecrecyB_alt : all-traces "not(Ex nb #i #j . SecretNonceBob(nb) @ i & K(nb) @ j)"
lemma NonceSecrecyA_alt : all-traces "not(Ex na #i #j . SecretNonceAlice(na) @ i & K(na) @ j)"
lemma NonceSecrecyB : all-traces "All nb #i . SecretNonceBob(nb) @ i ==> not(Ex #m . K(nb) @ m)"
lemma NonceSecrecyA : all-traces "All na #i . SecretNonceAlice(na) @ i ==> not(Ex #l . K(na) @ l)"
end

