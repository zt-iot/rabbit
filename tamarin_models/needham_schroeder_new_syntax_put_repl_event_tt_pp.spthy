theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: true/0, verify/3, snd/1, fst/1, dec/2, sign/2, enc/2, pk/1
equations: verify(sign(loc__1, loc__0), loc__1, pk(loc__0))=true(), dec(enc(loc__1, loc__0), loc__0)=loc__1, snd(<loc__1, loc__0>)=loc__0, fst(<loc__1, loc__0>)=loc__1

// Initializing the gloval constants and access policy rules:




// Global Constants:


rule Const__nonce_a : [Fr(nonce_a)]--[Init__('rab__Const__nonce_a'), Init__(<'rab__Const__nonce_a', nonce_a>), !Const__('rab__nonce_a', nonce_a)]->[!Const__('rab__nonce_a', nonce_a)] 

rule Const__nonce_b : [Fr(nonce_b)]--[Init__('rab__Const__nonce_b'), Init__(<'rab__Const__nonce_b', nonce_b>), !Const__('rab__nonce_b', nonce_b)]->[!Const__('rab__nonce_b', nonce_b)] 

rule Const__priv_key_alice : [Fr(priv_key_alice)]--[Init__('rab__Const__priv_key_alice'), Init__(<'rab__Const__priv_key_alice', priv_key_alice>), !Const__('rab__priv_key_alice', priv_key_alice)]->[!Const__('rab__priv_key_alice', priv_key_alice)] 

rule Const__priv_key_bob : [Fr(priv_key_bob)]--[Init__('rab__Const__priv_key_bob'), Init__(<'rab__Const__priv_key_bob', priv_key_bob>), !Const__('rab__priv_key_bob', priv_key_bob)]->[!Const__('rab__priv_key_bob', priv_key_bob)] 


// Parametric global Constants:



// Access control:


rule Init__system[role="system"] : []--[Init__('rab__system')]->[State__Alice(<'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__', 'rab__'), State__Bob(<'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__', 'rab__'), !ACP__GEN__('rab__system__', 'rab__rab')] 

rule Init__system__ACP__0[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__0')]->[!ACP__(<'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv')] 

rule Init__system__ACP__1[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__1')]->[!ACP__(<'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__send')] 

rule Init__system__ACP__2[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__2')]->[!ACP__(<'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv')] 

rule Init__system__ACP__3[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__3')]->[!ACP__(<'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__send')] 

// Model:  Alice



rule Alice__merged_____0_____2__1_0__142[role="Alice"] : [State__Alice(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__priv_key_bob', priv_key_bob__0)]--[Transition__(<'rab__Alice', param>, 'rab_____0', %v__)]->[State__Alice(<'rab_____2__1_0', param, %v__>, 'rab__', 'rab__', <'rab____secret__pub_bob', 'rab__'>, 'rab__'), File__Alice(param, 'rab____secret__pub_bob', pk(priv_key_bob__0)), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fclose'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fread'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen')] 

rule Alice__merged_____1_____3__140[role="Alice"] : [State__Alice(<'rab_____1', param, %v__>, return__var__1, 'rab__', 'rab__', 'rab__'), File__Alice(param, loc__0, n__0__3), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen'), Fr(n__0__4)]--[Transition__(<'rab__Alice', param>, 'rab_____1', %v__)]->[State__Alice(<'rab_____3', param, %v__>, 'rab__', 'rab__', n__0__4, 'rab__'), Fd__Alice(param, n__0__4, n__0__3), File__Alice(param, loc__0, n__0__3)] 

rule Alice__merged_____2__1_0_____3__132[role="Alice"] : [State__Alice(<'rab_____2__1_0', param, %v__>, return__var__11, 'rab__', <l__0__11, l__1__11>, 'rab__'), File__Alice(param, loc__0, n__0__11), In(n__1__11), !ACP__(<'rab__Alice', param>, l__0__11, 'rab__fopen'), !ACP__(<'rab__Alice', param>, l__0__11, 'rab__fopen'), Fr(n__0__12)]--[Transition__(<'rab__Alice', param>, 'rab_____2__1_0', %v__)]->[State__Alice(<'rab_____3', param, %v__>, 'rab__', 'rab__', n__0__12, 'rab__'), Fd__Alice(param, n__0__12, n__1__11), File__Alice(param, loc__0, n__1__11)] 

rule Alice__merged_____3_____10__0_0__126[role="Alice"] : [State__Alice(<'rab_____3', param, %v__>, return__var__18, 'rab__', l__0__18, 'rab__'), Fd__Alice(param, l__0__18, n__0__20), !Const__('rab__nonce_a', nonce_a__24), !Const__('rab__nonce_a', nonce_a__31), !ACP__(<'rab__Alice', param>, 'rab__udp', 'rab__send')]--[Transition__(<'rab__Alice', param>, 'rab_____3', %v__)]->[State__Alice(<'rab_____10__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', enc(<nonce_a__24, 'rab__Alice'>, n__0__20), n__0__20, l__0__18>, 'rab__'), Fd__Alice(param, l__0__18, n__0__20), Out(enc(<nonce_a__24, 'rab__Alice'>, n__0__20)), Store('rab__udp', enc(<nonce_a__24, 'rab__Alice'>, n__0__20)), AliceSendNonceA(nonce_a__31)] 

rule Alice__merged_____3_____10__1_0__125[role="Alice"] : [State__Alice(<'rab_____3', param, %v__>, return__var__18, 'rab__', l__0__18, 'rab__'), Fd__Alice(param, l__0__18, n__0__20), !Const__('rab__nonce_a', nonce_a__24), !Const__('rab__nonce_a', nonce_a__31), !ACP__(<'rab__Alice', param>, 'rab__udp', 'rab__send')]--[Transition__(<'rab__Alice', param>, 'rab_____3', %v__)]->[State__Alice(<'rab_____10__1_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', enc(<nonce_a__24, 'rab__Alice'>, n__0__20), n__0__20, l__0__18>, 'rab__'), Fd__Alice(param, l__0__18, n__0__20), Out(enc(<nonce_a__24, 'rab__Alice'>, n__0__20)), Store('rab__udp', enc(<nonce_a__24, 'rab__Alice'>, n__0__20)), AliceSendNonceA(nonce_a__31)] 

rule Alice__merged_____10__0_0_____14__96[role="Alice"] : [State__Alice(<'rab_____10__0_0', param, %v__>, return__var__34, 'rab__', <l__0__34, l__1__34, l__2__34, l__3__34, l__4__34>, 'rab__'), Store(l__0__34, n__0__34), !ACP__(<'rab__Alice', param>, l__0__34, 'rab__recv'), !Const__('rab__priv_key_alice', priv_key_alice__43)]--[Transition__(<'rab__Alice', param>, 'rab_____10__0_0', %v__)]->[State__Alice(<'rab_____14', param, %v__>, 'rab__', 'rab__', <snd(dec(n__0__34, priv_key_alice__43)), fst(dec(n__0__34, priv_key_alice__43)), dec(n__0__34, priv_key_alice__43), n__0__34, l__2__34, l__3__34, l__4__34>, 'rab__')] 

rule Alice__merged_____10__1_0_____14__92[role="Alice"] : [State__Alice(<'rab_____10__1_0', param, %v__>, return__var__39, 'rab__', <l__0__39, l__1__39, l__2__39, l__3__39, l__4__39>, 'rab__'), Store(l__0__39, n__0__39), In(n__1__39), !ACP__(<'rab__Alice', param>, l__0__39, 'rab__recv'), !Const__('rab__priv_key_alice', priv_key_alice__43)]--[Transition__(<'rab__Alice', param>, 'rab_____10__1_0', %v__)]->[State__Alice(<'rab_____14', param, %v__>, 'rab__', 'rab__', <snd(dec(n__1__39, priv_key_alice__43)), fst(dec(n__1__39, priv_key_alice__43)), dec(n__1__39, priv_key_alice__43), n__1__39, l__2__39, l__3__39, l__4__39>, 'rab__')] 

rule Alice__merged_____14_____14__0_1__86[role="Alice"] : [State__Alice(<'rab_____14', param, %v__>, return__var__46, 'rab__', <l__0__46, l__1__46, l__2__46, l__3__46, l__4__46, l__5__46, l__6__46>, 'rab__'), AliceSendNonceA(nonce_a__46), !Const__('rab__nonce_a', nonce_a__46), !Const__('rab__nonce_a', nonce_a__47)]--[Transition__(<'rab__Alice', param>, 'rab_____14', %v__), SecretNonceAlice(nonce_a__47)]->[State__Alice(<'rab_____14__0_1', param, %v__>, 'rab__', 'rab__', <l__0__46, l__1__46, l__2__46, l__3__46, l__4__46, l__5__46, l__6__46>, 'rab__')] 

rule Alice__merged_____14__0_1_____14__0_3__0_1__85[role="Alice"] : [State__Alice(<'rab_____14__0_1', param, %v__>, return__var__48, 'rab__', <l__0__48, l__1__48, l__2__48, l__3__48, l__4__48, l__5__48, l__6__48>, 'rab__'), !Const__('rab__nonce_b', nonce_b__48), !ACP__(<'rab__Alice', param>, 'rab__udp', 'rab__send')]--[Transition__(<'rab__Alice', param>, 'rab_____14__0_1', %v__)]->[State__Alice(<'rab_____14__0_3__0_1', param, %v__>, 'rab__', 'rab__', <enc(nonce_b__48, l__5__48), 'rab__udp', enc(nonce_b__48, l__5__48), l__0__48, l__1__48, l__2__48, l__3__48, l__4__48, l__5__48, l__6__48>, 'rab__'), Out(enc(nonce_b__48, l__5__48)), Store('rab__udp', enc(nonce_b__48, l__5__48))] 

rule Alice__merged_____14__0_3__0_1_____24__80[role="Alice"] : [State__Alice(<'rab_____14__0_3__0_1', param, %v__>, return__var__54, 'rab__', <l__0__54, l__1__54, l__2__54, l__3__54, l__4__54, l__5__54, l__6__54, l__7__54, l__8__54, l__9__54>, 'rab__'), Fd__Alice(param, l__9__54, n__0__58)]--[Transition__(<'rab__Alice', param>, 'rab_____14__0_3__0_1', %v__), AliceClose()]->[State__Alice(<'rab_____24', param, %v__>, 'rab__', 'rab__', 'rab__', 'rab__')] 

rule Alice__init_filesys_____0_____1__0[role="Alice"] : [State__Alice(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__priv_key_bob', priv_key_bob__0)]--[Transition__(<'rab__Alice', param>, 'rab_____0', %v__)]->[State__Alice(<'rab_____1', param, %v__>, 'rab__', 'rab__', 'rab__', 'rab__'), File__Alice(param, 'rab____secret__pub_bob', pk(priv_key_bob__0)), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fclose'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fread'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen')] 


// Model:  Bob



rule Bob__merged_____0_____3__0_0__89[role="Bob"] : [State__Bob(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__priv_key_alice', priv_key_alice__0)]--[Transition__(<'rab__Bob', param>, 'rab_____0', %v__), BobOpen()]->[State__Bob(<'rab_____3__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__'>, pk(priv_key_alice__0))] 

rule Bob__merged_____0_____3__1_0__88[role="Bob"] : [State__Bob(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__priv_key_alice', priv_key_alice__0)]--[Transition__(<'rab__Bob', param>, 'rab_____0', %v__), BobOpen()]->[State__Bob(<'rab_____3__1_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__'>, pk(priv_key_alice__0))] 

rule Bob__merged_____3__0_0_____4__83[role="Bob"] : [State__Bob(<'rab_____3__0_0', param, %v__>, return__var__4, 'rab__', <l__0__4, l__1__4>, t__0__4), Store(l__0__4, n__0__4), !ACP__(<'rab__Bob', param>, l__0__4, 'rab__recv')]--[Transition__(<'rab__Bob', param>, 'rab_____3__0_0', %v__)]->[State__Bob(<'rab_____4', param, %v__>, 'rab__', 'rab__', n__0__4, t__0__4)] 

rule Bob__merged_____3__1_0_____4__80[role="Bob"] : [State__Bob(<'rab_____3__1_0', param, %v__>, return__var__9, 'rab__', <l__0__9, l__1__9>, t__0__9), Store(l__0__9, n__0__9), In(n__1__9), !ACP__(<'rab__Bob', param>, l__0__9, 'rab__recv')]--[Transition__(<'rab__Bob', param>, 'rab_____3__1_0', %v__)]->[State__Bob(<'rab_____4', param, %v__>, 'rab__', 'rab__', n__1__9, t__0__9)] 

rule Bob__merged_____4_____10__1_0__77[role="Bob"] : [State__Bob(<'rab_____4', param, %v__>, return__var__13, 'rab__', l__0__13, t__0__13), !Const__('rab__priv_key_bob', priv_key_bob__13), !ACP__(<'rab__Bob', param>, 'rab__udp', 'rab__send'), !Const__('rab__nonce_b', nonce_b__21), !Const__('rab__priv_key_alice', priv_key_alice__14), !Const__('rab__nonce_b', nonce_b__14), !Const__('rab__nonce_a', nonce_a__14)]--[Transition__(<'rab__Bob', param>, 'rab_____4', %v__)]->[State__Bob(<'rab_____10__1_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', enc(<nonce_a__14, nonce_b__14>, pk(priv_key_alice__14)), fst(dec(l__0__13, priv_key_bob__13)), l__0__13>, t__0__13), Out(enc(<nonce_a__14, nonce_b__14>, pk(priv_key_alice__14))), Store('rab__udp', enc(<nonce_a__14, nonce_b__14>, pk(priv_key_alice__14))), BobSendNonceB(nonce_b__21)] 

rule Bob__merged_____4_____10__0_0__76[role="Bob"] : [State__Bob(<'rab_____4', param, %v__>, return__var__13, 'rab__', l__0__13, t__0__13), !Const__('rab__priv_key_bob', priv_key_bob__13), !ACP__(<'rab__Bob', param>, 'rab__udp', 'rab__send'), !Const__('rab__nonce_b', nonce_b__21), !Const__('rab__priv_key_alice', priv_key_alice__14), !Const__('rab__nonce_b', nonce_b__14), !Const__('rab__nonce_a', nonce_a__14)]--[Transition__(<'rab__Bob', param>, 'rab_____4', %v__)]->[State__Bob(<'rab_____10__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', enc(<nonce_a__14, nonce_b__14>, pk(priv_key_alice__14)), fst(dec(l__0__13, priv_key_bob__13)), l__0__13>, t__0__13), Out(enc(<nonce_a__14, nonce_b__14>, pk(priv_key_alice__14))), Store('rab__udp', enc(<nonce_a__14, nonce_b__14>, pk(priv_key_alice__14))), BobSendNonceB(nonce_b__21)] 

rule Bob__merged_____10__0_0_____12__57[role="Bob"] : [State__Bob(<'rab_____10__0_0', param, %v__>, return__var__24, 'rab__', <l__0__24, l__1__24, l__2__24, l__3__24, l__4__24>, t__0__24), Store(l__0__24, n__0__24), !ACP__(<'rab__Bob', param>, l__0__24, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__33)]--[Transition__(<'rab__Bob', param>, 'rab_____10__0_0', %v__)]->[State__Bob(<'rab_____12', param, %v__>, 'rab__', 'rab__', <dec(n__0__24, priv_key_bob__33), n__0__24, l__2__24, l__3__24, l__4__24>, t__0__24)] 

rule Bob__merged_____10__1_0_____12__53[role="Bob"] : [State__Bob(<'rab_____10__1_0', param, %v__>, return__var__29, 'rab__', <l__0__29, l__1__29, l__2__29, l__3__29, l__4__29>, t__0__29), Store(l__0__29, n__0__29), In(n__1__29), !ACP__(<'rab__Bob', param>, l__0__29, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__33)]--[Transition__(<'rab__Bob', param>, 'rab_____10__1_0', %v__)]->[State__Bob(<'rab_____12', param, %v__>, 'rab__', 'rab__', <dec(n__1__29, priv_key_bob__33), n__1__29, l__2__29, l__3__29, l__4__29>, t__0__29)] 

rule Bob__merged_____12_____12__0_1__49[role="Bob"] : [State__Bob(<'rab_____12', param, %v__>, return__var__34, 'rab__', <l__0__34, l__1__34, l__2__34, l__3__34, l__4__34>, t__0__34), BobSendNonceB(l__0__34)]--[Transition__(<'rab__Bob', param>, 'rab_____12', %v__), SecretNonceBob(l__0__34)]->[State__Bob(<'rab_____12__0_1', param, %v__>, 'rab__', 'rab__', <l__0__34, l__1__34, l__2__34, l__3__34, l__4__34>, t__0__34)] 

rule Bob__merged_____12__0_1_____19__48[role="Bob"] : [State__Bob(<'rab_____12__0_1', param, %v__>, return__var__36, 'rab__', <l__0__36, l__1__36, l__2__36, l__3__36, l__4__36>, t__0__36)]--[Transition__(<'rab__Bob', param>, 'rab_____12__0_1', %v__), BobClose()]->[State__Bob(<'rab_____19', param, %v__>, 'rab__', 'rab__', 'rab__', t__0__36)] 

restriction Init__ : " All x #i #j . Init__(x) @ #i & Init__(x) @ #j ==> #i = #j "
rule Equality_gen: [] --> [!Eq__(x,x)]
rule NEquality_gen: [] --[NEq___(x,y)]-> [!NEq__(x,y)]
restriction NEquality_rule: "All x #i. NEq___(x,x) @ #i ==> F"
lemma AlwaysStarts__[reuse,use_induction]:

      "All x p #i. Loop__Back(x, p) @i ==> Ex #j. Loop__Start(x, p) @j & j < i"
lemma AlwaysStartsWhenEnds__[reuse,use_induction]:

      "All x p #i. Loop__Finish(x, p) @i ==> Ex #j. Loop__Start(x, p) @j & j < i"
lemma TransitionOnce__[reuse,use_induction]:

      "All x p %i #j #k . Transition__(x, p, %i) @#j &
        Transition__(x, p, %i) @ #k ==> #j = #k"

lemma NonceSecrecyB_Alt : all-traces "not(Ex nb #i #j . SecretNonceBob(nb) @ i & K(nb) @ j)"
lemma NonceSecrecyA_Alt : all-traces "not(Ex na #i #j . SecretNonceAlice(na) @ i & K(na) @ j)"
lemma NonceSecrecyB : all-traces "All nb #j . SecretNonceBob(nb) @ #j ==> not(Ex #m . K(nb) @ #m)"
lemma NonceSecrecyA : all-traces "All na #i . SecretNonceAlice(na) @ i ==> not(Ex #l . K(na) @ l)"
lemma SecrecyCanBeEstablishedB_tmrn : exists-trace "Ex nb #j . SecretNonceBob(nb) @ j"
lemma SecrecyCanBeEstablishedB : exists-trace "Ex nonce_b #time__0 #label_time__0 . !Const__('rab__nonce_b', nonce_b)@#label_time__0 & SecretNonceBob(nonce_b)@#time__0 "
lemma SecrecyCanBeEstablishedA_tmrn : exists-trace "Ex na #i  . SecretNonceAlice(na) @ i"
lemma SecrecyCanBeEstablishedA : exists-trace "Ex nonce_a #time__0 #label_time__0 . !Const__('rab__nonce_a', nonce_a)@#label_time__0 & SecretNonceAlice(nonce_a)@#time__0 "
lemma NonceBIsSent_Alt : exists-trace "Ex nb #j . BobSendNonceB(nb) @ j"
lemma NonceBIsSent : exists-trace "Ex nonce_b #time__0 #label_time__0 . !Const__('rab__nonce_b', nonce_b)@#label_time__0 & BobSendNonceB(nonce_b)@#time__0 "
lemma NonceAIsSent_Alt : exists-trace "Ex na #i . AliceSendNonceA(na) @ i"
lemma NonceAIsSent : exists-trace "Ex nonce_a #time__0 #label_time__0 . !Const__('rab__nonce_a', nonce_a)@#label_time__0 & AliceSendNonceA(nonce_a)@#time__0 "
lemma BobOpenTimestampExists : exists-trace "Ex #i . BobOpen() @ #i "
lemma ReachableBobOpen : exists-trace "Ex  #time__0 . BobOpen()@#time__0 "
lemma tautology : all-traces "All #j  . BobClose() @ #j ==> BobClose() @ #j"
end

