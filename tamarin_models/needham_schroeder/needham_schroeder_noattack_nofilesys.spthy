theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: true/0, verify/3, snd/1, fst/1, dec/2, sign/2, enc/2, pk/1
equations: verify(sign(loc__1, loc__0), loc__1, pk(loc__0))=true(), dec(enc(loc__1, pk(loc__0)), loc__0)=loc__1, snd(<loc__1, loc__0>)=loc__0, fst(<loc__1, loc__0>)=loc__1

// Initializing the gloval constants and access policy rules:




// Global Constants:


rule Const__nonce_a : [Fr(nonce_a)]--[Init__('rab__Const__nonce_a'), Init__(<'rab__Const__nonce_a', nonce_a>), !Const__('rab__nonce_a', nonce_a)]->[!Const__('rab__nonce_a', nonce_a)] 

rule Const__nonce_b : [Fr(nonce_b)]--[Init__('rab__Const__nonce_b'), Init__(<'rab__Const__nonce_b', nonce_b>), !Const__('rab__nonce_b', nonce_b)]->[!Const__('rab__nonce_b', nonce_b)] 

rule Const__priv_key_alice : [Fr(priv_key_alice)]--[Init__('rab__Const__priv_key_alice'), Init__(<'rab__Const__priv_key_alice', priv_key_alice>), !Const__('rab__priv_key_alice', priv_key_alice)]->[!Const__('rab__priv_key_alice', priv_key_alice)] 

rule Const__priv_key_bob : [Fr(priv_key_bob)]--[Init__('rab__Const__priv_key_bob'), Init__(<'rab__Const__priv_key_bob', priv_key_bob>), !Const__('rab__priv_key_bob', priv_key_bob)]->[!Const__('rab__priv_key_bob', priv_key_bob)] 


// Parametric global Constants:



// Access control:


rule Init__system[role="system"] : []--[Init__('rab__system')]->[State__Alice(<'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__', 'rab__'), State__Bob(<'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__', 'rab__'), !ACP__GEN__('rab__system__', 'rab__rab')] 

rule Init__system__ACP__0[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__0')]->[!ACP__(<'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv')] 

rule Init__system__ACP__1[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__1')]->[!ACP__(<'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__send')] 

rule Init__system__ACP__2[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__2')]->[!ACP__(<'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv')] 

rule Init__system__ACP__3[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__3')]->[!ACP__(<'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__send')] 

// Model:  Alice



rule Alice__merged_____0_____7__73[role="Alice"] : [State__Alice(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__nonce_a', nonce_a__0), !ACP__(<'rab__Alice', param>, 'rab__udp', 'rab__send'), !Const__('rab__priv_key_bob', priv_key_bob__1)]--[Transition__(<'rab__Alice', param>, 'rab_____0', %v__)]->[State__Alice(<'rab_____7', param, %v__>, 'rab__', 'rab__', <enc(<nonce_a__0, 'rab__Alice'>, pk(priv_key_bob__1)), pk(priv_key_bob__1)>, <pk(priv_key_bob__1), nonce_a__0>), Out(enc(<nonce_a__0, 'rab__Alice'>, pk(priv_key_bob__1))), Store('rab__udp', enc(<nonce_a__0, 'rab__Alice'>, pk(priv_key_bob__1))), AliceSendNonceA(nonce_a__0)] 

rule Alice__merged_____7_____9__0_0__63[role="Alice"] : [State__Alice(<'rab_____7', param, %v__>, return__var__11, 'rab__', <l__0__11, l__1__11>, <t__0__11, t__1__11>)]--[Transition__(<'rab__Alice', param>, 'rab_____7', %v__), AliceSendNonceATag(t__1__11)]->[State__Alice(<'rab_____9__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', l__0__11, l__1__11>, <t__0__11, t__1__11>)] 

rule Alice__merged_____9__0_0_____13__0_1__61[role="Alice"] : [State__Alice(<'rab_____9__0_0', param, %v__>, return__var__14, 'rab__', <l__0__14, l__1__14, l__2__14, l__3__14>, <t__0__14, t__1__14>), Store(l__0__14, n__0__14), !ACP__(<'rab__Alice', param>, l__0__14, 'rab__recv'), !Const__('rab__priv_key_alice', priv_key_alice__18), !Eq__(fst(dec(n__0__14, priv_key_alice__18)), t__1__14)]--[Transition__(<'rab__Alice', param>, 'rab_____9__0_0', %v__), SecretNonceAlice(t__1__14)]->[State__Alice(<'rab_____13__0_1', param, %v__>, 'rab__', 'rab__', <snd(dec(n__0__14, priv_key_alice__18)), fst(dec(n__0__14, priv_key_alice__18)), dec(n__0__14, priv_key_alice__18), n__0__14, l__2__14, l__3__14>, <t__0__14, t__1__14>)] 

rule Alice__merged_____13__0_1_____13__0_3__0_1__53[role="Alice"] : [State__Alice(<'rab_____13__0_1', param, %v__>, return__var__23, 'rab__', <l__0__23, l__1__23, l__2__23, l__3__23, l__4__23, l__5__23>, <t__0__23, t__1__23>), !ACP__(<'rab__Alice', param>, 'rab__udp', 'rab__send')]--[Transition__(<'rab__Alice', param>, 'rab_____13__0_1', %v__)]->[State__Alice(<'rab_____13__0_3__0_1', param, %v__>, 'rab__', 'rab__', <enc(l__0__23, l__5__23), 'rab__udp', enc(l__0__23, l__5__23), l__0__23, l__1__23, l__2__23, l__3__23, l__4__23, l__5__23>, <t__0__23, t__1__23>), Out(enc(l__0__23, l__5__23)), Store('rab__udp', enc(l__0__23, l__5__23))] 

rule Alice__merged_____13__0_3__0_1_____13__0_5__48[role="Alice"] : [State__Alice(<'rab_____13__0_3__0_1', param, %v__>, return__var__29, 'rab__', <l__0__29, l__1__29, l__2__29, l__3__29, l__4__29, l__5__29, l__6__29, l__7__29, l__8__29>, <t__0__29, t__1__29>)]--[Transition__(<'rab__Alice', param>, 'rab_____13__0_3__0_1', %v__), AliceSendNonceBTag(l__3__29)]->[State__Alice(<'rab_____13__0_5', param, %v__>, 'rab__', 'rab__', <l__2__29, l__3__29, l__4__29, l__5__29, l__6__29, l__7__29, l__8__29>, <t__0__29, t__1__29>)] 

rule Alice__merged_____13__0_5_____21__47[role="Alice"] : [State__Alice(<'rab_____13__0_5', param, %v__>, return__var__31, 'rab__', <l__0__31, l__1__31, l__2__31, l__3__31, l__4__31, l__5__31, l__6__31>, <t__0__31, t__1__31>)]--[Transition__(<'rab__Alice', param>, 'rab_____13__0_5', %v__), AliceClose()]->[State__Alice(<'rab_____21', param, %v__>, 'rab__', 'rab__', 'rab__', <t__0__31, t__1__31>)] 


// Model:  Bob



rule Bob__merged_____0_____4__0_0__64[role="Bob"] : [State__Bob(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__nonce_b', nonce_b__0), !Const__('rab__priv_key_alice', priv_key_alice__1)]--[Transition__(<'rab__Bob', param>, 'rab_____0', %v__), BobOpen()]->[State__Bob(<'rab_____4__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__'>, <pk(priv_key_alice__1), nonce_b__0>)] 

rule Bob__merged_____4__0_0_____10__60[role="Bob"] : [State__Bob(<'rab_____4__0_0', param, %v__>, return__var__5, 'rab__', <l__0__5, l__1__5>, <t__0__5, t__1__5>), Store(l__0__5, n__0__5), !ACP__(<'rab__Bob', param>, l__0__5, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__9), !ACP__(<'rab__Bob', param>, 'rab__udp', 'rab__send')]--[Transition__(<'rab__Bob', param>, 'rab_____4__0_0', %v__)]->[State__Bob(<'rab_____10', param, %v__>, 'rab__', 'rab__', <enc(<fst(dec(n__0__5, priv_key_bob__9)), t__1__5>, t__0__5), fst(dec(n__0__5, priv_key_bob__9)), n__0__5>, <t__0__5, t__1__5>), Out(enc(<fst(dec(n__0__5, priv_key_bob__9)), t__1__5>, t__0__5)), Store('rab__udp', enc(<fst(dec(n__0__5, priv_key_bob__9)), t__1__5>, t__0__5)), BobSendNonceB(t__1__5)] 

rule Bob__merged_____10_____12__0_0__48[role="Bob"] : [State__Bob(<'rab_____10', param, %v__>, return__var__18, 'rab__', <l__0__18, l__1__18, l__2__18>, <t__0__18, t__1__18>)]--[Transition__(<'rab__Bob', param>, 'rab_____10', %v__), BobSendNonceBTag(t__1__18)]->[State__Bob(<'rab_____12__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', l__0__18, l__1__18, l__2__18>, <t__0__18, t__1__18>)] 

rule Bob__merged_____12__0_0_____14__0_1__46[role="Bob"] : [State__Bob(<'rab_____12__0_0', param, %v__>, return__var__21, 'rab__', <l__0__21, l__1__21, l__2__21, l__3__21, l__4__21>, <t__0__21, t__1__21>), Store(l__0__21, n__0__21), !ACP__(<'rab__Bob', param>, l__0__21, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__25), !Eq__(dec(n__0__21, priv_key_bob__25), t__1__21)]--[Transition__(<'rab__Bob', param>, 'rab_____12__0_0', %v__), SecretNonceBob(t__1__21)]->[State__Bob(<'rab_____14__0_1', param, %v__>, 'rab__', 'rab__', <dec(n__0__21, priv_key_bob__25), n__0__21, l__2__21, l__3__21, l__4__21>, <t__0__21, t__1__21>)] 

rule Bob__merged_____14__0_1_____21__40[role="Bob"] : [State__Bob(<'rab_____14__0_1', param, %v__>, return__var__28, 'rab__', <l__0__28, l__1__28, l__2__28, l__3__28, l__4__28>, <t__0__28, t__1__28>)]--[Transition__(<'rab__Bob', param>, 'rab_____14__0_1', %v__), BobClose()]->[State__Bob(<'rab_____21', param, %v__>, 'rab__', 'rab__', 'rab__', <t__0__28, t__1__28>)] 

restriction Init__ : " All x #i #j . Init__(x) @ #i & Init__(x) @ #j ==> #i = #j "
rule Equality_gen: [] --> [!Eq__(x,x)]
rule NEquality_gen: [] --[NEq___(x,y)]-> [!NEq__(x,y)]
restriction NEquality_rule: "All x #i. NEq___(x,x) @ #i ==> F"
lemma AlwaysStarts__[reuse,use_induction]:

      "All x p #i. Loop__Back(x, p) @i ==> Ex #j. Loop__Start(x, p) @j & j < i"
lemma AlwaysStartsWhenEnds__[reuse,use_induction]:

      "All x p #i. Loop__Finish(x, p) @i ==> Ex #j. Loop__Start(x, p) @j & j < i"
lemma TransitionOnce__[reuse,use_induction]:

      "All x p %i #j #k . Transition__(x, p, %i) @#j &
        Transition__(x, p, %i) @ #k ==> #j = #k"

lemma NonceSecrecyB_tmrn : all-traces "not(Ex nb #i #j . SecretNonceBob(nb) @ i & K(nb) @ j)"
lemma NonceSecrecyA_tmrn : all-traces "not(Ex na #i #j . SecretNonceAlice(na) @ i & K(na) @ j)"
lemma NonceSecrecyB : all-traces "All nb #i . SecretNonceBob(nb) @ i ==> not(Ex #m . K(nb) @ m)"
lemma NonceSecrecyA : all-traces "All na #i . SecretNonceAlice(na) @ i ==> not(Ex #l . K(na) @ l)"
lemma SecrecyCanBeEstablishedB_tmrn : exists-trace "Ex nb #j . SecretNonceBob(nb) @ j"
lemma SecrecyCanBeEstablishedB : exists-trace "Ex nonce_b #time__0 #label_time__0 . !Const__('rab__nonce_b', nonce_b)@#label_time__0 & SecretNonceBob(nonce_b)@#time__0 "
lemma SecrecyCanBeEstablishedA_tmrn : exists-trace "Ex na #i  . SecretNonceAlice(na) @ i"
lemma SecrecyCanBeEstablishedA : exists-trace "Ex nonce_a #time__0 #label_time__0 . !Const__('rab__nonce_a', nonce_a)@#label_time__0 & SecretNonceAlice(nonce_a)@#time__0 "
lemma NonceBIsSentByAlice : exists-trace "Ex nonce_b #time__0 #label_time__0 . !Const__('rab__nonce_b', nonce_b)@#label_time__0 & AliceSendNonceBTag(nonce_b)@#time__0 "
lemma NonceBIsSent_tmrn : exists-trace "Ex nb #j . BobSendNonceBTag(nb) @ j"
lemma NonceBIsSent : exists-trace "Ex nonce_b #time__0 #label_time__0 . !Const__('rab__nonce_b', nonce_b)@#label_time__0 & BobSendNonceBTag(nonce_b)@#time__0 "
lemma NonceAIsSent_tmrn : exists-trace "Ex na #i . AliceSendNonceATag(na) @ i"
lemma NonceAIsSent : exists-trace "Ex nonce_a #time__0 #label_time__0 . !Const__('rab__nonce_a', nonce_a)@#label_time__0 & AliceSendNonceATag(nonce_a)@#time__0 "
lemma BobOpenReachable_tmrn : exists-trace "Ex #i . BobOpen() @ #i "
lemma BobOpenReachable : exists-trace "Ex  #time__0 . BobOpen()@#time__0 "
lemma tautology : all-traces "All #j  . BobClose() @ #j ==> BobClose() @ #j"
end

