theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: true/0, verify/3, snd/1, fst/1, sign/2, pk/1
equations: verify(sign(loc__1, loc__0), loc__1, pk(loc__0))=true(), snd(<loc__1, loc__0>)=loc__0, fst(<loc__1, loc__0>)=loc__1

// Initializing the gloval constants and access policy rules:




// Global Constants:


rule Const__priv_key_alice : [Fr(priv_key_alice)]--[Init__('rab__Const__priv_key_alice'), Init__(<'rab__Const__priv_key_alice', priv_key_alice>), !Const__('rab__priv_key_alice', priv_key_alice)]->[!Const__('rab__priv_key_alice', priv_key_alice)] 


// Parametric global Constants:



// Access control:


rule Init__system[role="system"] : []--[Init__('rab__system')]->[State__Alice(<'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__', 'rab__'), State__Bob(<'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__', 'rab__'), !ACP__GEN__('rab__system__', 'rab__rab')] 

rule Init__system__ACP__0[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__0')]->[!ACP__(<'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv')] 

rule Init__system__ACP__1[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__1')]->[!ACP__(<'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__send')] 

rule Init__system__ACP__2[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__2')]->[!ACP__(<'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv')] 

rule Init__system__ACP__3[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__3')]->[!ACP__(<'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__send')] 

// Model:  Alice



rule Alice__merged_____0_____5__0_1__37[role="Alice"] : [State__Alice(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__priv_key_alice', priv_key_alice__0), !Const__('rab__priv_key_alice', priv_key_alice__10), Fr(n__0__3)]--[Transition__(<'rab__Alice', param>, 'rab_____0', %v__)]->[State__Alice(<'rab_____5__0_1', param, %v__>, 'rab__', 'rab__', <sign(n__0__3, priv_key_alice__10), sign(n__0__3, priv_key_alice__10), n__0__3>, priv_key_alice__0), Out(n__0__3), Out(sign(n__0__3, priv_key_alice__10))] 

rule Alice__merged_____5__0_1_____7__25[role="Alice"] : [State__Alice(<'rab_____5__0_1', param, %v__>, return__var__13, 'rab__', <l__0__13, l__1__13, l__2__13>, t__0__13)]--[Transition__(<'rab__Alice', param>, 'rab_____5__0_1', %v__), MsgSend(l__2__13)]->[State__Alice(<'rab_____7', param, %v__>, 'rab__', 'rab__', <l__1__13, l__2__13>, t__0__13)] 

rule Alice__merged_____7_____7__0_1__24[role="Alice"] : [State__Alice(<'rab_____7', param, %v__>, return__var__15, 'rab__', <l__0__15, l__1__15>, t__0__15), !ACP__(<'rab__Alice', param>, 'rab__udp', 'rab__send')]--[Transition__(<'rab__Alice', param>, 'rab_____7', %v__)]->[State__Alice(<'rab_____7__0_1', param, %v__>, 'rab__', 'rab__', <<l__1__15, l__0__15>, 'rab__udp', l__0__15, l__1__15>, t__0__15), Store('rab__udp', <l__1__15, l__0__15>)] 

rule Alice__merged_____7__0_1_____11__23[role="Alice"] : [State__Alice(<'rab_____7__0_1', param, %v__>, return__var__17, 'rab__', <l__0__17, l__1__17, l__2__17, l__3__17>, t__0__17)]--[Transition__(<'rab__Alice', param>, 'rab_____7__0_1', %v__), AliceClose()]->[State__Alice(<'rab_____11', param, %v__>, 'rab__', 'rab__', 'rab__', t__0__17)] 


// Model:  Bob



rule Bob__merged_____0_____2__1_0__39[role="Bob"] : [State__Bob(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__priv_key_alice', priv_key_alice__0)]--[Transition__(<'rab__Bob', param>, 'rab_____0', %v__)]->[State__Bob(<'rab_____2__1_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__'>, pk(priv_key_alice__0))] 

rule Bob__merged_____0_____2__0_0__38[role="Bob"] : [State__Bob(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__priv_key_alice', priv_key_alice__0)]--[Transition__(<'rab__Bob', param>, 'rab_____0', %v__)]->[State__Bob(<'rab_____2__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__'>, pk(priv_key_alice__0))] 

rule Bob__merged_____2__0_0_____3__35[role="Bob"] : [State__Bob(<'rab_____2__0_0', param, %v__>, return__var__3, 'rab__', <l__0__3, l__1__3>, t__0__3), Store(l__0__3, n__0__3), !ACP__(<'rab__Bob', param>, l__0__3, 'rab__recv')]--[Transition__(<'rab__Bob', param>, 'rab_____2__0_0', %v__)]->[State__Bob(<'rab_____3', param, %v__>, 'rab__', 'rab__', n__0__3, t__0__3)] 

rule Bob__merged_____2__1_0_____3__32[role="Bob"] : [State__Bob(<'rab_____2__1_0', param, %v__>, return__var__8, 'rab__', <l__0__8, l__1__8>, t__0__8), Store(l__0__8, n__0__8), In(n__1__8), !ACP__(<'rab__Bob', param>, l__0__8, 'rab__recv')]--[Transition__(<'rab__Bob', param>, 'rab_____2__1_0', %v__)]->[State__Bob(<'rab_____3', param, %v__>, 'rab__', 'rab__', n__1__8, t__0__8)] 

rule Bob__merged_____3_____4__1_1__29[role="Bob"] : [State__Bob(<'rab_____3', param, %v__>, return__var__12, 'rab__', l__0__12, t__0__12), !NEq__(verify(snd(l__0__12), fst(l__0__12), t__0__12), true())]--[Transition__(<'rab__Bob', param>, 'rab_____3', %v__), IntegrityFail(fst(l__0__12))]->[State__Bob(<'rab_____4__1_1', param, %v__>, 'rab__', 'rab__', <verify(snd(l__0__12), fst(l__0__12), t__0__12), l__0__12>, t__0__12)] 

rule Bob__merged_____3_____4__0_1__28[role="Bob"] : [State__Bob(<'rab_____3', param, %v__>, return__var__12, 'rab__', l__0__12, t__0__12), !Eq__(verify(snd(l__0__12), fst(l__0__12), t__0__12), true())]--[Transition__(<'rab__Bob', param>, 'rab_____3', %v__), IntegritySuccess(fst(l__0__12))]->[State__Bob(<'rab_____4__0_1', param, %v__>, 'rab__', 'rab__', <verify(snd(l__0__12), fst(l__0__12), t__0__12), l__0__12>, t__0__12)] 

rule Bob__merged_____4__0_1_____8__25[role="Bob"] : [State__Bob(<'rab_____4__0_1', param, %v__>, return__var__15, 'rab__', <l__0__15, l__1__15>, t__0__15)]--[Transition__(<'rab__Bob', param>, 'rab_____4__0_1', %v__), BobClose()]->[State__Bob(<'rab_____8', param, %v__>, 'rab__', 'rab__', 'rab__', t__0__15)] 

rule Bob__merged_____4__1_1_____8__24[role="Bob"] : [State__Bob(<'rab_____4__1_1', param, %v__>, return__var__18, 'rab__', <l__0__18, l__1__18>, t__0__18)]--[Transition__(<'rab__Bob', param>, 'rab_____4__1_1', %v__), BobClose()]->[State__Bob(<'rab_____8', param, %v__>, 'rab__', 'rab__', 'rab__', t__0__18)] 

restriction Init__ : " All x #i #j . Init__(x) @ #i & Init__(x) @ #j ==> #i = #j "
rule Equality_gen: [] --> [!Eq__(x,x)]
rule NEquality_gen: [] --[NEq___(x,y)]-> [!NEq__(x,y)]
restriction NEquality_rule: "All x #i. NEq___(x,x) @ #i ==> F"
lemma AlwaysStarts__[reuse,use_induction]:

      "All x p #i. Loop__Back(x, p) @i ==> Ex #j. Loop__Start(x, p) @j & j < i"
lemma AlwaysStartsWhenEnds__[reuse,use_induction]:

      "All x p #i. Loop__Finish(x, p) @i ==> Ex #j. Loop__Start(x, p) @j & j < i"
lemma TransitionOnce__[reuse,use_induction]:

      "All x p %i #j #k . Transition__(x, p, %i) @#j &
        Transition__(x, p, %i) @ #k ==> #j = #k"

lemma Correspondence : all-traces "All msg #j  . IntegritySuccess(msg) @ #j ==> Ex #i . MsgSend (msg) @ i & i < j"
lemma Reachable : exists-trace "Ex #i #j . AliceClose () @ #i & BobClose() @ #j"
end

