theory rabbit

begin
builtins: natural-numbers


// The signature of our model:



functions: true/0, verify/3, snd/1, fst/1, dec/2, sign/2, enc/2, pk/1
equations: verify(sign(loc__1, loc__0), loc__1, pk(loc__0))=true(), dec(enc(loc__1, pk(loc__0)), loc__0)=loc__1, snd(<loc__1, loc__0>)=loc__0, fst(<loc__1, loc__0>)=loc__1

// Initializing the gloval constants and access policy rules:




// Global Constants:


rule Const__nonce_a : [Fr(nonce_a)]--[Init__('rab__Const__nonce_a'), Init__(<'rab__Const__nonce_a', nonce_a>), !Const__('rab__nonce_a', nonce_a)]->[!Const__('rab__nonce_a', nonce_a)] 

rule Const__nonce_b : [Fr(nonce_b)]--[Init__('rab__Const__nonce_b'), Init__(<'rab__Const__nonce_b', nonce_b>), !Const__('rab__nonce_b', nonce_b)]->[!Const__('rab__nonce_b', nonce_b)] 

rule Const__priv_key_alice : [Fr(priv_key_alice)]--[Init__('rab__Const__priv_key_alice'), Init__(<'rab__Const__priv_key_alice', priv_key_alice>), !Const__('rab__priv_key_alice', priv_key_alice)]->[!Const__('rab__priv_key_alice', priv_key_alice)] 

rule Const__priv_key_bob : [Fr(priv_key_bob)]--[Init__('rab__Const__priv_key_bob'), Init__(<'rab__Const__priv_key_bob', priv_key_bob>), !Const__('rab__priv_key_bob', priv_key_bob)]->[!Const__('rab__priv_key_bob', priv_key_bob)] 


// Parametric global Constants:



// Access control:


rule Init__system[role="system"] : []--[Init__('rab__system')]->[State__Alice(<'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__', 'rab__'), State__Bob(<'rab_____0', 'rab__rab', %1>, 'rab__', 'rab__', 'rab__', 'rab__'), !ACP__GEN__('rab__system__', 'rab__rab')] 

rule Init__system__ACP__0[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__0')]->[!ACP__(<'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__recv')] 

rule Init__system__ACP__1[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__1')]->[!ACP__(<'rab__Bob', 'rab__rab'>, 'rab__udp', 'rab__send')] 

rule Init__system__ACP__2[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__2')]->[!ACP__(<'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__recv')] 

rule Init__system__ACP__3[role="system"] : [!ACP__GEN__('rab__system__', 'rab__rab')]--[Init__('rab__system__ACP__3')]->[!ACP__(<'rab__Alice', 'rab__rab'>, 'rab__udp', 'rab__send')] 

// Model:  Alice



rule Alice__merged_____0_____3__1_0__137[role="Alice"] : [State__Alice(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__priv_key_bob', priv_key_bob__0), !Const__('rab__nonce_a', nonce_a__1)]--[Transition__(<'rab__Alice', param>, 'rab_____0', %v__)]->[State__Alice(<'rab_____3__1_0', param, %v__>, 'rab__', 'rab__', <'rab____secret__pub_bob', 'rab__'>, nonce_a__1), File__Alice(param, 'rab____secret__pub_bob', pk(priv_key_bob__0)), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fclose'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fread'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen')] 

rule Alice__merged_____1_____10__136[role="Alice"] : [State__Alice(<'rab_____1', param, %v__>, return__var__1, 'rab__', 'rab__', 'rab__'), !Const__('rab__nonce_a', nonce_a__1), Fr(n__0__5), !Eq__(n__0__4, n__0__21), !ACP__(<'rab__Alice', param>, 'rab__udp', 'rab__send'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen'), File__Alice(param, loc__0, n__0__4)]--[Transition__(<'rab__Alice', param>, 'rab_____1', %v__)]->[State__Alice(<'rab_____10', param, %v__>, 'rab__', 'rab__', <enc(<nonce_a__1, 'rab__Alice'>, n__0__21), n__0__21, n__0__5>, nonce_a__1), File__Alice(param, loc__0, n__0__4), Fd__Alice(param, n__0__5, n__0__21), Out(enc(<nonce_a__1, 'rab__Alice'>, n__0__21)), Store('rab__udp', enc(<nonce_a__1, 'rab__Alice'>, n__0__21)), AliceSendNonceA(nonce_a__1)] 

rule Alice__merged_____3__1_0_____10__124[role="Alice"] : [State__Alice(<'rab_____3__1_0', param, %v__>, return__var__12, 'rab__', <l__0__12, l__1__12>, t__0__12), File__Alice(param, loc__0, n__0__12), In(n__1__12), !ACP__(<'rab__Alice', param>, l__0__12, 'rab__fopen'), !ACP__(<'rab__Alice', param>, l__0__12, 'rab__fopen'), !ACP__(<'rab__Alice', param>, 'rab__udp', 'rab__send'), !Eq__(n__1__12, n__0__21), Fr(n__0__13)]--[Transition__(<'rab__Alice', param>, 'rab_____3__1_0', %v__)]->[State__Alice(<'rab_____10', param, %v__>, 'rab__', 'rab__', <enc(<t__0__12, 'rab__Alice'>, n__0__21), n__0__21, n__0__13>, t__0__12), File__Alice(param, loc__0, n__1__12), Fd__Alice(param, n__0__13, n__0__21), Out(enc(<t__0__12, 'rab__Alice'>, n__0__21)), Store('rab__udp', enc(<t__0__12, 'rab__Alice'>, n__0__21)), AliceSendNonceA(t__0__12)] 

rule Alice__merged_____10_____12__1_0__104[role="Alice"] : [State__Alice(<'rab_____10', param, %v__>, return__var__33, 'rab__', <l__0__33, l__1__33, l__2__33>, t__0__33)]--[Transition__(<'rab__Alice', param>, 'rab_____10', %v__), AliceSendNonceATag(t__0__33)]->[State__Alice(<'rab_____12__1_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', l__0__33, l__1__33, l__2__33>, t__0__33)] 

rule Alice__merged_____10_____12__0_0__103[role="Alice"] : [State__Alice(<'rab_____10', param, %v__>, return__var__33, 'rab__', <l__0__33, l__1__33, l__2__33>, t__0__33)]--[Transition__(<'rab__Alice', param>, 'rab_____10', %v__), AliceSendNonceATag(t__0__33)]->[State__Alice(<'rab_____12__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', l__0__33, l__1__33, l__2__33>, t__0__33)] 

rule Alice__merged_____12__0_0_____16__0_1__100[role="Alice"] : [State__Alice(<'rab_____12__0_0', param, %v__>, return__var__36, 'rab__', <l__0__36, l__1__36, l__2__36, l__3__36, l__4__36>, t__0__36), Store(l__0__36, n__0__36), !ACP__(<'rab__Alice', param>, l__0__36, 'rab__recv'), !Const__('rab__priv_key_alice', priv_key_alice__45), !Eq__(fst(dec(n__0__36, priv_key_alice__45)), t__0__36)]--[Transition__(<'rab__Alice', param>, 'rab_____12__0_0', %v__), SecretNonceAlice(t__0__36)]->[State__Alice(<'rab_____16__0_1', param, %v__>, 'rab__', 'rab__', <snd(dec(n__0__36, priv_key_alice__45)), fst(dec(n__0__36, priv_key_alice__45)), dec(n__0__36, priv_key_alice__45), n__0__36, l__2__36, l__3__36, l__4__36>, t__0__36)] 

rule Alice__merged_____12__1_0_____16__0_1__96[role="Alice"] : [State__Alice(<'rab_____12__1_0', param, %v__>, return__var__41, 'rab__', <l__0__41, l__1__41, l__2__41, l__3__41, l__4__41>, t__0__41), Store(l__0__41, n__0__41), In(n__1__41), !ACP__(<'rab__Alice', param>, l__0__41, 'rab__recv'), !Const__('rab__priv_key_alice', priv_key_alice__45), !Eq__(fst(dec(n__1__41, priv_key_alice__45)), t__0__41)]--[Transition__(<'rab__Alice', param>, 'rab_____12__1_0', %v__), SecretNonceAlice(t__0__41)]->[State__Alice(<'rab_____16__0_1', param, %v__>, 'rab__', 'rab__', <snd(dec(n__1__41, priv_key_alice__45)), fst(dec(n__1__41, priv_key_alice__45)), dec(n__1__41, priv_key_alice__45), n__1__41, l__2__41, l__3__41, l__4__41>, t__0__41)] 

rule Alice__merged_____16__0_1_____16__0_3__0_1__88[role="Alice"] : [State__Alice(<'rab_____16__0_1', param, %v__>, return__var__50, 'rab__', <l__0__50, l__1__50, l__2__50, l__3__50, l__4__50, l__5__50, l__6__50>, t__0__50), !ACP__(<'rab__Alice', param>, 'rab__udp', 'rab__send')]--[Transition__(<'rab__Alice', param>, 'rab_____16__0_1', %v__)]->[State__Alice(<'rab_____16__0_3__0_1', param, %v__>, 'rab__', 'rab__', <enc(l__0__50, l__5__50), 'rab__udp', enc(l__0__50, l__5__50), l__0__50, l__1__50, l__2__50, l__3__50, l__4__50, l__5__50, l__6__50>, t__0__50), Out(enc(l__0__50, l__5__50)), Store('rab__udp', enc(l__0__50, l__5__50))] 

rule Alice__merged_____16__0_3__0_1_____16__0_5__83[role="Alice"] : [State__Alice(<'rab_____16__0_3__0_1', param, %v__>, return__var__56, 'rab__', <l__0__56, l__1__56, l__2__56, l__3__56, l__4__56, l__5__56, l__6__56, l__7__56, l__8__56, l__9__56>, t__0__56)]--[Transition__(<'rab__Alice', param>, 'rab_____16__0_3__0_1', %v__), AliceSendNonceBTag(l__3__56)]->[State__Alice(<'rab_____16__0_5', param, %v__>, 'rab__', 'rab__', <l__2__56, l__3__56, l__4__56, l__5__56, l__6__56, l__7__56, l__8__56, l__9__56>, t__0__56)] 

rule Alice__merged_____16__0_5_____26__82[role="Alice"] : [State__Alice(<'rab_____16__0_5', param, %v__>, return__var__58, 'rab__', <l__0__58, l__1__58, l__2__58, l__3__58, l__4__58, l__5__58, l__6__58, l__7__58>, t__0__58), Fd__Alice(param, l__7__58, n__0__61)]--[Transition__(<'rab__Alice', param>, 'rab_____16__0_5', %v__), AliceClose()]->[State__Alice(<'rab_____26', param, %v__>, 'rab__', 'rab__', 'rab__', t__0__58)] 

rule Alice__init_filesys_____0_____1__0[role="Alice"] : [State__Alice(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__priv_key_bob', priv_key_bob__0)]--[Transition__(<'rab__Alice', param>, 'rab_____0', %v__)]->[State__Alice(<'rab_____1', param, %v__>, 'rab__', 'rab__', 'rab__', 'rab__'), File__Alice(param, 'rab____secret__pub_bob', pk(priv_key_bob__0)), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fclose'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fread'), !ACP__(<'rab__Alice', param>, 'rab____secret__pub_bob', 'rab__fopen')] 


// Model:  Bob



rule Bob__merged_____0_____4__1_0__88[role="Bob"] : [State__Bob(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__nonce_b', nonce_b__0), !Const__('rab__priv_key_alice', priv_key_alice__1)]--[Transition__(<'rab__Bob', param>, 'rab_____0', %v__), BobOpen()]->[State__Bob(<'rab_____4__1_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__'>, <pk(priv_key_alice__1), nonce_b__0>)] 

rule Bob__merged_____0_____4__0_0__87[role="Bob"] : [State__Bob(<'rab_____0', param, %v__>, return__var__0, 'rab__', 'rab__', 'rab__'), !Const__('rab__nonce_b', nonce_b__0), !Const__('rab__priv_key_alice', priv_key_alice__1)]--[Transition__(<'rab__Bob', param>, 'rab_____0', %v__), BobOpen()]->[State__Bob(<'rab_____4__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__'>, <pk(priv_key_alice__1), nonce_b__0>)] 

rule Bob__merged_____4__0_0_____10__80[role="Bob"] : [State__Bob(<'rab_____4__0_0', param, %v__>, return__var__5, 'rab__', <l__0__5, l__1__5>, <t__0__5, t__1__5>), Store(l__0__5, n__0__5), !ACP__(<'rab__Bob', param>, l__0__5, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__14), !ACP__(<'rab__Bob', param>, 'rab__udp', 'rab__send')]--[Transition__(<'rab__Bob', param>, 'rab_____4__0_0', %v__)]->[State__Bob(<'rab_____10', param, %v__>, 'rab__', 'rab__', <enc(<fst(dec(n__0__5, priv_key_bob__14)), t__1__5>, t__0__5), fst(dec(n__0__5, priv_key_bob__14)), n__0__5>, <t__0__5, t__1__5>), Out(enc(<fst(dec(n__0__5, priv_key_bob__14)), t__1__5>, t__0__5)), Store('rab__udp', enc(<fst(dec(n__0__5, priv_key_bob__14)), t__1__5>, t__0__5)), BobSendNonceB(t__1__5)] 

rule Bob__merged_____4__1_0_____10__76[role="Bob"] : [State__Bob(<'rab_____4__1_0', param, %v__>, return__var__10, 'rab__', <l__0__10, l__1__10>, <t__0__10, t__1__10>), Store(l__0__10, n__0__10), In(n__1__10), !ACP__(<'rab__Bob', param>, l__0__10, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__14), !ACP__(<'rab__Bob', param>, 'rab__udp', 'rab__send')]--[Transition__(<'rab__Bob', param>, 'rab_____4__1_0', %v__)]->[State__Bob(<'rab_____10', param, %v__>, 'rab__', 'rab__', <enc(<fst(dec(n__1__10, priv_key_bob__14)), t__1__10>, t__0__10), fst(dec(n__1__10, priv_key_bob__14)), n__1__10>, <t__0__10, t__1__10>), Out(enc(<fst(dec(n__1__10, priv_key_bob__14)), t__1__10>, t__0__10)), Store('rab__udp', enc(<fst(dec(n__1__10, priv_key_bob__14)), t__1__10>, t__0__10)), BobSendNonceB(t__1__10)] 

rule Bob__merged_____10_____12__1_0__64[role="Bob"] : [State__Bob(<'rab_____10', param, %v__>, return__var__23, 'rab__', <l__0__23, l__1__23, l__2__23>, <t__0__23, t__1__23>)]--[Transition__(<'rab__Bob', param>, 'rab_____10', %v__), BobSendNonceBTag(t__1__23)]->[State__Bob(<'rab_____12__1_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', l__0__23, l__1__23, l__2__23>, <t__0__23, t__1__23>)] 

rule Bob__merged_____10_____12__0_0__63[role="Bob"] : [State__Bob(<'rab_____10', param, %v__>, return__var__23, 'rab__', <l__0__23, l__1__23, l__2__23>, <t__0__23, t__1__23>)]--[Transition__(<'rab__Bob', param>, 'rab_____10', %v__), BobSendNonceBTag(t__1__23)]->[State__Bob(<'rab_____12__0_0', param, %v__>, 'rab__', 'rab__', <'rab__udp', 'rab__', l__0__23, l__1__23, l__2__23>, <t__0__23, t__1__23>)] 

rule Bob__merged_____12__0_0_____14__0_1__60[role="Bob"] : [State__Bob(<'rab_____12__0_0', param, %v__>, return__var__26, 'rab__', <l__0__26, l__1__26, l__2__26, l__3__26, l__4__26>, <t__0__26, t__1__26>), Store(l__0__26, n__0__26), !ACP__(<'rab__Bob', param>, l__0__26, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__35), !Eq__(dec(n__0__26, priv_key_bob__35), t__1__26)]--[Transition__(<'rab__Bob', param>, 'rab_____12__0_0', %v__), SecretNonceBob(t__1__26)]->[State__Bob(<'rab_____14__0_1', param, %v__>, 'rab__', 'rab__', <dec(n__0__26, priv_key_bob__35), n__0__26, l__2__26, l__3__26, l__4__26>, <t__0__26, t__1__26>)] 

rule Bob__merged_____12__1_0_____14__0_1__56[role="Bob"] : [State__Bob(<'rab_____12__1_0', param, %v__>, return__var__31, 'rab__', <l__0__31, l__1__31, l__2__31, l__3__31, l__4__31>, <t__0__31, t__1__31>), Store(l__0__31, n__0__31), In(n__1__31), !ACP__(<'rab__Bob', param>, l__0__31, 'rab__recv'), !Const__('rab__priv_key_bob', priv_key_bob__35), !Eq__(dec(n__1__31, priv_key_bob__35), t__1__31)]--[Transition__(<'rab__Bob', param>, 'rab_____12__1_0', %v__), SecretNonceBob(t__1__31)]->[State__Bob(<'rab_____14__0_1', param, %v__>, 'rab__', 'rab__', <dec(n__1__31, priv_key_bob__35), n__1__31, l__2__31, l__3__31, l__4__31>, <t__0__31, t__1__31>)] 

rule Bob__merged_____14__0_1_____21__50[role="Bob"] : [State__Bob(<'rab_____14__0_1', param, %v__>, return__var__38, 'rab__', <l__0__38, l__1__38, l__2__38, l__3__38, l__4__38>, <t__0__38, t__1__38>)]--[Transition__(<'rab__Bob', param>, 'rab_____14__0_1', %v__), BobClose()]->[State__Bob(<'rab_____21', param, %v__>, 'rab__', 'rab__', 'rab__', <t__0__38, t__1__38>)] 

restriction Init__ : " All x #i #j . Init__(x) @ #i & Init__(x) @ #j ==> #i = #j "
rule Equality_gen: [] --> [!Eq__(x,x)]
rule NEquality_gen: [] --[NEq___(x,y)]-> [!NEq__(x,y)]
restriction NEquality_rule: "All x #i. NEq___(x,x) @ #i ==> F"
lemma AlwaysStarts__[reuse,use_induction]:

      "All x p #i. Loop__Back(x, p) @i ==> Ex #j. Loop__Start(x, p) @j & j < i"
lemma AlwaysStartsWhenEnds__[reuse,use_induction]:

      "All x p #i. Loop__Finish(x, p) @i ==> Ex #j. Loop__Start(x, p) @j & j < i"
lemma TransitionOnce__[reuse,use_induction]:

      "All x p %i #j #k . Transition__(x, p, %i) @#j &
        Transition__(x, p, %i) @ #k ==> #j = #k"

lemma NonceSecrecyB_tmrn : all-traces "not(Ex nb #i #j . SecretNonceBob(nb) @ i & K(nb) @ j)"
lemma NonceSecrecyA_tmrn : all-traces "not(Ex na #i #j . SecretNonceAlice(na) @ i & K(na) @ j)"
lemma NonceSecrecyB : all-traces "All nb #i . SecretNonceBob(nb) @ i ==> not(Ex #m . K(nb) @ m)"
lemma NonceSecrecyA : all-traces "All na #i . SecretNonceAlice(na) @ i ==> not(Ex #l . K(na) @ l)"
lemma SecrecyCanBeEstablishedB_tmrn : exists-trace "Ex nb #j . SecretNonceBob(nb) @ j"
lemma SecrecyCanBeEstablishedB : exists-trace "Ex nonce_b #time__0 #label_time__0 . !Const__('rab__nonce_b', nonce_b)@#label_time__0 & SecretNonceBob(nonce_b)@#time__0 "
lemma SecrecyCanBeEstablishedA_tmrn : exists-trace "Ex na #i  . SecretNonceAlice(na) @ i"
lemma SecrecyCanBeEstablishedA : exists-trace "Ex nonce_a #time__0 #label_time__0 . !Const__('rab__nonce_a', nonce_a)@#label_time__0 & SecretNonceAlice(nonce_a)@#time__0 "
lemma NonceBIsSentByAlice : exists-trace "Ex nonce_b #time__0 #label_time__0 . !Const__('rab__nonce_b', nonce_b)@#label_time__0 & AliceSendNonceBTag(nonce_b)@#time__0 "
lemma NonceBIsSent_tmrn : exists-trace "Ex nb #j . BobSendNonceBTag(nb) @ j"
lemma NonceBIsSent : exists-trace "Ex nonce_b #time__0 #label_time__0 . !Const__('rab__nonce_b', nonce_b)@#label_time__0 & BobSendNonceBTag(nonce_b)@#time__0 "
lemma NonceAIsSent_tmrn : exists-trace "Ex na #i . AliceSendNonceATag(na) @ i"
lemma NonceAIsSent : exists-trace "Ex nonce_a #time__0 #label_time__0 . !Const__('rab__nonce_a', nonce_a)@#label_time__0 & AliceSendNonceATag(nonce_a)@#time__0 "
lemma BobOpenReachable_tmrn : exists-trace "Ex #i . BobOpen() @ #i "
lemma BobOpenReachable : exists-trace "Ex  #time__0 . BobOpen()@#time__0 "
lemma tautology : all-traces "All #j  . BobClose() @ #j ==> BobClose() @ #j"
end

